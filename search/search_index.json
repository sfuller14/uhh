{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Syntax notes and code I always forget</p>"},{"location":"#code-snippets","title":"Code Snippets","text":"Code Snippets - Contents <ul> <li>GIT<ul> <li>Commands</li> <li>ghh CLI</li> </ul> </li> <li>SHELL<ul> <li>Shortcuts (zsh)</li> <li>Core Commands</li> <li>Chaining Commands</li> <li>Explanation of <code>grep</code></li> <li>Piping Commands</li> <li>Help</li> </ul> </li> <li>PYTHON<ul> <li>OpenAI API</li> <li>Token Counts</li> <li>numpy</li> <li>Reshaping</li> <li>Broadcasting</li> </ul> </li> <li>RARELY USED<ul> <li>tmux</li> <li>Pane Management</li> <li>Window Management</li> <li>Session Management</li> <li>Resizing Panes</li> <li>Miscellaneous</li> </ul> </li> </ul>"},{"location":"#web-development-notes","title":"Web Development Notes","text":"Web Development - Contents <ul> <li>Web Development Notes</li> <li>HTML<ul> <li>Tags vs Attributes</li> <li>Tags</li> </ul> </li> <li>CSS<ul> <li>Properties and Usage</li> </ul> </li> <li>Example Webpage</li> <li>JavaScript<ul> <li>JavaScript Basics</li> <li>Printing, Variables, Arrays, Functions<ul> <li>Printing to the Console</li> <li>Variable Declaration and Assignment</li> <li>Array Declaration and Manipulation</li> <li>Function Declaration and Calling</li> </ul> </li> <li>If-Statement syntax  in JavaScript<ul> <li>Syntax</li> <li>If-else syntax:</li> <li>If-else-if syntax:</li> <li>Boolean Values in JavaScript</li> <li>Comparison Operators in JavaScript</li> <li>Ternary Operator</li> <li>Switch Statements</li> <li>Return Early Pattern for Functions</li> </ul> </li> <li>JavaScript Objects<ul> <li>Updating Object Properties</li> <li>Add New Properties to a JavaScript Object</li> <li>Delete Properties from a JavaScript Object</li> <li>Using Objects for Lookups</li> <li>Testing Objects for Properties</li> <li>Nested Objects</li> <li>Accessing Nested Arrays</li> </ul> </li> <li>Looping<ul> <li>While Loops</li> <li>For Loops</li> <li>Iterate Through an Array with a For Loop</li> <li>Nesting For Loops</li> <li>Do...While Loops</li> <li>Profile Lookup</li> </ul> </li> <li>Constructor Functions<ul> <li>Purpose</li> <li>Syntax</li> <li>Invoking a Constructor Function</li> <li>Extending Constructors to Receive Arguments</li> <li>Verify an Object's Constructor with instanceof</li> <li>Understand Own Properties</li> <li>Use Prototype Properties to Reduce Duplicate Code</li> <li>Iterate Over All Properties</li> </ul> </li> <li>Methods<ul> <li>Methods</li> <li>Example</li> </ul> </li> <li>Built-In Functions: Random Numbers \\&amp; Int-to-String Conversion<ul> <li>Generate Random Fractions with JavaScript</li> <li>Generate Random Whole Numbers with JavaScript</li> <li>Generate Random Whole Numbers within a Range</li> <li>Use the parseInt Function</li> <li>Use the parseInt Function with a Radix</li> </ul> </li> <li>Recursion<ul> <li>Using recursion to create a countdown</li> <li>Using recursion to create a range of numbers</li> </ul> </li> <li>Useful JavaScript Built-in Functions</li> <li>How to run JavaScript code</li> <li>In the browser</li> <li>In the terminal</li> <li>In VS Code</li> <li>ES6</li> <li>Use Arrow Functions to Write Concise Anonymous Functions</li> <li>Write Arrow Functions with Parameters</li> <li>Set Default Parameters for Your Functions</li> <li>Compare Scopes of the var and let Keywords</li> <li>Mutate an Array Declared with const</li> <li>Prevent Object Mutation</li> <li>Use the Rest Parameter with Function Parameters</li> <li>Use the Spread Operator to Evaluate Arrays In-Place</li> <li>Use Destructuring Assignment to Extract Values from Objects</li> <li>Use Destructuring Assignment to Assign Variables from Objects</li> <li>Use Destructuring Assignment to Assign Variables from Arrays</li> <li>Destructuring via rest elements</li> <li>Use Destructuring Assignment to Pass an Object as a Function's Parameters</li> <li>Create Strings using Template Literals</li> <li>Write Concise Object Literal Declarations Using Object Property Shorthand</li> <li>Write Concise Declarative Functions with ES6</li> <li>Use class Syntax to Define a Constructor Function</li> <li>Use getters and setters to Control Access to an Object</li> <li>Create a Module Script</li> <li>Use export to Share a Code Block</li> </ul> </li> <li>The DOM<ul> <li>Theory of the DOM</li> <li>Tree Details</li> <li>Common Usage Patterns (JavaScript Interaction)</li> </ul> </li> <li>jQuery<ul> <li>Raison Detre</li> <li>Common Usage Patterns</li> </ul> </li> <li>Async Programming in JavaScript<ul> <li>Theory of Async Programming</li> <li>Promises</li> <li>Understanding Promises</li> <li>Syntax and Usage</li> <li>Promise States</li> <li>Promise Methods</li> <li>Promise.all()</li> <li>Chaining Promises</li> <li>Async/Await</li> <li>Async Function</li> <li>Await Keyword</li> <li>Common Usage Patterns</li> <li>Callbacks</li> <li>Understanding Callbacks</li> <li>Syntax and Basic Usage</li> <li>Callback Hell and Its Avoidance</li> <li>Event Loop</li> <li>Understanding the Event Loop</li> <li>Event Loop Phases</li> <li>Event Loop Example</li> <li>Event Loop and Asynchronous Operations</li> </ul> </li> <li>Table of common built-in network request functions</li> <li>Introduction to React Framework<ul> <li>Background and Theory</li> <li>Why React?</li> <li>Basic Concepts</li> <li>Common Usage</li> <li>Intermediate Concepts</li> <li>React Common Libraries</li> </ul> </li> <li>Primer on TypeScript<ul> <li>Examples of TypeScript</li> <li>TypeScript vs JavaScript</li> <li>TypeScript with React</li> </ul> </li> <li>Node.js and npm<ul> <li>Background and Theory of Node.js</li> <li>Why Use Node.js?</li> <li>npm: Node Package Manager</li> <li>Common npm Commands</li> <li>package.json File<ul> <li>Example package.json</li> </ul> </li> </ul> </li> <li>Introduction to Yarn<ul> <li>Why Use Yarn?</li> <li>Common Yarn Commands</li> <li>yarn.lock File</li> <li>Example usage in a project</li> </ul> </li> <li>Redux<ul> <li>Key Concepts of Redux:</li> <li>Why Use Redux?</li> <li>Use Cases for Redux:</li> </ul> </li> <li>Development Workflow for React Using VSCode and npm<ul> <li>Setting Up a New React Project</li> <li>Development Process</li> <li>Building and Deployment</li> <li>Best Practices</li> <li>Conclusion</li> </ul> </li> </ul>"},{"location":"snippets/","title":"Code Snippets","text":"Code Snippets - Contents <ul> <li>Code Snippets</li> <li>GIT<ul> <li>Commands</li> <li>less editor</li> <li>ghh CLI</li> </ul> </li> <li>SHELL<ul> <li>Shortcuts (zsh)</li> <li>Core Commands</li> <li>Chaining Commands</li> <li>Explanation of <code>grep</code></li> <li>Piping Commands</li> <li>Help</li> </ul> </li> <li>Docker</li> <li>postgres (Mac)<ul> <li>Table of Most Common Commands</li> </ul> </li> <li>PYTHON<ul> <li>New OpenAI API (v 1.7.1)</li> <li>API Key</li> <li>Models</li> <li>Chat Completions</li> <li>Token Counts</li> <li>JSON Mode</li> <li>Streaming Chat Completions</li> <li>Function Calling</li> <li>Image Input Chat Completions<ul> <li>Multiple Images</li> <li>Low or high fidelity image understanding</li> </ul> </li> <li>Error Handling</li> <li>Rate limits</li> <li>numpy</li> <li>Reshaping</li> <li>Broadcasting</li> </ul> </li> <li>iTerm2<ul> <li>Tabs and Windows</li> <li>My Favorite Shell Key Combos</li> <li>Moving Faster</li> <li>About keyboard shortcuts \ud83d\udca1</li> <li>Copy and Paste with iTerm without using the mouse</li> <li>Search the Command History</li> <li>Misc</li> </ul> </li> <li>tmux<ul> <li>Pane Management</li> <li>Window Management</li> <li>Session Management</li> <li>Resizing Panes</li> <li>Miscellaneous</li> </ul> </li> </ul>"},{"location":"snippets/#git","title":"GIT","text":""},{"location":"snippets/#commands","title":"Commands","text":"Command Description <code>git checkout dev</code><code>git pull</code><code>git checkout -b feature-1</code>[make changes]<code>git commit -am \"feature changes\"</code><code>git push origin feature-1</code><code>git checkout dev</code><code>git rebase feature-1</code><code>git push</code><code>git checkout main</code><code>git pull</code><code>git merge dev</code><code>git push</code> Gitflow -- rebase feature branches into devThen merge dev into main <code>git remote add origin git@github.com:USERNAME/REPO_NAME.git</code> Add remote origin (when not set) <code>git remote set-url origin git@github.com:USERNAME/REPO_NAME.git</code> Set remote origin (overwrite existing) <code>git rm --cached FILE_OR_DIR_NAME</code><code>git commit -m \"Removed FILE_OR_DIR_NAME from repository\"</code><code>git push origin master</code> Remove local already-pushed file from remote.Be careful if you mess with .gitignore, change branches, then mergeLocal files will get deleted <code>git config --get remote.origin.url</code> Get git remote origin's URL. <code>git diff --cached origin/main</code> Compare committed (pre-push) local changes to remote (all contents).This opens the <code>less</code> editor.<code>n</code>: Next change<code>N</code>: Previous change<code>spacebar</code>: Pagedown<code>b</code>: Pageup<code>q</code>: Quit<code>?</code>: Help <code>git diff --cached origin/main --name-only</code> Compare committed (pre-push) local changes to remote (filenames only). <code>git reset --hard --force</code> Force-update local repo state to match remote branch (overwrites -- stash). <code>git reset --soft HEAD~1</code> Undo most recent local commit (to staging). <code>git reset --mixed HEAD~1</code> Undo most recent local commit (to unstaged). <code>git rm file_to_delete</code><code>git commit -m \"removed file_to_delete\"</code><code>git push origin master</code> Delete file from remote and local. <code>git rm -r folder_to_delete</code><code>git commit -m \"removed folder_to_delete\"</code><code>git push origin master</code> Delete folder from remote and local. <code>git rm --cached file_to_delete</code><code>git commit -m \"removed file_to_delete\"</code><code>git push origin master</code> Delete file from remote only. <code>git fetch origin</code><code>git ls-tree -r master --name-only</code> List all files on remote master. <code>git commit -am \"commit message\"</code> Add and commit all changes. <code>git clean -f</code> Force-remove untracked files. <code>git clean -fd</code> Force-remove untracked directories. <code>cd subdirectory</code><code>sudo rm -rf .git</code> Force-remove subdirectory's sub-git repo. <code>git branch new-branch</code><code>git checkout new-branch</code>[make changes]<code>git add -A</code><code>git commit -m \"commit message\"</code><code>git push origin new-branch</code><code>git branch -d new-branch</code> Create new branch, make changes, push, and delete branch locally. <code>git log origin/&lt;branch-name&gt;..HEAD</code> View local commits not yet pushed to remote."},{"location":"snippets/#less-editor","title":"less editor","text":"Shortcut Action <code>Space</code>  or  <code>f</code> Scroll forward one window (or screen) <code>b</code> Scroll backward one window (or screen) <code>d</code> Scroll forward half a window <code>u</code> Scroll backward half a window <code>Enter</code>  or  <code>e</code> Scroll forward one line <code>y</code>  or  <code>k</code> Scroll backward one line <code>g</code> Go to the start of the document <code>G</code> Go to the end of the document <code>/</code> Search forward for a pattern <code>?</code> Search backward for a pattern <code>n</code> Repeat the previous search (in the same direction) <code>N</code> Repeat the previous search (in the opposite direction) <code>q</code> Quit  less  and return to the command line"},{"location":"snippets/#ghh-cli","title":"ghh CLI","text":"Command Description <code>gh repo create ___ --private</code> Create new repo (private). <code>gh repo clone ___</code> Clone repo. <code>gh repo view --web</code> Open repo in browser. <code>gh repo delete ___</code> Delete repo. <code>gh repo list</code> List all repos. <code>gh repo rename old-name new-name</code> Rename repo. <code>gh repo transfer ___ new-owner</code> Transfer repo to new owner. <code>gh repo fork ___</code> Fork repo. <code>gh repo fork --clone ___</code> Fork repo and clone locally. <code>gh repo fork --clone ___ --remote</code> Fork repo and clone locally with remote origin. <code>gh repo fork --clone ___ --remote --remote-name=upstream</code> Fork repo and clone locally with remote origin and upstream."},{"location":"snippets/#shell","title":"SHELL","text":""},{"location":"snippets/#shortcuts-zsh","title":"Shortcuts (zsh)","text":"Key/Command Description <code>Ctrl + a</code> Go to the beginning of the line you are currently typing on. <code>Ctrl + e</code> Go to the end of the line you are currently typing on. <code>Ctrl + _</code> Undo the last command. <code>Ctrl + l</code> Clears the Screen <code>Cmd + K</code> Clears the Screen <code>Ctrl + U</code> Cut everything backwards to beginning of line <code>Ctrl + K</code> Cut everything forward to end of line <code>Ctrl + W</code> Cut one word backwards using white space as delimiter <code>Ctrl + Y</code> Paste whatever was cut by the last cut command <code>Ctrl + Z</code> Puts whatever you are running into a suspended background process. fg restores it <code>Ctrl + H</code> Same as backspace <code>Ctrl + C</code> Kill whatever you are running. Also clears everything on current line <code>Ctrl + D</code> Exit the current shell when no process is running, or send EOF to a the running process <code>Ctrl + T</code> Swap the last two characters before the cursor <code>Ctrl + F</code> Move cursor one character forward <code>Ctrl + B</code> Move cursor one character backward <code>Option + \u2192</code> Move cursor one word forward <code>Option + \u2190</code> Move cursor one word backward <code>Esc + T</code> Move cursor one word backward <code>Esc + Backspace</code> Swap the last two words before the cursor <code>Tab</code> Cut one word backwards using none alphabetic characters as delimiters"},{"location":"snippets/#core-commands","title":"Core Commands","text":"Command Description <code>cd /</code> Root of drive <code>cd -</code> Previous directory <code>ls -l</code> Long listing <code>ls -a</code> Listing including hidden files <code>ls -lh</code> Long listing with human-readable file sizes <code>ls -R</code> Entire content of folder recursively <code>find [folder] -name [search_pattern]</code> Search for files/dirs, e.g., <code>find . -name \"*.txt\"</code> (searches recursively) <code>find [folder] -name [search_pattern] -type d</code> Search for directories only <code>find [folder] -name [search_pattern] -type f</code> Search for files only <code>find . -maxdepth 1 -name [search_pattern]</code> Search non-recursively <code>grep [search_pattern] [dir]</code> Search all files in the specified directory for all lines that contain the pattern <code>grep [search_pattern] [file]</code> Search file for all lines that contain the pattern, e.g., <code>grep \"Tom\" file.txt</code> <code>grep -r [search_pattern] [dir]</code> Recursively search in all files in the specified directory for all lines that contain the pattern <code>sudo [command]</code> Run command with the security privileges of the superuser (Super User DO) <code>open [file]</code> Opens a file (as if you double-clicked it) <code>top</code> Displays active processes. Press q to quit <code>nano [file]</code> Opens the file using the nano editor <code>vim [file]</code> Opens the file using the vim editor <code>clear</code> Clears the screen <code>reset</code> Resets the terminal display <code>unzip path/to/your/file.zip</code> General unzip <code>unzip path/to/your/file.zip -d path/to/destination/folder</code> Unzip to specific path <code>zip -r compressed_filename.zip foldername</code> General zip <code>zip -r compressed_filename.zip foldername</code> General zip <code>lsof -i -P -n \\| grep LISTEN</code> Show all active ports being used by user processes <code>sudo lsof -i -P -n \\| grep LISTEN</code> Show all active ports, including system"},{"location":"snippets/#chaining-commands","title":"Chaining Commands","text":"Command Description [command-a]; [command-b] Run command A and then B, regardless of the success of A [command-a] &amp;&amp; [command-b] Run command B if A succeeded [command-a] || [command-b] Run command B if A failed [command-a] &amp; Run command A in the background"},{"location":"snippets/#explanation-of-grep","title":"Explanation of <code>grep</code>","text":"<ul> <li><code>grep</code> is a command-line utility for searching plain-text data sets for lines that match a regular expression.</li> <li><code>grep</code> searches the named input FILEs (or standard input if no files are named, or the file name - is given) for lines containing a match to the given PATTERN.</li> <li>By default, <code>grep</code> prints the matching lines.</li> <li><code>egrep</code> or <code>grep -E</code> is the same as <code>grep</code>, but uses extended regular expressions instead of basic regular expressions.</li> <li>Example: <code>egrep 'foo|bar'</code> is the same as <code>grep -E 'foo|bar'</code></li> <li><code>fgrep</code> or <code>grep -F</code> is the same as <code>grep</code>, but interprets PATTERN as a list of fixed strings (instead of regular expressions), separated by newlines, any of which is to be matched.</li> <li>This is different from normal <code>grep</code> which interprets PATTERN as a regular expression.</li> <li>Example: <code>fgrep 'foo'</code> is the same as <code>grep -F 'foo'</code></li> <li>Example: <code>fgrep -f file1 file2</code> is the same as <code>grep -F -f file1 file2</code></li> <li>To obtain the opposite effect of <code>grep</code>, use the <code>-v</code> or <code>--invert-match</code> option.</li> <li>Example: <code>grep -v 'foo'</code> will match all lines that do not contain the string 'foo'</li> <li>Output grep results to a file using the <code>&gt;</code> operator.</li> <li>Example: <code>grep 'foo' file.txt &gt; output.txt</code></li> </ul>"},{"location":"snippets/#piping-commands","title":"Piping Commands","text":"Command Description find [dir] -name [search_pattern] Search for files, e.g., <code>find /Users -name \"file.txt\"</code> (searches recursively) grep [search_pattern] [file] Search for all lines that contain the pattern, e.g., grep \"Tom\" file.txt grep -r [search_pattern] [dir] Recursively search in all files in the specified directory for all lines that contain the pattern grep -v [search_pattern] [file] Search for all lines that do NOT contain the pattern grep -i [search_pattern] [file] Search for all lines that contain the case-insensitive pattern mdfind [search_pattern] Spotlight search for files (names, content, other metadata), e.g., mdfind skateboard mdfind -onlyin [dir] -name [pattern] Spotlight search for files named like pattern in the given directory"},{"location":"snippets/#help","title":"Help","text":"Command Description [command] -h Offers help [command] -help Offers help info [command] Offers help man [command] Show the help manual for [command] whatis [command] Gives a one-line description of [command] apropos [search-pattern] Searches for command with keywords in description"},{"location":"snippets/#docker","title":"Docker","text":"<ul> <li>Docker Image: a read-only template with instructions for creating a Docker container</li> <li>Docker Container: a runnable instance of a Docker image</li> <li>Dockerfile: a text file that contains all the commands a user could call on the command line to assemble an image.</li> <li><code>FROM</code>: the base image to build upon</li> <li><code>WORKDIR</code>: set the working directory</li> <li><code>RUN</code>: execute a command in the container</li> <li><code>COPY</code>: copy files from the host to the container</li> <li><code>ADD</code>: copy files from the host to the container (can also download files from the internet and copy them to the container)</li> <li><code>ARG</code>: set build-time variables</li> <li><code>ENV</code>: set environment variables</li> <li><code>EXPOSE</code>: expose a port</li> <li><code>CMD</code>: the command to run when the container starts</li> <li><code>ENTRYPOINT</code>: the command to run when the container starts (can be overridden by <code>CMD</code>)</li> <li><code>HEALTHCHECK</code>: check the health of the container</li> <li>Common Docker commands:</li> <li><code>docker build -t [image-name] .</code>: build the Docker image (<code>-t</code> is the tag name)<ul> <li>Use with <code>--file</code> to specify a Dockerfile other than the default <code>Dockerfile</code></li> <li>Use with <code>--build-arg [arg-name]=[arg-value]</code> to pass build-time variables</li> <li>Use with <code>--platform</code> to specify the platform (e.g., <code>linux/amd64</code>, <code>linux/arm64</code>, <code>linux/arm/v7</code>)</li> </ul> </li> <li><code>docker run -it [image-name]</code>: run the Docker container</li> <li><code>docker tag [image-name] [username]/[repo-name]:[tag]</code>: tag the Docker image</li> <li><code>docker push [username]/[repo-name]:[tag]</code>: push the Docker image to Docker Hub (or ECR, etc.)</li> <li><code>docker login --username [username] --password [password]</code>: log in to Docker Hub (or ECR, etc.)</li> <li>Docker Compose: a tool for defining and running multi-container Docker applications</li> <li><code>docker-compose up</code>: start the Docker containers</li> <li><code>docker-compose down</code>: stop the Docker containers</li> <li><code>docker-compose build</code>: build the Docker containers</li> <li><code>docker-compose push</code>: push the Docker containers to Docker Hub (or ECR, etc.)</li> <li><code>docker-compose pull</code>: pull the Docker containers from Docker Hub (or ECR, etc.)</li> <li><code>docker-compose config</code>: validate and view the Docker Compose file</li> <li><code>docker-compose logs</code>: view the logs of the Docker containers</li> <li><code>docker-compose ps</code>: view the status of the Docker containers</li> <li><code>docker-compose top</code>: view the processes running in the Docker containers</li> <li><code>docker-compose exec [service-name] [command]</code>: execute a command in a running container</li> <li><code>docker-compose run [service-name] [command]</code>: run a one-off command in a new container</li> <li><code>docker-compose restart [service-name]</code>: restart a container</li> <li><code>docker-compose stop [service-name]</code>: stop a container</li> <li><code>docker-compose rm [service-name]</code>: remove a container</li> <li><code>docker-compose kill [service-name]</code>: kill a container</li> <li><code>docker-compose down --rmi all</code>: remove all containers and images</li> <li><code>docker-compose down --volumes</code>: remove all volumes</li> <li><code>docker-compose down --remove-orphans</code>: remove all orphaned containers</li> <li>docker-compose.yaml: a YAML file that defines the Docker Compose configuration</li> <li><code>version</code>: the version of the Docker Compose file format</li> <li><code>services</code>: the services to run</li> <li><code>networks</code>: the networks to create</li> <li><code>volumes</code>: the volumes to create</li> <li><code>configs</code>: the configs to create</li> <li><code>secrets</code>: the secrets to create</li> <li><code>deploy</code>: the deployment configuration</li> <li><code>build</code>: the build configuration</li> <li><code>image</code>: the image configuration</li> <li><code>container_name</code>: the container name</li> <li><code>command</code>: the command to run</li> <li><code>entrypoint</code>: the entrypoint to run</li> <li><code>environment</code>: the environment variables to set</li> <li><code>env_file</code>: the environment variables to set from a file</li> <li><code>ports</code>: the ports to expose</li> <li><code>volumes</code>: the volumes to mount</li> <li><code>depends_on</code>: the services to depend on</li> <li><code>networks</code>: the networks to connect to</li> <li><code>network_mode</code>: the network mode to use</li> <li><code>restart</code>: the restart policy</li> <li><code>logging</code>: the logging configuration</li> <li><code>labels</code>: the labels to set</li> <li><code>configs</code>: the configs to mount</li> <li><code>secrets</code>: the secrets to mount</li> <li><code>deploy</code>: the deployment configuration</li> <li><code>build</code>: the build configuration</li> <li><code>image</code>: the image configuration</li> <li><code>container_name</code>: the container name</li> <li><code>command</code>: the command to run</li> <li><code>entrypoint</code>: the entrypoint to run</li> <li><code>environment</code>: the environment variables to set</li> <li><code>env_file</code>: the environment variables to set from a file</li> <li><code>ports</code>: the ports to expose</li> <li><code>volumes</code>: the volumes to mount</li> <li><code>depends_on</code>: the services to depend on</li> <li><code>networks</code>: the networks to connect to</li> <li><code>network_mode</code>: the network mode to use</li> <li><code>restart</code>: the restart policy</li> <li><code>logging</code>: the logging configuration</li> <li><code>labels</code>: the labels to set</li> <li><code>configs</code>: the configs to mount</li> <li><code>secrets</code>: the secrets to mount</li> <li><code>deploy</code>: the deployment configuration</li> <li><code>build</code>: the build configuration</li> <li><code>image</code>: the image configuration</li> <li><code>container_name</code>: the container name</li> <li>Makefile: a text file that contains a set of tasks to be executed by the <code>make</code> command</li> <li>Used to automate the build process</li> <li>Used in conjunction with Docker Compose to automate the deployment process</li> <li><code>deploy</code>: deploy the Docker containers using the following commands...</li> <li>End-to-End workflow using Dockerfile, docker-compose.yaml, and Makefile:   1) In Dockerfile, specify the base image to build upon, the working directory, and the commands to run in order to build the image in the container   2) In docker-compose.yaml, specify version, services (and their configs/ports/etc.)   3) In Makefile, specify the commands to run to build and deploy the Docker containers   4) Run <code>make deploy</code> to build and deploy the Docker containers</li> <li>Dockerfile example:   <pre><code>FROM python:3.8.5-slim-buster\n\nWORKDIR /app\n\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    build-essential \\\n    libpq-dev \\\n    libssl-dev \\\n    libffi-dev \\\n    python3-dev \\\n    python3-pip \\\n    python3-setuptools \\\n    python3-wheel \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\nCOPY requirements.txt requirements.txt\nRUN pip3 install -r requirements.txt\n\nCOPY . .\n\nCMD [\"python3\", \"app.py\"]\n</code></pre></li> <li>Simple docker-compose.yaml example:   <pre><code>version: \"3.8\"\n\nservices:\n  app:\n    build: .\n    ports:\n      - \"5000:5000\"\n  db:\n    image: postgres:13.3\n    environment:\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: postgres\n      POSTGRES_DB: postgres\n    ports:\n      - \"5432:5432\"\n</code></pre></li> <li>Makefile example:   <pre><code>.PHONY: deploy\ndeploy:\n    docker-compose build\n    docker-compose push\n    docker-compose pull\n    docker-compose up -d\n</code></pre></li> </ul>"},{"location":"snippets/#postgres-mac","title":"postgres (Mac)","text":""},{"location":"snippets/#table-of-most-common-commands","title":"Table of Most Common Commands","text":"Action Command Start postgres and log into main local database <code>psql -U [username] -d [database]</code> List all tables in this db <code>\\dt</code> List all tables in all dbs <code>\\dt *.*</code> List all databases <code>\\l</code> Navigate to a different database <code>\\c [database]</code> List all schemas in this db <code>\\dn</code> Create a new database <code>CREATE DATABASE [database];</code> Create a new schema <code>CREATE SCHEMA [schema];</code> Create a new table <code>CREATE TABLE [table] ( [column] [datatype] [constraints] );</code> Delete a database <code>DROP DATABASE [database];</code> Export a database <code>pg_dump -U [username] [database] &gt; [filename].sql</code> Import a database <code>psql -U [username] -d [database] -f [filename].sql</code> Exit psql <code>\\q</code>"},{"location":"snippets/#python","title":"PYTHON","text":""},{"location":"snippets/#new-openai-api-v-171","title":"New OpenAI API (v 1.7.1)","text":""},{"location":"snippets/#api-key","title":"API Key","text":"<p><code>export OPENAI_API_KEY='...'</code></p> <p>OR</p> <p>save .env file in root directory with: <code>OPENAI_API_KEY=abc123</code> (be sure to add .env to .gitignore)</p>"},{"location":"snippets/#models","title":"Models","text":"Model Description Context window Training data gpt-4-1106-preview GPT-4 Turbo The latest GPT-4 model with improved instruction following, JSON mode, reproducible outputs, parallel function calling, and more. Returns a maximum of 4,096 output tokens. This preview model is not yet suited for production traffic. Learn more. 128,000 tokens Up to Apr 2023 gpt-4-vision-preview GPT-4 Turbo with vision Ability to understand images, in addition to all other GPT-4 Turbo capabilties. Returns a maximum of 4,096 output tokens. This is a preview model version and not suited yet for production traffic. Dev Day. 128,000 tokens Up to Apr 2023 gpt-4 Currently points to <code>gpt-4-0613</code>. See continuous model upgrades. 8,192 tokens Up to Sep 2021 gpt-4-32k Currently points to <code>gpt-4-32k-0613</code>. See continuous model upgrades. 32,768 tokens Up to Sep 2021 gpt-4-0613 Snapshot of <code>gpt-4</code> from June 13th 2023 with improved function calling support. 8,192 tokens Up to Sep 2021 gpt-4-32k-0613 Snapshot of <code>gpt-4-32k</code> from June 13th 2023 with improved function calling support. 32,768 tokens Up to Sep 2021"},{"location":"snippets/#chat-completions","title":"Chat Completions","text":"<p>THIS IS DEPRECATED:</p> <pre><code>import openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\n\nMODEL = \"gpt-4\" # more expensive now\nresponse = openai.ChatCompletion.create(\n  ...\n)\n\n# ChatCompletion response object:\n# {\n#   \"id\": \"chatcmpl-7UkgnSDzlevZxiy0YjZcLYdUMz5yZ\",\n#   \"object\": \"chat.completion\",\n#   \"created\": 1687563669,\n#   \"model\": \"gpt-4\",\n#   \"choices\": [\n#     {\n#       \"index\": 0,\n#       \"message\": {\n#         \"role\": \"assistant\",\n#         \"content\": \"\\n\\nHello there, how may I assist you today?\",\n#       },\n#       \"finish_reason\": \"stop\"\n#     }\n#   ],\n#   \"usage\": {\n#     \"prompt_tokens\": 39,\n#     \"completion_tokens\": 3,\n#     \"total_tokens\": 42\n#   }\n# }\n</code></pre> <p>THIS IS THE NEW WAY:</p> <pre><code>from openai import OpenAI\nclient = OpenAI() # defaults to looking for OPENAI_API_KEY or .env file\n\nMODEL = \"gpt-4-turbo\" # cheaper &amp; smarter\ncompletion = client.chat.completions.create(\n    model=MODEL,\n    messages=[\n        {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n\n        {\"role\": \"user\", \"content\": \"Knock knock.\"},\n        {\"role\": \"assistant\", \"content\": \"Who's there?\"},\n\n        {\"role\": \"user\", \"content\": \"Orange.\"},\n    ],\n    temperature=0,\n)\n\n# Chat completion object:\n# {\n#   \"id\": \"chatcmpl-123\",\n#   \"object\": \"chat.completion\",\n#   \"created\": 1677652288,\n#   \"model\": \"gpt-4-turbo\",\n#   \"system_fingerprint\": \"fp_44709d6fcb\",\n#   \"choices\": [{\n#     \"index\": 0,\n#     \"message\": {\n#       \"role\": \"assistant\",\n#       \"content\": \"Orange who?\"\n#     },\n#     \"logprobs\": null,\n#     \"finish_reason\": \"stop\"\n#   }],\n#   \"usage\": {\n#     \"prompt_tokens\": 9,\n#     \"completion_tokens\": 12,\n#     \"total_tokens\": 21\n#   }\n# }\n\nprint(completion.choices[0].message.content)\n# 'Orange who?'\n</code></pre> <p>Chat Completions Request body fields:</p> <p> </p> <p>Response object fields:</p> <ul> <li><code>id</code>: the ID of the request</li> <li><code>object</code>: the type of object returned (e.g., <code>chat.completion</code>)</li> <li><code>created</code>: the timestamp of the request</li> <li><code>model</code>: the full name of the model used to generate the response</li> <li><code>usage</code>: the number of tokens used to generate the replies, counting prompt, completion, and total</li> <li><code>choices</code>: a list of completion objects (only one, unless you set <code>n</code> greater than 1)<ul> <li><code>message</code>: the message object generated by the model, with <code>role</code> and <code>content</code></li> <li><code>finish_reason</code>: the reason the model stopped generating text (either <code>stop</code>, or <code>length</code> if <code>max_tokens</code> limit was reached)</li> <li><code>index</code>: the index of the completion in the list of choices</li> </ul> </li> </ul> <pre><code># Example with system prompt &amp; few-shot learning:\n\n# Faked few-shot conversation to prime the model into translating business jargon into simpler speech\n# (OPTIONAL: Use the `name` parameter in the example messages -- so the model won't refer back to them &amp; can differentiate between participants of the same role\ncompletion = client.chat.completions.create(\n    model=MODEL,\n    messages=[\n        {\"role\": \"system\", \"content\": \"You are a helpful, pattern-following assistant that translates corporate jargon into plain English.\"},\n\n        {\"role\": \"system\", \"name\":\"example_user\", \"content\": \"New synergies will help drive top-line growth.\"},\n        {\"role\": \"system\", \"name\": \"example_assistant\", \"content\": \"Things working well together will increase revenue.\"},\n\n        {\"role\": \"system\", \"name\":\"example_user\", \"content\": \"Let's circle back when we have more bandwidth to touch base on opportunities for increased leverage.\"},\n        {\"role\": \"system\", \"name\": \"example_assistant\", \"content\": \"Let's talk later when we're less busy about how to do better.\"},\n\n        {\"role\": \"user\", \"content\": \"This late pivot means we don't have time to boil the ocean for the client deliverable.\"},\n    ],\n    temperature=0,\n)\n\nprint(response[\"choices\"][0][\"message\"][\"content\"])\n# This sudden change in plans means we don't have enough time to do everything for the client's project.\n</code></pre>"},{"location":"snippets/#token-counts","title":"Token Counts","text":"<ul> <li>Context window equivalents:</li> <li>1 token --&gt; 4 characters</li> <li>128,000 tokens --&gt; 512,000 characters</li> <li>Natural Language:<ul> <li>6 characters per English word on average (5 char + 1 space)</li> <li>512,000 characters / 6 characters per word \u2248 85,333 words</li> <li>85,333 words / 250 words per page using 12pt Times New Roman \u2248 341 double-spaced pages (170 single-spaced pages)</li> <li>So 128,000 tokens is roughly equivalent to 170 single-spaced pages of text</li> </ul> </li> <li>Code:<ul> <li>50 characters per line on average</li> <li>512,000 characters / 50 characters per line \u2248 10,240 lines of code</li> <li>So 128,000 tokens is roughly equivalent to 10,240 lines of code</li> </ul> </li> </ul> <p>Function to track tokens:</p> <pre><code>def num_tokens_from_messages(messages, model=\"gpt-3.5-turbo-0613\"):\n  \"\"\"Returns the number of tokens used by a list of messages.\"\"\"\n  try:\n      encoding = tiktoken.encoding_for_model(model)\n  except KeyError:\n      encoding = tiktoken.get_encoding(\"cl100k_base\")\n  if model == \"gpt-3.5-turbo-0613\":  # note: future models may deviate from this\n      num_tokens = 0\n      for message in messages:\n          num_tokens += 4  # every message follows &lt;im_start&gt;{role/name}\\n{content}&lt;im_end&gt;\\n\n          for key, value in message.items():\n              num_tokens += len(encoding.encode(value))\n              if key == \"name\":  # if there's a name, the role is omitted\n                  num_tokens += -1  # role is always required and always 1 token\n      num_tokens += 2  # every reply is primed with &lt;im_start&gt;assistant\n      return num_tokens\n  else:\n      raise NotImplementedError(f\"\"\"num_tokens_from_messages() is not presently implemented for model {model}.\n      See https://github.com/openai/openai-python/blob/main/chatml.md for information on how messages are converted to tokens.\"\"\")\n</code></pre>"},{"location":"snippets/#json-mode","title":"JSON Mode","text":"<p>A common way to use Chat Completions is to instruct the model to always return a JSON object that makes sense for your use case, by specifying this in the system message. While this does work in some cases, occasionally the models may generate output that does not parse to valid JSON objects.</p> <p>To prevent these errors and improve model performance, when calling <code>gpt-4-1106-preview</code> or <code>gpt-3.5-turbo-1106</code>, you can set response_format to <code>{ \"type\": \"json_object\" }</code> to enable JSON mode. When JSON mode is enabled, the model is constrained to only generate strings that parse into valid JSON object.</p> <p>Important notes:</p> <ul> <li>When using JSON mode, always instruct the model to produce JSON via some message in the conversation, for example via your system message. If you don't include an explicit instruction to generate JSON, the model may generate an unending stream of whitespace and the request may run continually until it reaches the token limit. To help ensure you don't forget, the API will throw an error if the string <code>\"JSON\"</code> does not appear somewhere in the context.</li> <li>The JSON in the message the model returns may be partial (i.e. cut off) if <code>finish_reason</code> is <code>length</code>, which indicates the generation exceeded <code>max_tokens</code> or the conversation exceeded the token limit. To guard against this, check <code>finish_reason</code> before parsing the response.</li> <li>JSON mode will not guarantee the output matches any specific schema, only that it is valid and parses without errors.</li> </ul> <pre><code>from openai import OpenAI\nclient = OpenAI()\n\nresponse = client.chat.completions.create(\n  model=\"gpt-3.5-turbo-1106\",\n  response_format={ \"type\": \"json_object\" },\n  messages=[\n    {\"role\": \"system\", \"content\": \"You are a helpful assistant designed to output JSON.\"},\n    {\"role\": \"user\", \"content\": \"Who won the world series in 2020?\"}\n  ]\n)\nprint(response.choices[0].message.content)\n</code></pre> <p>In this example, the response includes a JSON object that looks something like the following:</p> <p><code>\"content\": \"{\\\"winner\\\": \\\"Los Angeles Dodgers\\\"}\"</code></p> <p>Note that JSON mode is always enabled when the model is generating arguments as part of function calling.</p>"},{"location":"snippets/#streaming-chat-completions","title":"Streaming Chat Completions","text":"<pre><code>from openai import OpenAI\nclient = OpenAI()\n\ncompletion = client.chat.completions.create(\n  model=\"gpt-4-1106-preview\",\n  messages=[\n    {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n    {\"role\": \"user\", \"content\": \"Hello!\"}\n  ],\n  stream=True\n)\n\nfor chunk in completion:\n  print(chunk.choices[0].delta)\n\n\n# ..........\n# {\n#     \"id\": \"chatcmpl-123\",\n#     \"object\": \"chat.completion.chunk\",\n#     \"created\": 1694268190,\n#     \"model\": \"gpt-3.5-turbo-0613\",\n#     \"system_fingerprint\": \"fp_44709d6fcb\",\n#     \"choices\": [\n#         {\n#             \"index\": 0,\n#             \"delta\": {\n#                 \"content\": \" today\"\n#             },\n#             \"logprobs\": null,\n#             \"finish_reason\": null\n#         }\n#     ]\n# }\n\n# {\n#     \"id\": \"chatcmpl-123\",\n#     \"object\": \"chat.completion.chunk\",\n#     \"created\": 1694268190,\n#     \"model\": \"gpt-3.5-turbo-0613\",\n#     \"system_fingerprint\": \"fp_44709d6fcb\",\n#     \"choices\": [\n#         {\n#             \"index\": 0,\n#             \"delta\": {\n#                 \"content\": \"?\"\n#             },\n#             \"logprobs\": null,\n#             \"finish_reason\": null\n#         }\n#     ]\n# }\n\n# {\n#     \"id\": \"chatcmpl-123\",\n#     \"object\": \"chat.completion.chunk\",\n#     \"created\": 1694268190,\n#     \"model\": \"gpt-3.5-turbo-0613\",\n#     \"system_fingerprint\": \"fp_44709d6fcb\",\n#     \"choices\": [\n#         {\n#             \"index\": 0,\n#             \"delta\": {},\n#             \"logprobs\": null,\n#             \"finish_reason\": \"stop\" &lt;---- stop here\n#         }\n#     ]\n# }\n</code></pre>"},{"location":"snippets/#function-calling","title":"Function Calling","text":"<pre><code>from openai import OpenAI\nclient = OpenAI()\n\ntools = [\n  {\n    \"type\": \"function\",\n    \"function\": {\n      \"name\": \"get_current_weather\",\n      \"description\": \"Get the current weather in a given location\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"location\": {\n            \"type\": \"string\",\n            \"description\": \"The city and state, e.g. San Francisco, CA\",\n          },\n          \"unit\": {\"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\"]},\n        },\n        \"required\": [\"location\"],\n      },\n    }\n  }\n]\nmessages = [{\"role\": \"user\", \"content\": \"What's the weather like in Boston today?\"}]\ncompletion = client.chat.completions.create(\n  model=\"gpt-4-1106-preview\",\n  messages=messages,\n  tools=tools,\n  tool_choice=\"auto\"\n)\n\nprint(completion)\n\n# {\n#   \"id\": \"chatcmpl-abc123\",\n#   \"object\": \"chat.completion\",\n#   \"created\": 1699896916,\n#   \"model\": \"gpt-3.5-turbo-0613\",\n#   \"choices\": [\n#     {\n#       \"index\": 0,\n#       \"message\": {\n#         \"role\": \"assistant\",\n#         \"content\": null,\n#         \"tool_calls\": [\n#           {\n#             \"id\": \"call_abc123\",\n#             \"type\": \"function\",\n#             \"function\": {\n#               \"name\": \"get_current_weather\",\n#               \"arguments\": \"{\\n\\\"location\\\": \\\"Boston, MA\\\"\\n}\"\n#             }\n#           }\n#         ]\n#       },\n#       \"logprobs\": null,\n#       \"finish_reason\": \"tool_calls\"\n#     }\n#   ],\n#   \"usage\": {\n#     \"prompt_tokens\": 82,\n#     \"completion_tokens\": 17,\n#     \"total_tokens\": 99\n#   }\n# }\n</code></pre>"},{"location":"snippets/#image-input-chat-completions","title":"Image Input Chat Completions","text":"<pre><code>from openai import OpenAI\n\nclient = OpenAI()\n\nresponse = client.chat.completions.create(\n    model=\"gpt-4-vision-preview\",\n    messages=[\n        {\n            \"role\": \"user\",\n            \"content\": [\n                {\"type\": \"text\", \"text\": \"What\u2019s in this image?\"},\n                {\n                    \"type\": \"image_url\",\n                    \"image_url\": \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg\",\n                },\n            ],\n        }\n    ],\n    max_tokens=300,\n)\n\nprint(response.choices[0])\n</code></pre>"},{"location":"snippets/#multiple-images","title":"Multiple Images","text":"<p>The Chat Completions API is capable of taking in and processing multiple image inputs in both base64 encoded format or as an image URL. The model will process each image and use the information from all of them to answer the question.</p> <pre><code>from openai import OpenAI\n\nclient = OpenAI()\nresponse = client.chat.completions.create(\n  model=\"gpt-4-vision-preview\",\n  messages=[\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"type\": \"text\",\n          \"text\": \"What are in these images? Is there any difference between them?\",\n        },\n        {\n          \"type\": \"image_url\",\n          \"image_url\": {\n            \"url\": \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg\",\n          },\n        },\n        {\n          \"type\": \"image_url\",\n          \"image_url\": {\n            \"url\": \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg\",\n          },\n        },\n      ],\n    }\n  ],\n  max_tokens=300,\n)\nprint(response.choices[0])\n</code></pre> <p>Here the model is shown two copies of the same image and can answer questions about both or each of the images independently.</p>"},{"location":"snippets/#low-or-high-fidelity-image-understanding","title":"Low or high fidelity image understanding","text":"<p>By controlling the <code>detail</code> parameter, which has three options, <code>low</code>, <code>high</code>, or <code>auto</code>, you have control over how the model processes the image and generates its textual understanding. By default, the model will use the <code>auto</code> setting which will look at the image input size and decide if it should use the <code>low</code> or <code>high</code> setting.</p> <ul> <li><code>low</code> will disable the \u201chigh res\u201d model. The model will receive a low-res 512px x 512px version of the image, and represent the image with a budget of 65 tokens. This allows the API to return faster responses and consume fewer input tokens for use cases that do not require high detail.</li> <li><code>high</code> will enable \u201chigh res\u201d mode, which first allows the model to see the low res image and then creates detailed crops of input images as 512px squares based on the input image size. Each of the detailed crops uses twice the token budget (65 tokens) for a total of 129 tokens. <pre><code>from openai import OpenAI\n\nclient = OpenAI()\n\nresponse = client.chat.completions.create(\n  model=\"gpt-4-vision-preview\",\n  messages=[\n    {\n      \"role\": \"user\",\n      \"content\": [\n        {\"type\": \"text\", \"text\": \"What\u2019s in this image?\"},\n        {\n          \"type\": \"image_url\",\n          \"image_url\": {\n            \"url\": \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg\",\n            \"detail\": \"high\"\n          },\n        },\n      ],\n    }\n  ],\n  max_tokens=300,\n)\n\nprint(response.choices[0].message.content)\n</code></pre></li> </ul>"},{"location":"snippets/#error-handling","title":"Error Handling","text":"<pre><code>import openai\nfrom openai import OpenAI\nclient = OpenAI()\n\ntry:\n  #Make your OpenAI API request here\n  response = client.completions.create(\n    prompt=\"Hello world\",\n    model=\"gpt-3.5-turbo-instruct\"\n  )\nexcept openai.APIError as e:\n  #Handle API error here, e.g. retry or log\n  print(f\"OpenAI API returned an API Error: {e}\")\n  pass\nexcept openai.APIConnectionError as e:\n  #Handle connection error here\n  print(f\"Failed to connect to OpenAI API: {e}\")\n  pass\nexcept openai.RateLimitError as e:\n  #Handle rate limit error (we recommend using exponential backoff)\n  print(f\"OpenAI API request exceeded rate limit: {e}\")\n  pass\n</code></pre>"},{"location":"snippets/#rate-limits","title":"Rate limits","text":"<p>Rate limits are restrictions that our API imposes on the number of times a user or client can access our services within a specified period of time.</p> <p>Rate Limits</p> <p>How do these rate limits work?</p> <p>Rate limits are measured in five ways: RPM (requests per minute), RPD (requests per day), TPM (tokens per minute), TPD (tokens per day), and IPM (images per minute). Rate limits can be hit across any of the options depending on what occurs first. For example, you might send 20 requests with only 100 tokens to the ChatCompletions endpoint and that would fill your limit (if your RPM was 20), even if you did not send 150k tokens (if your TPM limit was 150k) within those 20 requests.</p> <p>Other important things worth noting:</p> <ul> <li>Rate limits are imposed at the organization level, not user level.</li> <li>Rate limits vary by the model being used.</li> <li>Limits are also placed on the total amount an organization can spend on the API each month. These are also known as \"usage limits\".</li> </ul> <p>(See here for more info on rate limit &amp; error mitigation strategies.)</p>"},{"location":"snippets/#numpy","title":"numpy","text":""},{"location":"snippets/#reshaping","title":"Reshaping","text":"<ul> <li>The reshape() function takes a single tuple argument that specifies the new shape of the array</li> <li>Used frequently to add a dimension of when for libs like sklearn and keras (to the END of the shape tuple -- i.e. right-padding with 1s)</li> <li>In the case of reshaping 1-D <code>(m,)</code> --&gt; 2-D <code>(m,1)</code>:</li> <li>Tuple would be the shape of the array as the first dimension (data.shape[0]) and 1 for the second dimension:<ul> <li><code>data.shape == (m_old, )</code> (e.g. <code>(1000,)</code>)</li> <li><code>data = data.reshape( (m_old, n_new)  )</code></li> <li><code>data.shape == (m_old, n_new)</code> (e.g. <code>(1000, 1)</code>)</li> </ul> </li> </ul>"},{"location":"snippets/#broadcasting","title":"Broadcasting","text":"<p>In formal LinAlg, arithmetic can only be performed when:  </p> <ul> <li>the shape of each dimension in the arrays are equal (even for dotproduct - though not matmul)</li> </ul> <p>However, in ML, we often want to add A <code>(m,n)</code> to v <code>(,n)</code>. NumPy enables this by broadcasting the vector to the shape of the matrix. Specifically np (which considers vectors as (n,) since it is row-oriented) effectively:</p> <ol> <li>Left-pads with 1s the dimensions of the smaller array</li> <li>Right-to-left compares the dimensions of the two arrays and ensures either   a. The dimensions are equal OR   b. At least one of the dimensions is 1</li> <li>If all dimensions pass, np replicates (broadcast) the smaller array along the dim(s) where it is 1 to match the shape of the larger array.</li> </ol> <p>NOTE: Broadcasting is not a copy operation. It is a view of the original array with the same data. This means that if you modify a broadcasted array, it modifies the original array.  </p> <p>So for example:  </p> <ul> <li>1-D vs. 2-D</li> <li>LOOKS like comparing:  <ul> <li>A.shape -- (2,3)  </li> <li>b.shape -- (3,)  </li> </ul> </li> <li>ACTUALLY np is comparing:  <ul> <li>A.shape -- (2,3)  </li> <li>b.shape -- (1,3)  </li> </ul> </li> <li>2-D vs. scalar  </li> <li>LOOKS like comparing:  <ul> <li>A.shape -- (2,3)  </li> <li>b.shape -- (1,)  </li> </ul> </li> <li>ACTUALLY np is comparing:  <ul> <li>A.shape -- (2,3)  </li> <li>b.shape -- (1,1)</li> </ul> </li> </ul>"},{"location":"snippets/#iterm2","title":"iTerm2","text":""},{"location":"snippets/#tabs-and-windows","title":"Tabs and Windows","text":"Function Shortcut New Tab <code>\u2318</code> + <code>T</code> Close Tab or Window <code>\u2318</code> + <code>W</code>  (same as many mac apps) Go to Tab <code>\u2318</code> + <code>Number Key</code>  (ie: <code>\u23182</code> is 2nd tab) Go to Split Pane by Direction <code>\u2318</code> + <code>Option</code> + <code>Arrow Key</code> Cycle iTerm Windows <code>\u2318</code> + <code>backtick</code>  (true of all mac apps and works with desktops/mission control) Splitting Split Window Vertically (same profile) <code>\u2318</code> + <code>D</code> Split Window Horizontally (same profile) <code>\u2318</code> + <code>Shift</code> + <code>D</code>  (mnemonic: shift is a wide horizontal key) Moving Move a pane with the mouse <code>\u2318</code> + <code>Alt</code> + <code>Shift</code> and then drag the pane from anywhere Fullscreen Fullscreen <code>\u2318</code>+ <code>Enter</code> Maximize a pane <code>\u2318</code> + <code>Shift</code> + <code>Enter</code>  (use with fullscreen to temp fullscreen a pane!) Resize Pane <code>Ctrl</code> + <code>\u2318</code> + <code>Arrow</code> (given you haven't mapped this to something else) Less Often Used By Me Go to Split Pane by Order of Use <code>\u2318</code> + <code>]</code> , <code>\u2318</code> + <code>[</code> Split Window Horizontally (new profile) <code>Option</code> + <code>\u2318</code> + <code>H</code> Split Window Vertically (new profile) <code>Option</code> + <code>\u2318</code> + <code>V</code> Previous Tab <code>\u2318</code>+ <code>Left Arrow</code>  (I usually move by tab number like <code>\u2318+1</code>) Next Tab <code>\u2318</code>+ <code>Right Arrow</code> Go to Window <code>\u2318</code> + <code>Option</code> + <code>Number</code>"},{"location":"snippets/#my-favorite-shell-key-combos","title":"My Favorite Shell Key Combos","text":"<p>These might be helpful to getting you faster with the shell. These are just common shell shortcuts unrelated to iTerm itelf. These will usually work in Bash/Zsh/Fish on Mac and on Linux. There are many shortcuts out there but I use these quite a bit. There is also more than one way to do a thing so adopt what you like best.</p> <p>Hopefully some of these improve your work life.  :)</p> Function Key Combination Use Delete to start of line <code>Ctrl</code> + <code>U</code> Use this to start over typing without hitting Ctrl-C Delete to end of line <code>Ctrl</code> + <code>K</code> Use this with command history to repeat commands and changing one thing at the end! Repeat last command <code>Up Arrow</code> Cycle and browse your history with up and down.  <code>Ctrl-R</code> is faster if you know the string you are looking for. Move back and forth on a line <code>Arrow Keys</code> This takes you off the home row but it's easy to remember Move back and forth on a line by words <code>\u2325</code> + <code>Arrow Keys</code> Fast way to jump by words to correct a typo or \"run again\" with minor changes to last command.  Ctrl as modifier might also work on mac and non-mac keyboards/shells/apps. Delete previous word (in shell) <code>Ctrl</code> + <code>W</code> It's faster to delete by words.  Especially when your last command was wrong by a single typo or something. Clear screen <code>Ctrl</code> + <code>L</code> This is telling the shell to do it instead of an explicit command like <code>clear</code> or <code>cls</code> in DOS.  If you use <code>\u2318</code> + <code>K</code>, this is telling iTerm to clear the screen which might have the same result or do something terrible (like when using a TUI like <code>top</code> or <code>htop</code>.  In general, use this instead of typing <code>clear</code> over and over. Exit Shell <code>Ctrl</code> + <code>D</code> Instead of typing exit, just get this in muscle memory.  It works in many contexts."},{"location":"snippets/#moving-faster","title":"Moving Faster","text":"<p>A lot of shell shortcuts work in iterm and it's good to learn these because arrow keys, home/end keys and Mac equivalents don't always work.  For example <code>\u2318</code> + <code>Left Arrow</code> is usually the same as <code>Home</code> (go to beginning of current line) but that doesn't work in the shell.  Home works in many apps but it takes you away from the home row.</p> Function Shortcut Move to the start of line <code>Ctrl</code> + <code>A</code> or <code>Home</code> (Home is fn+Left arrow) Move to the end of line <code>Ctrl</code> + <code>E</code> or <code>End</code> (End is fn+Right arrow) Moving by word on a line (this is a shell thing but passes through fine) <code>Ctrl</code> + <code>Left/Right Arrow</code> Cursor Jump with Mouse (shell and vim - might depend on config) <code>Option</code> + <code>Left Click</code>"},{"location":"snippets/#about-keyboard-shortcuts","title":"About keyboard shortcuts \ud83d\udca1","text":"<p>So, some keyboard shortcuts are Mac's.  For example fn+Left Arrow is the Home key.  On a fullsize Mac keyboard, there is a Home key.  Home will usually pass through to iTerm and the shell.  By shell, I mean zsh, bash or fish.  The shell is the program running inside of iTerm when you open iTerm.  If you launch <code>vim</code> or something, zsh/bash/fish is \"gone\" because vim is running.  So, it's complicated to explain when keys work and when they don't.</p> <p>For example, Home will work in zsh.  It will take you to the beginning of the line.  If your cursor is at the end of \"three\" in this below example <pre><code>one two three|\n</code></pre> When you press Home (fn+Left Arrow) your cursor will be on one: <code>|one</code> So, in this way, Home works the same in \"the shell\" as it does in TextEdit.app or any basic text box on Mac. This is not the case if you start up <code>vim</code> or <code>emacs</code>.  This is not iTerm's fault.  This is just how Mac/Linux works.  Just a head's up on that little detail.</p>"},{"location":"snippets/#copy-and-paste-with-iterm-without-using-the-mouse","title":"Copy and Paste with iTerm without using the mouse","text":"<p>I don't use this feature too much.  I instead just mouse select (which copies to the clipboard) and paste.  There's no need to Copy to the clipboard if you have <code>General &gt; Selection &gt; Copy to pasteboard on selection</code> enabled.</p> Function Shortcut Enter Copy Mode <code>Shift</code> + <code>\u2318</code> + <code>C</code> Enter Character Selection Mode in Copy Mode <code>Ctrl</code> + <code>V</code> Move cursor in Copy Mode <code>HJKL</code> vim motions or arrow keys Copy text in Copy Mode <code>Ctrl</code> + <code>K</code> <p>Copy actions goes into the normal system clipboard which you can paste like normal.</p>"},{"location":"snippets/#search-the-command-history","title":"Search the Command History","text":"<p>Some of these are not directly related to iTerm and are just \"shell features\".  Like, if you open Terminal.app on Mac some of these still work because it's the shell and not iTerm.  I'm including them anyway.</p> Function Shortcut Search as you type <code>Ctrl</code> + <code>R</code> and type the search term; Repeat <code>Ctrl</code> + <code>R</code> to loop through result Search the last remembered search term <code>Ctrl</code> + <code>R</code> twice End the search at current history entry <code>Ctrl</code> + <code>Y</code> Cancel the search and restore original line <code>Ctrl</code> + <code>G</code>"},{"location":"snippets/#misc","title":"Misc","text":"Function Shortcut Clear the screen/pane (when <code>Ctrl + L</code> won't work) <code>\u2318</code> + <code>K</code>  (I use this all the time) Broadcast command to all panes in window (nice when needed!) <code>\u2318</code> + <code>Alt</code> +  <code>I</code> (again to toggle) Find Cursor <code>\u2318</code> + <code>/</code> or use a theme or cursor shape that is easy to see"},{"location":"snippets/#tmux","title":"tmux","text":""},{"location":"snippets/#pane-management","title":"Pane Management","text":"<ul> <li>Split Pane Horizontally: <code>Ctrl + b, then \"</code></li> <li>Split Pane Vertically: <code>Ctrl + b, then %</code></li> <li>Switch to x Pane: <code>Ctrl + b, then x-arrow</code></li> <li>Close Current Pane: <code>Ctrl + b, then x (then press y to confirm)</code></li> <li>(Switch to Next Pane: <code>Ctrl + b, then o)</code></li> </ul>"},{"location":"snippets/#window-management","title":"Window Management","text":"<ul> <li>Create New Window: <code>Ctrl + b, then c</code></li> <li>Switch to Next Window: <code>Ctrl + b, then n</code></li> <li>Switch to Previous Window: <code>Ctrl + b, then p</code></li> <li>List Windows: <code>Ctrl + b, then w</code></li> <li>Rename Current Window: <code>Ctrl + b, then ,</code></li> </ul>"},{"location":"snippets/#session-management","title":"Session Management","text":"<ul> <li>Detach from Session: <code>Ctrl + b, then d</code></li> <li>List Sessions: <code>tmux ls (outside of tmux)</code></li> <li>Attach to a Session: <code>tmux attach-session -t [session-name]</code></li> </ul>"},{"location":"snippets/#resizing-panes","title":"Resizing Panes","text":"<ul> <li>Resize Pane Up: <code>Ctrl + b:resize-pane -U 10</code></li> <li>Resize Pane Down: <code>Ctrl + b:resize-pane -D 10</code></li> <li>Resize Pane Left: <code>Ctrl + b:resize-pane -L 10</code></li> <li>Resize Pane Right: <code>Ctrl + b:resize-pane -R 10</code></li> </ul>"},{"location":"snippets/#miscellaneous","title":"Miscellaneous","text":"<ul> <li>Scroll Mode: <code>Ctrl + b, then [ (use arrow keys to scroll, q to exit scroll mode)</code></li> <li>Copy Mode: <code>Ctrl + b, then [ (enter copy mode for text selection)</code></li> <li>Paste from Buffer: <code>Ctrl + b, then ]</code></li> </ul>"},{"location":"webdev_snippets/","title":"Web Development Notes","text":"Web Development - Contents <ul> <li>Web Development Notes<ul> <li>HTML<ul> <li>Tags vs Attributes</li> <li>Tags</li> </ul> </li> <li>CSS<ul> <li>Selectors</li> <li>Properties and Values</li> <li>CSS Flexbox</li> <li>CSS Grid</li> <li>Bootstrap</li> </ul> </li> <li>Example Webpage</li> <li>JavaScript<ul> <li>JavaScript Basics<ul> <li>How to run JavaScript code<ul> <li>In the browser</li> <li>In the terminal</li> <li>In VS Code</li> </ul> </li> <li>Printing to the Console<ul> <li>Debugging in the console</li> </ul> </li> <li>Variable Declaration and Assignment</li> <li>Arrays<ul> <li>Declaration and Manipulation</li> <li>forEach Loops</li> <li>Array callback methods<ul> <li>Filtering Arrays</li> <li>Searching arrays</li> <li>Mapping functions to arrays</li> <li>Array NON-callback methods</li> <li>.reduce() method</li> <li>.reduce() -- Walkthrough</li> </ul> </li> </ul> </li> <li>Functions         - Callbacks (general)</li> <li>If-Statement syntax  in JavaScript<ul> <li>General Syntax</li> <li>If-else syntax:</li> <li>If-else-if syntax:</li> <li>Boolean Values in JavaScript</li> <li>Try...Catch</li> <li>Try...Catch...Finally</li> <li>Throw</li> <li>Try catch within Promise definition</li> <li>Comparison Operators in JavaScript</li> <li>Ternary Operator</li> <li>Switch Statements</li> <li>Return Early Pattern for Functions</li> </ul> </li> <li>!if-conditions<ul> <li>Falsy vs Nullish Values</li> <li>Optional Chaining</li> <li>Nullish Coalescing Operator</li> <li>Object + Nullish Coalescing</li> </ul> </li> <li>JavaScript Objects<ul> <li>Updating Object Properties</li> <li>Add New Properties to a JavaScript Object</li> <li>Delete Properties from a JavaScript Object</li> <li>Accessing Object Properties with Variables</li> <li>Object.keys()</li> <li>Using Objects for Lookups</li> <li>Testing Objects for Properties</li> <li>Nested Objects</li> <li>Accessing Nested Arrays</li> </ul> </li> <li>Looping<ul> <li>While Loops</li> <li>For Loops</li> <li>forEach Loops</li> <li>Iterate Through an Array with a For Loop</li> <li>Nesting For Loops</li> <li>Do...While Loops</li> <li>Profile Lookup</li> </ul> </li> <li>Constructor Functions<ul> <li>Purpose</li> <li>Syntax</li> <li>Invoking a Constructor Function</li> <li>Extending Constructors to Receive Arguments</li> <li>Verify an Object's Constructor with instanceof</li> <li>Understand Own Properties</li> <li>Use Prototype Properties to Reduce Duplicate Code</li> <li>Iterate Over All Properties</li> </ul> </li> <li>Object Methods         - Example</li> <li>Built-In Functions: Random Numbers \\&amp; Int-to-String Conversion<ul> <li>Generate Random Fractions with JavaScript</li> <li>Generate Random Whole Numbers with JavaScript</li> <li>Generate Random Whole Numbers within a Range</li> <li>Use the parseInt Function</li> <li>Use the parseInt Function with a Radix</li> </ul> </li> <li>Recursion<ul> <li>Sum first n array elements</li> <li>Using recursion to create a countdown</li> <li>Using recursion to create a range of numbers</li> </ul> </li> </ul> </li> <li>Useful JavaScript Built-in Functions<ul> <li>Chaining Array and String methods to generate HTML text</li> </ul> </li> <li>ES6<ul> <li>Use Arrow Functions to Write Concise Anonymous Functions<ul> <li>From functions to arrow functions</li> </ul> </li> <li>Implicit Return</li> <li>More detail on arrow functions:</li> <li>Write Arrow Functions with Parameters</li> <li>Implicit Return</li> <li>Set Default Parameters for Your Functions</li> <li>Compare Scopes of the var and let Keywords</li> <li>Mutate an Array Declared with const</li> <li>Prevent Object Mutation</li> <li>Use the Rest Parameter with Function Parameters</li> <li>Use the Spread Operator to Evaluate Arrays In-Place</li> <li>Rest syntax vs. Spread syntax</li> <li>Destructuring Assignment</li> <li>Use Destructuring Assignment to Assign Variables from Objects</li> <li>Use Destructuring Assignment to Pass an Object as a Function's Parameters</li> <li>Create Strings using Template Literals</li> <li>Write Concise Object Literal Declarations Using Object Property Shorthand</li> <li>Write Concise Declarative Functions with ES6</li> <li>Use class Syntax to Define a Constructor Function</li> <li>Use getters and setters to Control Access to an Object</li> <li>Create a Module Script</li> <li>Use export to Share a Code Block</li> </ul> </li> </ul> </li> <li>The DOM<ul> <li>Theory of the DOM</li> <li>Tree Details</li> <li>Common Usage Patterns (JavaScript Interaction)</li> </ul> </li> <li>The DOM (take 2)<ul> <li>DOM Selection I         - <code>document.querySelector(\"&lt;CSS selector&gt;\")</code>         - <code>Element.textContent</code></li> <li>DOM Selection II         - <code>document.querySelectorAll(\"&lt;CSS-selector&gt;\")</code><ul> <li>NodeList</li> <li>Converting NodeList to Array</li> </ul> </li> </ul> </li> <li>jQuery<ul> <li>Raison Detre</li> <li>Common Usage Patterns</li> </ul> </li> <li>Async Programming in JavaScript<ul> <li>Theory of Async Programming</li> <li>Promises<ul> <li>Understanding Promises</li> <li>Syntax and Usage</li> <li>Promise States</li> <li>Promise Methods</li> <li>Promise.all()</li> <li>Chaining Promises</li> </ul> </li> <li>Callbacks (async)<ul> <li>Understanding Callbacks</li> <li>Syntax and Basic Usage</li> <li>Callback Hell and Its Avoidance</li> </ul> </li> <li>Async/Await<ul> <li>Async Function</li> <li>Await Keyword</li> </ul> </li> <li>Common Usage Patterns</li> <li>Event Loop<ul> <li>Understanding the Event Loop</li> <li>Event Loop Phases</li> <li>Event Loop Example</li> <li>Event Loop and Asynchronous Operations</li> </ul> </li> </ul> </li> <li>Table of common built-in network request functions</li> <li>Introduction to React Framework<ul> <li>Background and Theory</li> <li>Why React?</li> <li>Basic Concepts</li> <li>Common Usage</li> <li>Intermediate Concepts</li> <li>React Common Libraries</li> </ul> </li> <li>Primer on TypeScript<ul> <li>Examples of TypeScript</li> <li>TypeScript vs JavaScript</li> <li>TypeScript with React</li> </ul> </li> <li>Node.js and npm<ul> <li>Background and Theory of Node.js</li> <li>Why Use Node.js?</li> <li>npm: Node Package Manager<ul> <li>Common npm Commands</li> <li>package.json File<ul> <li>Example package.json</li> </ul> </li> </ul> </li> </ul> </li> <li>Introduction to Yarn<ul> <li>Why Use Yarn?</li> <li>Common Yarn Commands</li> <li>yarn.lock File</li> <li>Example usage in a project</li> </ul> </li> <li>Redux<ul> <li>Key Concepts of Redux:</li> <li>Why Use Redux?</li> <li>Use Cases for Redux:</li> </ul> </li> <li>Development Workflow for React Using VSCode and npm<ul> <li>Setting Up a New React Project</li> <li>Development Process</li> <li>Building and Deployment</li> <li>Best Practices</li> <li>Conclusion</li> </ul> </li> </ul> </li> </ul>"},{"location":"webdev_snippets/#html","title":"HTML","text":"HTML <ul> <li>Tags vs Attributes</li> <li>Tags</li> </ul>"},{"location":"webdev_snippets/#tags-vs-attributes","title":"Tags vs Attributes","text":"<ul> <li>TAGS are the elements that make up an HTML document<ul> <li>Tags have CONTENT and ATTRIBUTES</li> <li>Tags can be nested (i.e. tags can be inside of other tags)</li> </ul> </li> <li>Tag CONTENT (the text between the opening and closing tags) is what is displayed on the page</li> <li>Tag ATTRIBUTES are properties of the tags that are used to provide additional information about the tag<ul> <li>Tag attributes are specified within the opening tag</li> <li>Tag attributes are made up of a NAME and a VALUE <pre><code>&lt;tag attributeNAME=attributeVALUE&gt;tagCONTENT&lt;/tag&gt;\n</code></pre></li> <li>General syntax:      <pre><code>&lt;tag attribute1=\"value1\" attribute2=\"value2\"&gt;content&lt;/tag&gt;\n</code></pre></li> <li>Example:     <pre><code>&lt;a href=\"https://www.google.com\" target=\"_blank\"&gt;Click here to go to Google&lt;/a&gt;\n</code></pre><ul> <li><code>&lt;a&gt;</code>...<code>&lt;/a&gt;</code> is the TAG <ul> <li>Called an \"anchor\" tag -- i.e. a link</li> </ul> </li> <li><code>href</code> is an ATTRIBUTE of the <code>a</code> TAG<ul> <li><code>https://www.google.com</code> is the value of the <code>href</code> attribute</li> </ul> </li> <li><code>target</code> is an attribute of the <code>a</code> tag</li> <li><code>this is a link</code> is the content of the <code>a</code> tag<ul> <li><code>_blank</code> is the VALUE of the <code>target</code> ATTRIBUTE<ul> <li>This tells the browser to open the link in a new tab</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> <pre><code>Tag\n\u251c\u2500\u2500 Attributes\n\u2502 \u251c\u2500\u2500 Name\n\u2502 \u2514\u2500\u2500 Value\n\u2514\u2500\u2500 Content\n</code></pre>"},{"location":"webdev_snippets/#tags","title":"Tags","text":"Tag Description Unpaired? <code>&lt;html&gt;&lt;/html&gt;</code> The root element of an HTML page No <code>&lt;head&gt;&lt;/head&gt;</code> Contains metadata about the document No <code>&lt;body&gt;&lt;/body&gt;</code> Contains the visible page content No <code>&lt;h1&gt;</code>...<code>&lt;/h1&gt;</code> Largest heading No <code>&lt;h2&gt;</code>...<code>&lt;/h2&gt;</code> Second largest heading No <code>&lt;h3&gt;</code>...<code>&lt;/h3&gt;</code> Third largest heading No <code>&lt;h4&gt;</code>...<code>&lt;/h4&gt;</code> Fourth largest heading No <code>&lt;h5&gt;</code>...<code>&lt;/h5&gt;</code> Fifth largest heading No <code>&lt;h6&gt;</code>...<code>&lt;/h6&gt;</code> Smallest heading No <code>&lt;p&gt;&lt;/p&gt;</code> Paragraph No <code>&lt;ul&gt;&lt;/ul&gt;</code> Unordered list No <code>&lt;ol&gt;&lt;/ol&gt;</code> Ordered list No <code>&lt;li&gt;&lt;/li&gt;</code> List item No <code>&lt;a&gt;&lt;/a&gt;</code> Anchor (link) <code>&lt;a href=\"url\"&gt;Link text&lt;/a&gt;</code>  Used to define a hyperlink. No <code>&lt;img&gt;</code> Image <code>&lt;img src=\"url\" alt=\"description\"&gt;</code>  Used to embed images. <code>src</code> attribute specifies the path to the image. <code>alt</code> attribute provides alternative text. Yes <code>&lt;div&gt;&lt;/div&gt;</code> Division, or section of a page No <code>&lt;span&gt;&lt;/span&gt;</code> Inline container for text and other inline elements No <code>&lt;br&gt;</code> Line break Yes <code>&lt;hr&gt;</code> Thematic break (horizontal rule) Yes <code>&lt;table&gt;&lt;/table&gt;</code> Table No <code>&lt;tr&gt;&lt;/tr&gt;</code> Table row No <code>&lt;td&gt;&lt;/td&gt;</code> Table data/cell No <code>&lt;th&gt;&lt;/th&gt;</code> Table heading No <code>&lt;form&gt;&lt;/form&gt;</code> Form for user input No <code>&lt;input&gt;</code> Input field <code>&lt;input type=\"text\" name=\"fieldname\"&gt;</code>  Used for user input. <code>type</code> attribute defines the type of input. Yes <code>&lt;button&gt;&lt;/button&gt;</code> Button No <code>&lt;select&gt;&lt;/select&gt;</code> Drop-down list No <code>&lt;option&gt;&lt;/option&gt;</code> Options within a select element No <code>&lt;textarea&gt;&lt;/textarea&gt;</code> Multi-line text input field No <code>&lt;link&gt;</code> Defines a link between a document and an external resource <code>&lt;link rel=\"stylesheet\" href=\"style.css\"&gt;</code>  Commonly used to link to stylesheets. <code>rel</code> attribute specifies the relationship. Yes <code>&lt;meta&gt;</code> Metadata about the HTML document <code>&lt;meta charset=\"UTF-8\"&gt;</code>  Defines metadata like character set, page description, keywords, author of the document, etc. Yes <code>&lt;script&gt;&lt;/script&gt;</code> Defines a client-side script No <code>&lt;style&gt;&lt;/style&gt;</code> Used to write CSS directly within an HTML document No"},{"location":"webdev_snippets/#css","title":"CSS","text":""},{"location":"webdev_snippets/#selectors","title":"Selectors","text":"<p>CSS (Cascading Style Sheets) is a language used to style HTML elements. In CSS, selectors are used to target the HTML elements that you want to style. A CSS selector can be a tag name, class name, id, or a combination of these.  </p> <ul> <li>A class name is a name that you assign to an element in the <code>class</code> attribute.  <ul> <li>E.g. <code>&lt;p class=\"blue-text\"&gt;This is a paragraph.&lt;/p&gt;</code> </li> <li>In this example, the class name is <code>blue-text</code>.  </li> <li>Multiple elements can have the same class name.  </li> <li>A class name can be used to style multiple elements at once.  </li> </ul> </li> <li>An id is a name that you assign to an element in the <code>id</code> attribute.  <ul> <li>E.g. <code>&lt;p id=\"blue-text\"&gt;This is a paragraph.&lt;/p&gt;</code> </li> <li>In this example, the id is <code>blue-text</code>.  </li> <li>Only one element can have a given id.  </li> <li>An id can be used to style a single element.  </li> </ul> </li> </ul> <p>For example, to style all <code>&lt;p&gt;</code> elements, you would use the selector <code>p</code>: <code>p { color: blue; }</code>.  For applying styles to multiple elements, you can use a comma-separated list of selectors: <code>p, h1 { color: blue; }</code>.  For applying styles to all elements of a certain type, you can use the <code>*</code> selector: <code>* { color: blue; }</code>.  For applying styles to all elements with a certain class, you can use the <code>.classname</code> selector: <code>.blue-text { color: blue; }</code>.  For applying styles to all elements with a certain id, you can use the <code>#idname</code> selector: <code>#blue-text { color: blue; }</code>.  To apply styles to elements that are nested within other elements, you can use the space character: <code>div p { color: blue; }</code>.  To apply multiple styles to an element, you can use a semicolon-separated list of style declarations: <code>p { color: blue; font-size: 16px; }</code>.   </p>"},{"location":"webdev_snippets/#properties-and-values","title":"Properties and Values","text":"<p>A property is a style that you want to apply to an element.  A property is made up of a name and a value.  </p> <ul> <li>General syntax:  <pre><code>selector {\n    property1: value1;\n    property2: value2;\n}\n</code></pre></li> </ul> Property Description Example Usage <code>color</code> Specifies the color of text <code>color: blue;</code> <code>background-color</code> Sets the background color of an element <code>background-color: #ffffff;</code> <code>font-size</code> Defines the font size of text <code>font-size: 16px;</code> <code>font-family</code> Specifies the font for text <code>font-family: Arial, sans-serif;</code> <code>text-align</code> Sets the horizontal alignment of text <code>text-align: center;</code> <code>margin</code> Specifies the space around elements <code>margin: 10px;</code>* Can be specified for each side with <code>margin-top</code>, <code>margin-right</code>, <code>margin-bottom</code>, <code>margin-left</code>. <code>padding</code> Sets the space between the content and the border of an element <code>padding: 5px;</code>* Can be specified for each side. <code>border</code> Specifies the border around elements <code>border: 1px solid black;</code>* Individual sides can be styled separately. <code>width</code> Sets the width of an element <code>width: 100px;</code>* Percentages allow for responsive design. <code>height</code> Sets the height of an element <code>height: 50px;</code> <code>display</code> Specifies the display behavior of an element <code>display: block;</code>* Common values include <code>block</code>, <code>inline</code>, <code>inline-block</code>, <code>none</code>. <code>position</code> Specifies the type of positioning method <code>position: relative;</code>* Other values: <code>absolute</code>, <code>fixed</code>, <code>sticky</code>. <code>overflow</code> Specifies what happens if content overflows an element's box <code>overflow: scroll;</code>* Other values: <code>hidden</code>, <code>auto</code>. <code>opacity</code> Specifies the opacity of an element <code>opacity: 0.5;</code>* Ranges from 0 (completely transparent) to 1 (fully opaque). <code>z-index</code> Specifies the stack order of an element <code>z-index: 1;</code>* Higher numbers are on top. Used with positioned elements. <code>float</code> Specifies how an element should float <code>float: right;</code>* Other values: <code>left</code>, <code>none</code>. <code>box-shadow</code> Applies shadow to elements <code>box-shadow: 2px 2px 4px #000000;</code> <code>transition</code> Specifies the transition effects <code>transition: background-color 0.5s ease;</code>* Can define the property to transition, duration, and timing function. <code>flex</code> Used in a flexbox layout to control the size of items <code>flex: 1;</code>* Can be used to specify the ability of an item to grow or shrink. <code>grid</code> Used in a grid layout to define the structure of grid areas <code>grid-template-columns: 50px 50px;</code>* Specifies the size of columns and rows in grid layouts."},{"location":"webdev_snippets/#css-flexbox","title":"CSS Flexbox","text":"<p>Flexbox is a layout mode that arranges elements in a flexible way.  Flexbox is a one-dimensional layout model, as opposed to CSS Grid, which is a two-dimensional layout model.  Flexbox is used to create responsive layouts.  Flexbox is used to create a flexible container that can hold a flexible number of items. Flexbox is used to align items within the container. </p> <p>Fully-fledged flexbox example:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Flexbox Example&lt;/title&gt;\n    &lt;style&gt;\n        body {\n            margin: 0;\n            font-family: Arial, sans-serif;\n        }\n        .flex-container {\n            display: flex;\n            justify-content: space-around;\n            align-items: center;\n            background-color: #f0f0f0;\n            padding: 20px;\n        }\n        .flex-item {\n            background-color: #007bff;\n            color: white;\n            padding: 15px;\n            margin: 10px;\n            text-align: center;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"flex-container\"&gt;\n        &lt;div class=\"flex-item\"&gt;Flex Item 1&lt;/div&gt;\n        &lt;div class=\"flex-item\"&gt;Flex Item 2&lt;/div&gt;\n        &lt;div class=\"flex-item\"&gt;Flex Item 3&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>In short, flexbox extends the CSS box model to enable one-dimensional layouts.  One-dimensional layouts are layouts that can be laid out either as a row or as a column. </p>"},{"location":"webdev_snippets/#css-grid","title":"CSS Grid","text":"<p>CSS Grid is a layout mode that arranges elements in a two-dimensional grid. </p> <p>Fully-fledged CSS Grid example:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Grid Layout Example&lt;/title&gt;\n    &lt;style&gt;\n        body {\n            margin: 0;\n            font-family: Arial, sans-serif;\n        }\n        .grid-container {\n            display: grid;\n            grid-template-columns: auto auto auto;\n            gap: 10px;\n            background-color: #f0f0f0;\n            padding: 20px;\n        }\n        .grid-item {\n            background-color: #007bff;\n            color: white;\n            padding: 20px;\n            text-align: center;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"grid-container\"&gt;\n        &lt;div class=\"grid-item\"&gt;Grid Item 1&lt;/div&gt;\n        &lt;div class=\"grid-item\"&gt;Grid Item 2&lt;/div&gt;\n        &lt;div class=\"grid-item\"&gt;Grid Item 3&lt;/div&gt;\n        &lt;div class=\"grid-item\"&gt;Grid Item 4&lt;/div&gt;\n        &lt;div class=\"grid-item\"&gt;Grid Item 5&lt;/div&gt;\n        &lt;div class=\"grid-item\"&gt;Grid Item 6&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"webdev_snippets/#bootstrap","title":"Bootstrap","text":"<p>Bootstrap is a CSS framework that makes it easy to create responsive websites. Bootstrap is a collection of CSS and JavaScript files that you can include in your HTML document. Bootstrap provides a grid system, a collection of pre-built components, and a set of utilities.</p> <p>Bootstrap example:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;title&gt;Simple Example Webpage&lt;/title&gt;\n    &lt;!-- Bootstrap CSS --&gt;\n    &lt;link href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" rel=\"stylesheet\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n    &lt;!-- Navigation Bar --&gt;\n    &lt;nav class=\"navbar navbar-expand-lg navbar-light bg-light\"&gt;\n        &lt;a class=\"navbar-brand\" href=\"#\"&gt;WebDev Notes&lt;/a&gt;\n        &lt;button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"&gt;\n            &lt;span class=\"navbar-toggler-icon\"&gt;&lt;/span&gt;\n        &lt;/button&gt;\n        &lt;div class=\"collapse navbar-collapse\" id=\"navbarNav\"&gt;\n            &lt;ul class=\"navbar-nav\"&gt;\n                &lt;li class=\"nav-item active\"&gt;\n                    &lt;a class=\"nav-link\" href=\"#\"&gt;Home &lt;span class=\"sr-only\"&gt;(current)&lt;/span&gt;&lt;/a&gt;\n                &lt;/li&gt;\n                &lt;li class=\"nav-item\"&gt;\n                    &lt;a class=\"nav-link\" href=\"#\"&gt;Features&lt;/a&gt;\n                &lt;/li&gt;\n                &lt;li class=\"nav-item\"&gt;\n                    &lt;a class=\"nav-link\" href=\"#\"&gt;Pricing&lt;/a&gt;\n                &lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/div&gt;\n    &lt;/nav&gt;\n\n    &lt;!-- Jumbotron --&gt;\n    &lt;div class=\"jumbotron\"&gt;\n        &lt;h1 class=\"display-4\"&gt;Simple Example Webpage&lt;/h1&gt;\n        &lt;p class=\"lead\"&gt;This is a simple example webpage. It is written in HTML, CSS, and JavaScript.&lt;/p&gt;\n        &lt;hr class=\"my-4\"&gt;\n        &lt;p&gt;Explore the features of Bootstrap to enhance web development.&lt;/p&gt;\n        &lt;a class=\"btn btn-primary btn-lg\" href=\"https://sfuller14.github.io/drawio/src/main/webapp/index.html\" role=\"button\"&gt;Learn more&lt;/a&gt;\n    &lt;/div&gt;\n\n    &lt;!-- Main Content --&gt;\n    &lt;div class=\"container\"&gt;\n        &lt;div class=\"row\"&gt;\n            &lt;!-- Card 1 --&gt;\n            &lt;div class=\"col-md-4 mb-4\"&gt;\n                &lt;div class=\"card\"&gt;\n                    &lt;div class=\"card-body\"&gt;\n                        &lt;h5 class=\"card-title\"&gt;Feature 1&lt;/h5&gt;\n                        &lt;p class=\"card-text\"&gt;Some quick example text to build on the card title and make up the bulk of the card's content.&lt;/p&gt;\n                        &lt;a href=\"#\" class=\"btn btn-primary\"&gt;Go somewhere&lt;/a&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n            &lt;!-- Card 2 --&gt;\n            &lt;div class=\"col-md-4 mb-4\"&gt;\n                &lt;div class=\"card\"&gt;\n                    &lt;div class=\"card-body\"&gt;\n                        &lt;h5 class=\"card-title\"&gt;Feature 2&lt;/h5&gt;\n                        &lt;p class=\"card-text\"&gt;Another quick example text to build on the card title and fill the card's content.&lt;/p&gt;\n                        &lt;a href=\"#\" class=\"btn btn-primary\"&gt;Go somewhere&lt;/a&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n            &lt;!-- Card 3 --&gt;\n            &lt;div class=\"col-md-4 mb-4\"&gt;\n                &lt;div class=\"card\"&gt;\n                    &lt;div class=\"card-body\"&gt;\n                        &lt;h5 class=\"card-title\"&gt;Feature 3&lt;/h5&gt;\n                        &lt;p class=\"card-text\"&gt;And another quick example text for the third card's content.&lt;/p&gt;\n                        &lt;a href=\"#\" class=\"btn btn-primary\"&gt;Go somewhere&lt;/a&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;!-- Footer --&gt;\n    &lt;footer class=\"bg-light text-center text-lg-start mt-4\"&gt;\n        &lt;div class=\"text-center p-3\" style=\"background-color: rgba(0, 0, 0, 0.2);\"&gt;\n            \u00a9 2023 WebDev Notes\n        &lt;/div&gt;\n    &lt;/footer&gt;\n\n    &lt;!-- Optional Bootstrap JavaScript --&gt;\n    &lt;script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>In the example above, the Bootstrap CSS and JavaScript files are included in the <code>&lt;head&gt;</code> and <code>&lt;body&gt;</code> sections, respectively.  All that is needed to use Bootstrap is to include the CSS and JavaScript files in your HTML document.  People like Bootstrap because it enables you to create responsive websites without having to write a lot of CSS.</p>"},{"location":"webdev_snippets/#example-webpage","title":"Example Webpage","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"UTF-8\" /&gt;\n        &lt;title&gt;Simple Example Webpage&lt;/title&gt;\n        &lt;style&gt;\n            body {\n                background-color: #ffffff;\n                color: #000000;\n                font-family: Arial, sans-serif;\n                font-size: 16px;\n                margin: 0;\n                padding: 0;\n            }\n\n            .container {\n                margin: 0 auto;\n                max-width: 800px;\n                padding: 20px;\n            }\n\n            h1 {\n                text-align: center;\n            }\n\n            .content {\n                margin-top: 20px;\n            }\n\n            .content p {\n                margin-bottom: 10px;\n            }\n\n            .content a {\n                color: #0000ff;\n                text-decoration: none;\n            }\n\n            .content a:hover {\n                text-decoration: underline;\n            }\n\n            .content button {\n                background-color: #0000ff;\n                border: none;\n                border-radius: 5px;\n                color: #ffffff;\n                cursor: pointer;\n                font-size: 16px;\n                margin-top: 10px;\n                padding: 10px;\n            }\n\n            .content button:hover {\n                background-color: #0000aa;\n            }\n\n            .content button:active {\n                background-color: #000055;\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div class=\"container\"&gt;\n            &lt;h1&gt;Simple Example Webpage&lt;/h1&gt;\n            &lt;div class=\"content\"&gt;\n                &lt;p&gt;\n                    This is a simple example webpage. It is written in HTML, CSS, and\n                    JavaScript.\n                &lt;/p&gt;\n                &lt;p&gt;\n                    This is a link to\n                    &lt;a href=\"https://sfuller14.github.io/drawio/src/main/webapp/index.html\" target=\"_blank\"&gt;Github Pages&lt;/a&gt;.\n                &lt;/p&gt;\n                &lt;button onclick=\"alert('Hello World!')\"&gt;Click Me!&lt;/button&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"webdev_snippets/#javascript","title":"JavaScript","text":"JavaScript Basics <ul> <li>How to run JavaScript code<ul> <li>In the browser</li> <li>In the terminal</li> <li>In VS Code</li> </ul> </li> <li>Printing, Variables, Arrays, Functions<ul> <li>Printing to the Console</li> <li>Variable Declaration and Assignment</li> <li>Array Declaration and Manipulation</li> <li>Function Declaration and Calling</li> </ul> </li> <li>If-Statement syntax  in JavaScript<ul> <li>Syntax</li> <li>If-else syntax:</li> <li>If-else-if syntax:</li> <li>Boolean Values in JavaScript</li> <li>Comparison Operators in JavaScript</li> <li>Ternary Operator</li> <li>Switch Statements</li> <li>Return Early Pattern for Functions</li> </ul> </li> <li>JavaScript Objects<ul> <li>Updating Object Properties</li> <li>Add New Properties to a JavaScript Object</li> <li>Delete Properties from a JavaScript Object</li> <li>Using Objects for Lookups</li> <li>Testing Objects for Properties</li> <li>Nested Objects</li> <li>Accessing Nested Arrays</li> </ul> </li> <li>Looping<ul> <li>While Loops</li> <li>For Loops</li> <li>Iterate Through an Array with a For Loop</li> <li>Nesting For Loops</li> <li>Do...While Loops</li> <li>Profile Lookup</li> </ul> </li> <li>Constructor Functions<ul> <li>Purpose</li> <li>Syntax</li> <li>Invoking a Constructor Function</li> <li>Extending Constructors to Receive Arguments</li> <li>Verify an Object's Constructor with instanceof</li> <li>Understand Own Properties</li> <li>Use Prototype Properties to Reduce Duplicate Code</li> <li>Iterate Over All Properties</li> </ul> </li> <li>Methods<ul> <li>Methods</li> <li>Example</li> </ul> </li> <li>Built-In Functions: Random Numbers \\&amp; Int-to-String Conversion<ul> <li>Generate Random Fractions with JavaScript</li> <li>Generate Random Whole Numbers with JavaScript</li> <li>Generate Random Whole Numbers within a Range</li> <li>Use the parseInt Function</li> <li>Use the parseInt Function with a Radix</li> </ul> </li> <li>Recursion<ul> <li>Using recursion to create a countdown</li> <li>Using recursion to create a range of numbers</li> </ul> </li> <li>Useful JavaScript Built-in Functions</li> <li>ES6<ul> <li>Use Arrow Functions to Write Concise Anonymous Functions</li> <li>Write Arrow Functions with Parameters</li> <li>Set Default Parameters for Your Functions</li> <li>Compare Scopes of the var and let Keywords</li> <li>Mutate an Array Declared with const</li> <li>Prevent Object Mutation</li> <li>Use the Rest Parameter with Function Parameters</li> <li>Use the Spread Operator to Evaluate Arrays In-Place</li> <li>Use Destructuring Assignment to Extract Values from Objects</li> <li>Use Destructuring Assignment to Assign Variables from Objects</li> <li>Use Destructuring Assignment to Assign Variables from Arrays</li> <li>Destructuring via rest elements</li> <li>Use Destructuring Assignment to Pass an Object as a Function's Parameters</li> <li>Create Strings using Template Literals</li> <li>Write Concise Object Literal Declarations Using Object Property Shorthand</li> <li>Write Concise Declarative Functions with ES6</li> <li>Use class Syntax to Define a Constructor Function</li> <li>Use getters and setters to Control Access to an Object</li> <li>Create a Module Script</li> <li>Use export to Share a Code Block</li> </ul> </li> </ul>"},{"location":"webdev_snippets/#javascript-basics","title":"JavaScript Basics","text":""},{"location":"webdev_snippets/#how-to-run-javascript-code","title":"How to run JavaScript code","text":""},{"location":"webdev_snippets/#in-the-browser","title":"In the browser","text":"<ul> <li>Open the browser console<ul> <li>In Chrome: <code>Cmd + Option + J</code></li> </ul> </li> <li>Or use the <code>script</code> tag in the HTML file<ul> <li>E.g. <code>&lt;script src=\"script.js\"&gt;&lt;/script&gt;</code></li> <li>This is useful when you want to run the code when the page loads</li> </ul> </li> <li>Or use the <code>script</code> tag in the HTML file with the <code>defer</code> attribute<ul> <li>E.g. <code>&lt;script src=\"script.js\" defer&gt;&lt;/script&gt;</code></li> <li>This is useful when you want to run the code when the page loads but you want to load the HTML first (e.g. when you want to use the DOM)<ul> <li>This can also be done by putting the <code>script</code> tag at the end of the <code>body</code> tag or using an event listener on the <code>DOMContentLoaded</code> event</li> </ul> </li> </ul> </li> <li>Or use the <code>script</code> tag in the HTML file with the <code>async</code> attribute<ul> <li>E.g. <code>&lt;script src=\"script.js\" async&gt;&lt;/script&gt;</code></li> <li>This is useful when you want to run the code when the page loads but you don't want to wait for the HTML to load (e.g. when you don't want to use the DOM)<ul> <li>This can also be done by putting the <code>script</code> tag at the beginning of the <code>body</code> tag or using an event listener on the <code>load</code> event</li> </ul> </li> </ul> </li> </ul>"},{"location":"webdev_snippets/#in-the-terminal","title":"In the terminal","text":"<ul> <li>Install Node.js</li> <li>Run <code>node script.js</code></li> <li>Or run <code>node</code> to open the Node.js REPL<ul> <li>This is useful for testing code</li> </ul> </li> <li>Or run <code>node -i script.js</code> to run the script and then open the Node.js REPL (interactive mode)</li> <li>Or run <code>node -e \"console.log('Hello World!')\"</code> to run a one-liner</li> </ul>"},{"location":"webdev_snippets/#in-vs-code","title":"In VS Code","text":"<ul> <li>Install the Code Runner extension</li> <li>Or use the Quokka.js extension<ul> <li>This is useful for testing code</li> <li>It can be used to run code in the editor or in the terminal</li> </ul> </li> </ul>"},{"location":"webdev_snippets/#printing-to-the-console","title":"Printing to the Console","text":"<pre><code>console.log(\"Hello World!\");\n</code></pre>"},{"location":"webdev_snippets/#debugging-in-the-console","title":"Debugging in the console","text":"<pre><code>// clear the console\nconsole.clear();\n// typeof\nconsole.log(typeof 3); // number\n// string interpolation\nconsole.log(`The type of 3 is ${typeof 3}`); // The type of 3 is number\n// console.table\nconsole.table([1, 2, 3, 4, 5]);\n// more complex example\nconsole.table([\n    { name: \"John\", age: 23 },\n    { name: \"Jack\", age: 24 },\n]);\n// console.error\nconsole.error(\"This is an error\");\n// scripting in the console (e.g. to test a function)\nfunction add(a, b) {\n    return a + b;\n}\nadd(1, 2); // 3\n// console.assert\nconsole.assert(1 === 2, \"This is an error\"); // Assertion failed: This is an error\n</code></pre>"},{"location":"webdev_snippets/#variable-declaration-and-assignment","title":"Variable Declaration and Assignment","text":"<pre><code>var myName = \"John\"; // DONT' USE - var is used throughout the program\nlet myValue = 7; // let is used within the scope of where it's declared\nconst pi = 3.14; // const is used for variables that won't change\n\nmyValue = 7 * 2;\nmyValue++;\nmyValue--;\nmyValue += 5;\nmyValue -= 5;\nmyValue *= 5;\nmyValue /= 5;\n</code></pre>"},{"location":"webdev_snippets/#arrays","title":"Arrays","text":""},{"location":"webdev_snippets/#declaration-and-manipulation","title":"Declaration and Manipulation","text":"<ul> <li>1-D:</li> </ul> <pre><code>let myArray = [\"John\", 23];\nmyArray[0] = \"Jack\"; // this won't work with const\nmyArray.push(\"John\"); // adds to end\nlet holder = myArray.pop(); // removes from end and stores in holder\nmyArray.shift(); // removes from beginning\nmyArray.unshift(\"John\"); // adds to beginning -- have to use this for const\n</code></pre> <ul> <li>2-D:</li> </ul> <pre><code>let myArray = [\n    [\"John\", 23],\n    [\"Jack\", 24],\n];\n\nmyArray[0] = \"Super random value\"; // arrays can hold any type of value\n</code></pre>"},{"location":"webdev_snippets/#foreach-loops","title":"forEach Loops","text":"<p>(This is jumping ahead a bit but should be grouped with arrays -- see Looping, Functions, and first segments of ES6 for more info)  </p> <p>Here a callback is used (where the callback is defined in-line)  </p> <pre><code>const xArray = [10, 6, 8];\n\nxArray.forEach(function(x) {\n    console.log(x);\n})\n</code></pre> <p>In other words, the first arg of the callback definition is used to specify the \"dynamic variable name\" used for the array elements Using an arrow function, the syntax is more elegant: </p> <pre><code>const xArray = [10, 6, 8];\n\nxArray.forEach((x) =&gt; {\n    console.log(x);\n})\n</code></pre>"},{"location":"webdev_snippets/#array-callback-methods","title":"Array callback methods","text":"<p>Notice the pattern here -- <code>array.method(callback)</code> where callback is  </p> <pre><code>function(arrayItem) {...}\n</code></pre> <ul> <li><code>.filter()</code></li> <li><code>.find()</code></li> <li><code>.map()</code></li> </ul>"},{"location":"webdev_snippets/#filtering-arrays","title":"Filtering Arrays","text":"<p>Note: this will always return an array  </p> <pre><code>const years = [2000, 2008, 2020, 2023];\n\nyears.filter(function(year) {\n    return year &gt;= 2010; // this must *return* a boolean\n});\n</code></pre> <p>Using arrow function syntax:</p> <pre><code>const years = [2000, 2008, 2020, 2023];\n\nyears.filter((year) =&gt; {\n    return year &gt;= 2010; // this must *return* a boolean\n});\n</code></pre> <p>Using implicit return:</p> <pre><code>years.filter((year) =&gt; year &gt;= 2010;)\n</code></pre>"},{"location":"webdev_snippets/#searching-arrays","title":"Searching arrays","text":"<p>The .find() method returns either the first array item that matches the callback condition or <code>undefined</code> if the specified item isn't found.  </p> <pre><code>const names = [\"Sam\", \"Alex\", \"Charlie\"];\n\nconst result = names.find(function(name) {\n  return name === \"Alex\";\n});\nconsole.log(result); // \"Alex\"\n</code></pre> <p>Using arrow function syntax:</p> <pre><code>const names = [\"Sam\", \"Alex\", \"Charlie\"];\n\nconst result = names.find((name) =&gt; {\n  return name === \"Alex\";\n});\nconsole.log(result); // \"Alex\"\n</code></pre> <p>Using implicit return: </p> <pre><code>const result = names.find((name) =&gt; name === 'Alex')\n</code></pre>"},{"location":"webdev_snippets/#mapping-functions-to-arrays","title":"Mapping functions to arrays","text":"<pre><code>const names = [\"sam\", \"Alex\"];\nconst upperNames = names.map(function(name) {\n    return name.toUpperCase();\n});\n</code></pre> <p>Using arrow function syntax: </p> <pre><code>const names = [\"sam\", \"Alex\"];\nconst upperNames = names.map((name) =&gt; {\n    return name.toUpperCase();\n});\n</code></pre> <p>Using implicit return: </p> <pre><code>const upperNames = names.map((name) =&gt; name.toUpperCase();)\n</code></pre>"},{"location":"webdev_snippets/#array-non-callback-methods","title":"Array NON-callback methods","text":"<ul> <li><code>.includes()</code><ul> <li><code>groceries.includes(\"Tomato\"); // true</code></li> </ul> </li> <li><code>.join()</code><ul> <li><code>groceries.join(\"; \"); // \"Apple; Peach; Tomato\"</code></li> </ul> </li> </ul>"},{"location":"webdev_snippets/#reduce-method","title":".reduce() method","text":"<p>The <code>reduce()</code> method is used to calculate a single value from an array. In other terms, you reduce an array into a single value. <code>.reduce()</code> is commonly used for summing the values in an array (or multiplying, or finding the max, or averaging, etc. -- any operation that reduces an array to a single value).  </p> <ul> <li>The reduce() method accepts the \"reducer\" -- a callback that you have to write -- and an optional initial value (for the accumulator).   <ul> <li>The \"reducer function\" takes two arguments: the accumulator and the current value. </li> </ul> </li> </ul> <p>General syntax:</p> <pre><code>array.reduce(function(accumulator, currentValue) { // this callback is the \"reducer function\"\n    return accumulator + currentValue; \n}, 0); // 0 is the initial value of the accumulator\n</code></pre> <pre><code>const numbers = [1, 2, 3, 4, 5];\n\nconst sum = numbers.reduce(function(accumulator, currentValue) {\n    return accumulator + currentValue; // this is the \"reducer function\"\n});\nconsole.log(sum); // 15\n</code></pre> <p>Using arrow function syntax: </p> <pre><code>const sum = numbers.reduce((accumulator, currentValue) =&gt; {\n    return accumulator + currentValue;\n});\nconsole.log(sum); // 15\n</code></pre> <p>Using implicit return: </p> <pre><code>const sum = numbers.reduce((accumulator, currentValue) =&gt; accumulator + currentValue;)\nconsole.log(sum); // 15\n</code></pre> <p>Using an initial value: </p> <pre><code>const sum = numbers.reduce((accumulator, currentValue) =&gt; accumulator + currentValue;, 100)\nconsole.log(sum); // 115\n</code></pre>"},{"location":"webdev_snippets/#reduce-walkthrough","title":".reduce() -- Walkthrough","text":"<pre><code>const grades = [10, 15, 5];\nconst sum = grades.reduce((total, current) =&gt; { \n    return total + current;\n}, 0);\n</code></pre> <p>Here the reducer is: </p> <pre><code>(total, current) =&gt; { \n    return total + current;\n}\n</code></pre> <p>This is the callback that is applied for every item in the array, however, this callback takes 2 parameters: total and current.  </p> <p>The total is always referring to the last computed value by the reduce function. You may often see this called as accumulator in documentation which is a more correct name. And the current is referring to a single item in the array. </p> <pre><code>const grades = [10, 15, 5];\nconst sum = grades.reduce((total, current) =&gt; total + current;, 0); // total (the accumulator) holds the \"running total\" &amp; gets assigned to &amp; returned at end || current represents 1 item in the array\n</code></pre> <p>Looking at the value of <code>total</code> and <code>current</code> for each iteration:</p> <ul> <li>Iteration 1: <ul> <li><code>total</code> = 0 (because of initial value)</li> <li><code>current</code> = 10 (because of first item in array)<ul> <li><code>total</code> + <code>current</code> is returned and becomes the new <code>total</code> for the next iteration</li> </ul> </li> </ul> </li> <li>Iteration 2: <ul> <li><code>total</code> = 10 (because of previous iteration)</li> <li><code>current</code> = 15 (because of next item in array)<ul> <li><code>total</code> + <code>current</code> is returned and becomes the new <code>total</code> for the next iteration</li> </ul> </li> </ul> </li> <li>Iteration 3: <ul> <li><code>total</code> = 25 (because of previous iteration)</li> <li><code>current</code> = 5 (because of next item in array)<ul> <li><code>total</code> + <code>current</code> is returned and - since there are no more items in the array - this is the final value of <code>total</code>, which gets assigned to <code>sum</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"webdev_snippets/#functions","title":"Functions","text":"<pre><code>// Print function\nfunction myFunction() {\n    console.log(\"Hello World!\");\n}\n\nmyFunction();\n</code></pre> <pre><code>// Return function\nfunction myFunction() {\n    return \"Hello World!\";\n}\n\nconsole.log(myFunction());\n</code></pre> <pre><code>// Setting global variable\n// returns undefined\nlet sum = 0;\n\nfunction addThree() {\n    // the below line (i.e. without let/const/var) isn't a declaration \n    // (it's a post-declaration assignment)\n    sum += 3;\n}\n\nfunction addFive() {\n    sum += 5;\n}\n\naddThree();\naddFive();\nconsole.log(sum); // 8\n</code></pre>"},{"location":"webdev_snippets/#callbacks-general","title":"Callbacks (general)","text":"<p>A callback is a function definition passed as an argument to another function, enabling the inner function to be invoked within the outer function w/ access to the scope of the outer function This can be done in-line (i.e. defining the inner function within the arg pass to the outer function) -- see array.forEach() Can also be done using a stand-in value for the inner function in the definition of the outer function -- see callbacks with async  </p>"},{"location":"webdev_snippets/#if-statement-syntax-in-javascript","title":"If-Statement syntax  in JavaScript","text":""},{"location":"webdev_snippets/#general-syntax","title":"General Syntax","text":"<ul> <li> <p>One then-statement: </p> <p><code>if (condition) statement;</code></p> <p>OR</p> <pre><code>if (condition) {\n    statement;\n}\n</code></pre> </li> <li> <p>Multiple then-statements: </p> <p><code>if (condition) { statement1; statement2; }</code></p> <p>OR</p> <pre><code>if (condition) {\n    statement1;\n    statement2;\n}\n</code></pre> </li> </ul>"},{"location":"webdev_snippets/#if-else-syntax","title":"If-else syntax:","text":"<pre><code>if (condition) {\n    statement1;\n} else {\n    statement2;\n}\n</code></pre>"},{"location":"webdev_snippets/#if-else-if-syntax","title":"If-else-if syntax:","text":"<pre><code>if (condition1) {\n    statement1;\n} else if (condition2) {\n    statement2;\n} else {\n    statement3;\n}\n</code></pre>"},{"location":"webdev_snippets/#boolean-values-in-javascript","title":"Boolean Values in JavaScript","text":"<pre><code>function trueOrFalse(wasThatTrue) {\n    if (wasThatTrue) {\n        return \"Yes, that was true\";\n    }\n    return \"No, that was false\";\n}\n\nconsole.log(trueOrFalse(true)); // Yes, that was true\nconsole.log(trueOrFalse(false)); // No, that was false\n</code></pre>"},{"location":"webdev_snippets/#trycatch","title":"Try...Catch","text":"<pre><code>try {\n    // code to try\n} catch (err) { // here an error object is assigned to err\n    // code to run if an error occurs\n}\n</code></pre> <pre><code>try {\n  nonExistentFunction();\n} catch (error) {\n  console.error(error);\n  // Expected output: ReferenceError: nonExistentFunction is not defined\n}\n</code></pre>"},{"location":"webdev_snippets/#trycatchfinally","title":"Try...Catch...Finally","text":"<pre><code>try {\n    // code to try\n} catch (err) { // here an error object is assigned to err\n    // code to run if an error occurs\n} finally {\n    // code to run regardless of whether an error occurs\n}\n</code></pre>"},{"location":"webdev_snippets/#throw","title":"Throw","text":"<p>Use <code>throw</code> instead of console.error() to throw an exception. This is useful for custom error messages during debugging.  </p> <pre><code>throw \"Error2\"; // generates an exception with a string value\n// console output: Uncaught Error2\n</code></pre> <pre><code>throw 42; // generates an exception with the value 42\n// console output: Uncaught 42\n</code></pre>"},{"location":"webdev_snippets/#try-catch-within-promise-definition","title":"Try catch within Promise definition","text":"<pre><code>const myPromise = new Promise((resolve, reject) =&gt; {\n    try {\n        // resolve([codeToTry])\n    } catch (err) {\n        // reject([codeToRunIfError])\n    }\n});\n</code></pre>"},{"location":"webdev_snippets/#comparison-operators-in-javascript","title":"Comparison Operators in JavaScript","text":"<ul> <li><code>&amp;&amp;</code> - and</li> <li><code>||</code> - or</li> <li><code>==</code> - equal to</li> <li>JavaScript compares different types by converting them to a common type</li> <li><code>===</code> - equal value and equal type</li> <li>This is necessary in JavaScript because <code>1 == \"1\"</code> is true but <code>1 === \"1\"</code> is false</li> <li><code>!=</code> - not equal</li> <li><code>!==</code> - not equal value or not equal type</li> <li><code>!</code> - not</li> <li>Common usage:<ul> <li><code>if (!(a &amp;&amp; b)) { ... }</code></li> </ul> </li> <li>rest are same as python</li> </ul>"},{"location":"webdev_snippets/#ternary-operator","title":"Ternary Operator","text":"<ul> <li> <p>Syntax:</p> <pre><code>condition ? statement-if-true : statement-if-false;\n</code></pre> </li> <li> <p>Example:</p> <pre><code>function checkEqual(a, b) {\n    return a === b ? true : false;\n}\n\nconsole.log(checkEqual(1, 2)); // false\n</code></pre> </li> <li> <p>This is like python's <code>a if condition else b</code> syntax</p> </li> <li> <p>Multiple ternary operators can be chained together:</p> <pre><code>function checkSign(num) {\n    return num &gt; 0 ? \"positive\" : num &lt; 0 ? \"negative\" : \"zero\";\n}\n\nconsole.log(checkSign(10)); // positive\n</code></pre> </li> <li> <p>In python this would be <code>a if condition else b if condition else c</code></p> </li> </ul>"},{"location":"webdev_snippets/#switch-statements","title":"Switch Statements","text":"<ul> <li>Simpler syntax for single variable value comparison</li> <li>Equivalent to python 3.10+ match-case statement</li> <li>Uses strict equality (<code>===</code>) in comparisons</li> <li>Simple example:</li> </ul> <p><pre><code>function caseInSwitch(val) {\n    let answer = \"\";\n    switch (val) {\n        case 1:\n            answer = \"alpha\";\n            break;\n        case 2:\n            answer = \"beta\";\n            break;\n        case 3:\n            answer = \"gamma\";\n            break;\n    }\n    return answer;\n}\n\nconsole.log(caseInSwitch(1)); // alpha\nconsole.log(caseInSwitch(2)); // beta\nconsole.log(caseInSwitch(3)); // gamma\nconsole.log(caseInSwitch(4)); // empty string\n</code></pre> * Case with multiple values:</p> <pre><code>function sequentialSizes(val) {\n    let answer = \"\";\n\n    switch (val) {\n        case 1:\n        case 2:\n            answer = \"Low\";\n            break;\n        case 3:\n        case 4:\n            answer = \"Mid\";\n            break;\n        case 5:\n            answer = \"High\";\n            break;\n    }\n\n    return answer;\n}\n\n// obvious how this works with, e.g., console.log(sequentialSizes(1));\n</code></pre>"},{"location":"webdev_snippets/#return-early-pattern-for-functions","title":"Return Early Pattern for Functions","text":"<ul> <li>Example:</li> </ul> <pre><code>function abTest(a, b) {\n    if (a &lt; 0 || b &lt; 0) {\n        return undefined;\n    }\n\n    return Math.round(Math.pow(Math.sqrt(a) + Math.sqrt(b), 2));\n}\n\nconsole.log(abTest(2, 2)); // 8\nconsole.log(abTest(-2, 2)); // undefined\nconsole.log(abTest(2, -2)); // undefined\nconsole.log(abTest(2, 8)); // 18\n</code></pre>"},{"location":"webdev_snippets/#if-conditions","title":"!if-conditions","text":"<p>This section uses concepts covered in Objects.  There are a number of more efficient ways to express if-conditions.  </p>"},{"location":"webdev_snippets/#falsy-vs-nullish-values","title":"Falsy vs Nullish Values","text":"<p>A value is considered falsy if it converts to  false  when evaluated in a boolean context, such as within an if  statement or after applying the logical NOT operator ( ! ).  </p> <p>\"Nullish\" typically refers to the values  null  and  undefined , which represent the absence of a meaningful value or the non-existence of a value. </p> <p>All nullish values are falsy, but not all falsy values are nullish.  Non-nullish falsy values (0, false, NaN, \"\") do represent some sort of extant value, whereas nullish values represent the absence of a value. </p> <ul> <li> <p>Falsy values in javascript:</p> <pre><code>false;\n0;\nundefined;\nnull;\nNaN;\n\"\";\n</code></pre> </li> <li> <p>Nullish values in javascript:</p> <pre><code>null;\nundefined;\n</code></pre> </li> </ul>"},{"location":"webdev_snippets/#optional-chaining","title":"Optional Chaining","text":"<p>If you try to access a property of an object that doesn't exist, you will get an error. This can be avoided by using the optional chaining operator (<code>?.</code>) This is similar to <code>my_dict.get(\"key\")</code> in python...it's a try...except on a dict lookup where the except returns <code>undefined</code> (<code>None</code> in python)</p> <pre><code>const user = {\n    details: {\n        name: {\n            firstName: \"Sam\"\n        }\n    },\n    data: null\n}\n\nuser.details?.name?.firstName; // \"Sam\"\nuser?.details?.name?.firstName; // \"Sam\" -- use this if you don't know if user is an object. however this will return undefined if user doesn't exist.\nuser.data?.id; // undefined\nuser.children?.names; // undefined\nuser.details?.parent?.firstName; // undefined\n</code></pre> <p>Can be used with bracket notation, but you have to use the bracket notation for the entire chain.  </p> <pre><code>user[\"details\"]?.[\"name\"]?.[\"firstName\"]; // \"Sam\"\n</code></pre>"},{"location":"webdev_snippets/#nullish-coalescing-operator","title":"Nullish Coalescing Operator","text":"<p>Similar to the optional chaining operator, the nullish coalescing operator (<code>??</code>) returns the right-hand side operand if the left-hand side operand is <code>null</code> or <code>undefined</code>.  </p> <pre><code>const getName = name =&gt; {\n    return name ?? \"N/A\";\n}\n\nconsole.log(getName(\"Sam\")); // \"Sam\"\nconsole.log(getName(undefined)); // \"N/A\"\nconsole.log(getName(null)); // \"N/A\"\n</code></pre> <p>In some cases this can be used in place of an if-else or the ternary operator </p> <pre><code>// Example 1:\n// if-else\nconst getName = name =&gt; {\n    if (name) {\n        return name;\n    } else {\n        return \"N/A\";\n    }\n}\n// ternary operator\nconst getName = name =&gt; name ? name : \"N/A\";\nconst getName = name =&gt; !!name ? name : \"N/A\";\n// nullish coalescing operator\nconst getName = name =&gt; name ?? \"N/A\";\n\n// Example 2:\n// if-else:\nconst getWelcomeMessage = user =&gt; {\n    if (user.fullName) {\n        return `Welcome ${user.fullName}`;\n    } else {\n        return \"Welcome user\";\n    }\n}\n// ternary operator\nconst getWelcomeMessage = user =&gt; `Welcome ${user.fullName ? user.fullName : 'user'}`;\n// nullish coalescing operator\nconst getWelcomeMessage = user =&gt; `Welcome ${user.fullName ?? 'user'}`;\n</code></pre> <p>Note that this employs \"short-circuiting\" -- if the left-hand side operand is not <code>null</code> or <code>undefined</code>, the right-hand side operand is not evaluated.  </p> <pre><code>const getPlaceholder = () =&gt; {\n    console.log(\"getPlaceholder called\");\n    return \"N/A\";\n}\n\nconst sayHello = name =&gt; {\n    return `Hello ${name ?? getPlaceholder()}`;\n}\n\nconsole.log(sayHello(\"Sam\")); // \"Hello Sam\"\n</code></pre> <p>Can be used together with optional chaining: </p> <pre><code>const translations = {\n    welcome: {\n        dutch: \"Welkom\",\n        french: \"Bienvenue\",\n        english: \"Welcome\"\n    }\n}\n\nconst getTranslation = (language) =&gt; translations[\"welcome\"]?.[language] ?? translations[\"welcome\"].english;\n</code></pre>"},{"location":"webdev_snippets/#object-nullish-coalescing","title":"Object + Nullish Coalescing","text":"<pre><code>const getPushMessage = status =&gt; {\n    if (status === \"received\") {\n        return \"Restaurant started working on your order.\";\n    } else if (status === \"prepared\") {\n        return \"Driver is picking up your food.\"\n    } else if (status === \"en_route\") {\n        return \"Driver is cycling your way!\";\n    } else if (status === \"arrived\") {\n        return \"Enjoy your food!\";\n    } else {\n        return \"Unknown status\";\n    }\n}\n\nconsole.log(getPushMessage(\"received\")); // \"Restaurant started working on your order.\"\n</code></pre> <pre><code>const getPushMessage = status =&gt; {\n    const messages = {\n        received: \"Restaurant started working on your order.\",\n        prepared: \"Driver is picking up your food.\",\n        en_route: \"Driver is cycling your way!\",\n        arrived: \"Enjoy your food!\"\n    };\n\n    return messages[status] ?? \"Unknown status\";\n}\n\nconsole.log(getPushMessage(\"received\")); // \"Restaurant started working on your order.\"\n</code></pre>"},{"location":"webdev_snippets/#javascript-objects","title":"JavaScript Objects","text":"<ul> <li>Objects are more similar to python dictionaries than to python objects</li> <li>They are similar to JavaScript arrays except that the index keys (\"properties\") are strings</li> <li>Simmple example:</li> </ul> <pre><code>let myDog = {\n    name: \"Spot\",\n    legs: 4,\n    tails: 1,\n    friends: [\"Rover\", \"Fido\"]\n};\n\nconsole.log(myDog.name); // or myDog[\"name\"]\nconsole.log(myDog.legs); // or myDog[\"legs\"]\nconsole.log(myDog.tails); // 1\nconsole.log(myDog.friends); // [ 'Rover', 'Fido' ]\n\nconsole.log(myDog.name); // Spot\n</code></pre>"},{"location":"webdev_snippets/#updating-object-properties","title":"Updating Object Properties","text":"<pre><code>myDog.name = \"Happy Spot\";\nconsole.log(myDog.name); // Happy Spot\n</code></pre>"},{"location":"webdev_snippets/#add-new-properties-to-a-javascript-object","title":"Add New Properties to a JavaScript Object","text":"<pre><code>myDog.bark = \"woof\";\nconsole.log(myDog.bark); // woof\n</code></pre>"},{"location":"webdev_snippets/#delete-properties-from-a-javascript-object","title":"Delete Properties from a JavaScript Object","text":"<pre><code>delete myDog.bark;\nconsole.log(myDog.bark); // undefined\n</code></pre>"},{"location":"webdev_snippets/#accessing-object-properties-with-variables","title":"Accessing Object Properties with Variables","text":"<p>Note 1: JS objects aren't exactly like python dicts because the properties (keys) are not enclosed in quotes. Note 2: Note that so far we have been accessing property values explicitly providing the property name (key) via dot notation </p> <p>In order to access a property value using a variable, we have to use bracket notation: </p> <pre><code>let propertyName = \"friends\";\nconsole.log(myDog[propertyName]); // [ 'Rover', 'Fido' ]\n</code></pre>"},{"location":"webdev_snippets/#objectkeys","title":"Object.keys()","text":"<p>Note 3: Another difference from python dicts -- to get an object's keys, we call call the <code>.keys()</code> method of the built-in global variable <code>Object</code> </p> <pre><code>console.log(Object.keys(myDog)); // [ 'name', 'legs', 'tails', 'friends' ]\n</code></pre> <p>We've seen this before with <code>Number.parseInt()</code>, <code>Math.random()</code>, <code>console.log()</code>, etc.</p>"},{"location":"webdev_snippets/#using-objects-for-lookups","title":"Using Objects for Lookups","text":"<pre><code>// Can be used like a switch statement (keys must be strings)\n// (like a python dictionary)\nfunction phoneticLookup(val) {\n    let result = \"\";\n\n    let lookup = {\n        alpha: \"Adams\",\n        bravo: \"Boston\",\n        charlie: \"Chicago\",\n        delta: \"Denver\",\n        echo: \"Easy\",\n        foxtrot: \"Frank\",\n    };\n\n    result = lookup[val];\n\n    return result;\n}\n\nconsole.log(phoneticLookup(\"charlie\")); // Chicago\n</code></pre>"},{"location":"webdev_snippets/#testing-objects-for-properties","title":"Testing Objects for Properties","text":"<pre><code>// Similar to python's `in` operator\nfunction checkObj(obj, checkProp) {\n    if (obj.hasOwnProperty(checkProp)) {\n        return obj[checkProp];\n    } else {\n        return \"Not Found\";\n    }\n}\n</code></pre>"},{"location":"webdev_snippets/#nested-objects","title":"Nested Objects","text":"<pre><code>let myStorage = {\n    car: {\n        inside: {\n            \"glove box\": \"maps\",\n            \"passenger seat\": \"crumbs\",\n        },\n        outside: {\n            trunk: \"jack\",\n        },\n    },\n};\n\nlet gloveBoxContents = myStorage.car.inside[\"glove box\"];\nconsole.log(gloveBoxContents); // maps\n</code></pre>"},{"location":"webdev_snippets/#accessing-nested-arrays","title":"Accessing Nested Arrays","text":"<pre><code>let myPlants = [\n    {\n        type: \"flowers\",\n        list: [\"rose\", \"tulip\", \"dandelion\"],\n    },\n    {\n        type: \"trees\",\n        list: [\"fir\", \"pine\", \"birch\"],\n    },\n];\n\nlet secondTree = myPlants[1].list[1];\nconsole.log(secondTree); // pine\n</code></pre>"},{"location":"webdev_snippets/#looping","title":"Looping","text":""},{"location":"webdev_snippets/#while-loops","title":"While Loops","text":"<pre><code>let myArray = [];\nlet i = 0;\nwhile (i &lt; 5) {\n    myArray.push(i);\n    i++;\n}\nconsole.log(myArray); // [ 0, 1, 2, 3, 4 ]\n</code></pre>"},{"location":"webdev_snippets/#for-loops","title":"For Loops","text":"<pre><code>let myArray = [];\nfor (let i = 0; i &lt; 5; i++) {\n    myArray.push(i);\n}\nconsole.log(myArray); // [ 0, 1, 2, 3, 4 ]\n</code></pre>"},{"location":"webdev_snippets/#foreach-loops_1","title":"forEach Loops","text":"<p>Here a callback is used (where the callback is defined in-line)  </p> <pre><code>const xArray = [10, 6, 8];\n\nxArray.forEach(function(x) {\n    console.log(x);\n})\n</code></pre> <p>In other words, the first arg of the callback definition is used to specify the \"dynamic variable name\" used for the array elements Using an arrow function, the syntax is more elegant: </p> <pre><code>const xArray = [10, 6, 8];\n\nxArray.forEach((x) =&gt; {\n    console.log(x);\n})\n</code></pre>"},{"location":"webdev_snippets/#iterate-through-an-array-with-a-for-loop","title":"Iterate Through an Array with a For Loop","text":"<pre><code>let myArr = [2, 3, 4, 5, 6];\nlet total = 0;\nfor (let i = 0; i &lt; myArr.length; i++) {\n    total += myArr[i];\n}\nconsole.log(total); // 20\n</code></pre> <p>OR (using <code>forEach</code>)  </p> <pre><code>let myArr = [2, 3, 4, 5, 6];\nlet total = 0;\nmyArr.forEach(function(element) {\n    total += element\n})\nconsole.log(total) // 20\n</code></pre>"},{"location":"webdev_snippets/#nesting-for-loops","title":"Nesting For Loops","text":"<pre><code>function multiplyAll(arr) {\n    let product = 1;\n    for (let i = 0; i &lt; arr.length; i++) {\n        for (let j = 0; j &lt; arr[i].length; j++) {\n            product *= arr[i][j];\n        }\n    }\n    return product;\n}\n\nlet product = multiplyAll([\n    [1, 2],\n    [3, 4],\n    [5, 6, 7],\n]);\n\nconsole.log(product); // 5040\n</code></pre>"},{"location":"webdev_snippets/#dowhile-loops","title":"Do...While Loops","text":"<pre><code>let myArray = [];\nlet i = 10;\ndo {\n    myArray.push(i);\n    i++;\n} while (i &lt; 5);\nconsole.log(i, myArray); // 10 [ 10 ]\n</code></pre> <ul> <li>The above code will run once even though the condition is false</li> <li>So it will push <code>10</code> to <code>myArray</code> and increment <code>i</code> to <code>11</code> then exit the loop</li> <li>This is useful when you want to run the loop at least once</li> </ul>"},{"location":"webdev_snippets/#profile-lookup","title":"Profile Lookup","text":"<pre><code>let contacts = [\n    {\n        firstName: \"Akira\",\n        lastName: \"Laine\",\n        number: \"0543236543\",\n        likes: [\"Pizza\", \"Coding\", \"Brownie Points\"],\n    },\n    {\n        firstName: \"Harry\",\n        lastName: \"Potter\",\n        number: \"0994372684\",\n        likes: [\"Hogwarts\", \"Magic\", \"Hagrid\"],\n    },\n    {\n        firstName: \"Sherlock\",\n        lastName: \"Holmes\",\n        number: \"0487345643\",\n        likes: [\"Intriguing Cases\", \"Violin\"],\n    },\n    {\n        firstName: \"Kristian\",\n        lastName: \"Vos\",\n        number: \"unknown\",\n        likes: [\"JavaScript\", \"Gaming\", \"Foxes\"],\n    },\n];\n\nfunction lookUpProfile(name, prop) {\n    for (let i = 0; i &lt; contacts.length; i++) {\n        if (contacts[i].firstName === name) {\n            if (contacts[i].hasOwnProperty(prop)) { // or, equivalently, `if (contacts[i][prop])` bc `undefined` is falsy\n                return contacts[i][prop];\n            } else {\n                return \"No such property\";\n            }\n        }\n    }\n    return \"No such contact\";\n}\n\nconsole.log(lookUpProfile(\"Akira\", \"likes\")); // [ 'Pizza', 'Coding', 'Brownie Points' ]\nconsole.log(lookUpProfile(\"Kristian\", \"lastName\")); // Vos\n</code></pre> <ul> <li>Other falsy values in JavaScript are <code>false</code>, <code>0</code>, <code>\"\"</code>, <code>null</code>, <code>undefined</code>, and <code>NaN</code></li> </ul>"},{"location":"webdev_snippets/#constructor-functions","title":"Constructor Functions","text":""},{"location":"webdev_snippets/#purpose","title":"Purpose","text":"<p>As noted, JavaScript objects are similar to python dictionaries. However, they are not as flexible as python dictionaries. For example, you can't add a new key-value pair to a JavaScript object after it's been created. This is where constructor functions come in. They are used to create multiple objects of the same type. They are similar to classes in other languages.</p> <ul> <li>Constructor functions are used to create objects</li> <li>They are similar to classes in other languages</li> <li>They are used to create multiple objects of the same type</li> <li>They are used to create objects with the same properties but different values</li> </ul> <p>Long story short:</p> <ul> <li>objects are like python dictionaries<ul> <li>except once they're created you can't add new key-value pairs</li> </ul> </li> <li>constructor functions are like python class definitions</li> <li>constructor functions are invoked to create objects</li> </ul> <p>So objects are like python dictionaries and constructor functions are like python class definitions. But objects created using constructor functions ARE similar to python objects. * They are similar to python objects in that they can have methods and properties (and methods can be used to change properties)</p>"},{"location":"webdev_snippets/#syntax","title":"Syntax","text":"<p>Notice how it is truly a FUNCTION and is title-cased</p> <pre><code>function Dog() {\n    this.name = \"Spot\";\n    this.color = \"brown\";\n    this.numLegs = 4;\n}\n</code></pre> <ul> <li>The <code>this</code> keyword is used to refer to the current object</li> <li>The <code>new</code> keyword is used to create a new object from the constructor function</li> <li>The <code>new</code> keyword creates an instance of the object</li> </ul>"},{"location":"webdev_snippets/#invoking-a-constructor-function","title":"Invoking a Constructor Function","text":"<pre><code>let hound = new Dog();\nconsole.log(hound); // Dog { name: 'Spot', color: 'brown', numLegs: 4 }\n</code></pre>"},{"location":"webdev_snippets/#extending-constructors-to-receive-arguments","title":"Extending Constructors to Receive Arguments","text":"<pre><code>function Dog(name, color) {\n    this.name = name;\n    this.color = color;\n    this.numLegs = 4;\n}\n\nlet hound = new Dog(\"Spot\", \"brown\");\nconsole.log(hound); // Dog { name: 'Spot', color: 'brown', numLegs: 4 }\n</code></pre>"},{"location":"webdev_snippets/#verify-an-objects-constructor-with-instanceof","title":"Verify an Object's Constructor with instanceof","text":"<pre><code>function House(numBedrooms) {\n    this.numBedrooms = numBedrooms;\n}\n\nlet myHouse = new House(4);\nconsole.log(myHouse instanceof House); // true\n</code></pre>"},{"location":"webdev_snippets/#understand-own-properties","title":"Understand Own Properties","text":"<pre><code>function Bird(name) {\n    this.name = name;\n    this.numLegs = 2;\n}\n\nlet canary = new Bird(\"Tweety\");\nlet ownProps = [];\nfor (let property in canary) {\n    if (canary.hasOwnProperty(property)) {\n        ownProps.push(property);\n    }\n}\nconsole.log(ownProps); // [ 'name', 'numLegs' ]\n</code></pre>"},{"location":"webdev_snippets/#use-prototype-properties-to-reduce-duplicate-code","title":"Use Prototype Properties to Reduce Duplicate Code","text":"<p>Prototype properties are shared among all instances of an object. These are how new properties and methods are added to constructor functions post-declaration.</p> <pre><code>function Dog(name) {\n    this.name = name;\n}\n\nDog.prototype.numLegs = 4; // this is allowing all Dog objects to have the numLegs property (even though it's not defined in the constructor function)\n\nlet beagle = new Dog(\"Snoopy\");\nconsole.log(beagle.numLegs); // 4\n</code></pre>"},{"location":"webdev_snippets/#iterate-over-all-properties","title":"Iterate Over All Properties","text":"<pre><code>function Dog(name) {\n    this.name = name;\n}\n\nDog.prototype.numLegs = 4;\n\nlet beagle = new Dog(\"Snoopy\");\n\nlet ownProps = [];\nlet prototypeProps = [];\n\nfor (let property in beagle) {\n    if (beagle.hasOwnProperty(property)) {\n        ownProps.push(property);\n    } else {\n        prototypeProps.push(property);\n    }\n}\n\nconsole.log(ownProps); // [ 'name' ]\nconsole.log(prototypeProps); // [ 'numLegs' ]\n</code></pre>"},{"location":"webdev_snippets/#object-methods","title":"Object Methods","text":"<ul> <li>Methods are functions that are stored as object properties</li> <li>They are defined in the same way as regular functions</li> <li>They are invoked using the dot notation</li> <li>They can be used to change object properties</li> </ul>"},{"location":"webdev_snippets/#example","title":"Example","text":"<pre><code>let dog = {\n    name: \"Spot\",\n    numLegs: 4,\n    sayLegs: function () {\n        return \"This dog has \" + dog.numLegs + \" legs.\";\n    },\n};\n\nconsole.log(dog.sayLegs()); // This dog has 4 legs.\n</code></pre>"},{"location":"webdev_snippets/#built-in-functions-random-numbers-int-to-string-conversion","title":"Built-In Functions: Random Numbers &amp; Int-to-String Conversion","text":""},{"location":"webdev_snippets/#generate-random-fractions-with-javascript","title":"Generate Random Fractions with JavaScript","text":"<pre><code>function randomFraction() {\n    return Math.random();\n}\n\nconsole.log(randomFraction()); // 0.12345678901234567\n</code></pre>"},{"location":"webdev_snippets/#generate-random-whole-numbers-with-javascript","title":"Generate Random Whole Numbers with JavaScript","text":"<pre><code>function randomWholeNum() {\n    return Math.floor(Math.random() * 10);\n}\n\nconsole.log(randomWholeNum()); // 7\n</code></pre>"},{"location":"webdev_snippets/#generate-random-whole-numbers-within-a-range","title":"Generate Random Whole Numbers within a Range","text":"<pre><code>function randomRange(myMin, myMax) {\n    // The below line basically generates a random number between 0 and 1\n    // and then scales it to be between myMin and myMax\n    // (offsets are necessary to include myMin and myMax)\n    return Math.floor(Math.random() * (myMax - myMin + 1)) + myMin;\n}\n\n    console.log(randomRange(5, 15)); // 10\n</code></pre>"},{"location":"webdev_snippets/#use-the-parseint-function","title":"Use the parseInt Function","text":"<pre><code>function convertToInteger(str) {\n    return parseInt(str);\n}\n\nconsole.log(convertToInteger(\"56\")); // 56\n</code></pre>"},{"location":"webdev_snippets/#use-the-parseint-function-with-a-radix","title":"Use the parseInt Function with a Radix","text":"<pre><code>function convertToInteger(str) {\n    return parseInt(str, 2);\n}\n\nconsole.log(convertToInteger(\"10011\")); // 19\n</code></pre> <ul> <li>The radix is the base of the number in the string</li> <li>Basically this is showing how to convert a binary number to a decimal number</li> </ul>"},{"location":"webdev_snippets/#recursion","title":"Recursion","text":""},{"location":"webdev_snippets/#sum-first-n-array-elements","title":"Sum first n array elements","text":"<pre><code>function sum(arr, n) {\n  if (n === 0) { // base case -- n === 0\n    return 0;\n  } else { // recursive case -- n &gt; 0\n    console.log(`n: ${n} --&gt; n-1: ${n-1} --&gt; arr[n-1]: ${arr[n-1]}`)\n    return sum(arr, n-1) + arr[n-1] // KEY: n-1 is used to access the 0th element just before base case is hit\n  }\n}\n\nconsole.log(sum([1,2,3,4,5,6,7],4)) // 10\n// n: 4 --&gt; n-1: 3 --&gt; arr[n-1]: 4\n// n: 3 --&gt; n-1: 2 --&gt; arr[n-1]: 3\n// n: 2 --&gt; n-1: 1 --&gt; arr[n-1]: 2\n// n: 1 --&gt; n-1: 0 --&gt; arr[n-1]: 1\n\n// Stack Trace:\n// sum([1,2,3,4,5,6,7],4)\n//                    \\                                       \n//                      ----------------------------------------\n//                                                               \\\n//                                                                 \\\n//                                                                   \\\n// sum([1,2,3,4,5,6,7],4-1) + arr[4-1]  --&gt; sum([1,2,3,4,5,6,7], 3) + 4\n//                                                           \\ \n//                                                             \\\n//                                                               \\\n//                                                                 \\\n//                                                                   \\\n// sum([1,2,3,4,5,6,7],3-1) + arr[3-1]  --&gt; sum([1,2,3,4,5,6,7], 2) + 3\n//                                                           \\ \n//                                                             \\\n//                                                               \\\n//                                                                 \\\n//                                                                   \\\n// sum([1,2,3,4,5,6,7],2-1) + arr[2-1]  --&gt; sum([1,2,3,4,5,6,7], 1) + 2\n//                                                           \\ \n//                                                             \\\n//                                                               \\\n//                                                                 \\\n//                                                                   \\\n// sum([1,2,3,4,5,6,7],1-1) + arr[1-1]  --&gt; sum([1,2,3,4,5,6,7], 0) + 1\n//                                          /\n//                                      /\n//                                  /\n//                              /\n// sum([1,2,3,4,5,6,7],0) --&gt; 0\n</code></pre>"},{"location":"webdev_snippets/#using-recursion-to-create-a-countdown","title":"Using recursion to create a countdown","text":"<pre><code>function countdown(n) {\n    if (n &lt; 1) { // base case\n        return [];\n    } else { // recursive case\n        const countArray = countdown(n - 1);\n        countArray.unshift(n);\n        return countArray;\n    }\n}\n\nconsole.log(countdown(5)); // [ 1, 2, 3, 4, 5 ]\n</code></pre> <ul> <li>The <code>unshift</code> is adding the current value of <code>n</code> to the beginning of the array</li> <li>Like in all recursive functions:<ul> <li>the base case is the first <code>if</code> statement</li> <li>the recursive case is the <code>else</code> statement</li> <li>the call stack is used to manage the values of <code>n</code> as the function is called recursively<ul> <li>the call stack is then used to build the array in the reverse order of the recursive calls</li> </ul> </li> </ul> </li> </ul>"},{"location":"webdev_snippets/#using-recursion-to-create-a-range-of-numbers","title":"Using recursion to create a range of numbers","text":"<pre><code>function rangeOfNumbers(startNum, endNum) {\n    if (startNum === endNum) { // base case\n        return [startNum];\n    } else { // recursive case\n        const countArray = rangeOfNumbers(startNum, endNum - 1);\n        countArray.push(endNum);\n        return countArray;\n    }\n}\n\nconsole.log(rangeOfNumbers(1, 5)); // [ 1, 2, 3, 4, 5 ]\n</code></pre> <ul> <li>The <code>push</code> is adding the current value of <code>endNum</code> to the end of the array</li> <li>Like in all recursive functions:<ul> <li>the base case is the first <code>if</code> statement</li> <li>the recursive case is the <code>else</code> statement</li> <li>the call stack is used to manage the values of <code>endNum</code> as the function is called recursively<ul> <li>the call stack is then used to build the array in the correct order of the recursive calls</li> </ul> </li> </ul> </li> </ul>"},{"location":"webdev_snippets/#useful-javascript-built-in-functions","title":"Useful JavaScript Built-in Functions","text":"<ul> <li>Notice lines line objectName[i].hasOwnProperty(propName) in the Profile Lookup example above<ul> <li>Useful examples:<ul> <li>These were used in the examples:<ul> <li><code>arrayName.length</code></li> <li><code>arrayName.push(value)</code> (adds <code>value</code> to the end of the array)</li> <li><code>arrayName.pop()</code> (removes the last element of the array)</li> <li><code>arrayName.shift()</code> (removes the first element of the array)</li> <li><code>arrayName.unshift(value)</code> (adds <code>value</code> to the beginning of the array)</li> <li><code>stringName.length</code></li> <li><code>Math.random()</code> (generates a random number between 0 and 1)</li> <li><code>Math.floor()</code> (rounds down to the nearest integer)</li> </ul> </li> <li>These are some others:<ul> <li> <p>Strings:</p> <ul> <li><code>stringName.toUpperCase()</code></li> <li><code>stringName.toLowerCase()</code></li> <li><code>stringName.split(\" \")</code></li> <li><code>stringName.split(\"\")</code> (splits into an array of characters)</li> <li><code>stringName.length</code></li> <li><code>stringName[0]</code> (returns the first character)<ul> <li>Or <code>stringName.charAt(0)</code></li> </ul> </li> <li> <p><code>concat</code> (concatenates strings)</p> <ul> <li> <p>Usage:</p> <pre><code>let string1 = \"Hello \";\nlet string2 = \"World!\";\nlet string3 = string1.concat(string2);\nconsole.log(string3); // Hello World!\n</code></pre> </li> </ul> </li> <li> <p><code>stringName.endsWith(\"string\")</code> (returns <code>true</code> if the string ends with the specified string)</p> </li> <li><code>stringName.includes(\"string\")</code> (returns <code>true</code> if the string includes the specified string)</li> <li><code>stringName.replace(\"string\", \"newString\")</code> (replaces the first occurrence of the string with the new string)</li> <li><code>stringName.replaceAll(\"string\", \"newString\")</code> (replaces the all occurrences of the string with the new string)</li> <li><code>stringName.search(\"string\")</code> (returns the index of the first occurrence of the string)</li> <li><code>stringName.startsWith(\"string\")</code> (returns <code>true</code> if the string starts with the specified string)</li> <li>Slicing and splitting are same as for arrays. Or:<ul> <li><code>stringName.substr(0, 5)</code> (returns the first 5 characters of the string)</li> <li><code>stringName.substring(0, 5)</code> (returns the first 5 characters of the string)</li> </ul> </li> <li><code>stringName.toLowerCase()</code> (converts to lowercase)</li> <li><code>stringName.toUpperCase()</code> (converts to uppercase)</li> <li><code>stringName.trim()</code> (removes whitespace from both ends of the string)             * Arrays:</li> <li><code>arrayName.join(\" \")</code> (joins an array of strings into a single string)</li> <li><code>arrayName.join(\"\")</code> (joins an array of characters into a single string)</li> <li><code>arrayName.indexOf(\" \")</code> (returns the index of the first occurrence of the string)</li> <li><code>arrayName.lastIndexOf(\" \")</code> (returns the index of the last occurrence of the string)</li> <li>CAREFUL NOT TO CONFUSE <code>.slice</code> with <code>.splice</code></li> <li><code>arrayName.slice(0, 5)</code> (returns the first 5 elements of the array)<ul> <li>Similar to python this is \"up to but not including\"</li> </ul> </li> <li><code>arrayName.slice(5)</code> (returns the last 5 elements of the array)</li> <li><code>arrayName.slice(2, 5)</code> (returns the 3rd, 4th, and 5th elements of the array)</li> <li><code>arrayName.splice(2, 3)</code> (REMOVES/DELETES the 3rd, 4th, and 5th elements of the array and returns them)<ul> <li>e.g. <code>const deletedItem = items.splice(0, 1);</code> -- this removes the first item from the array and assigns it to <code>deletedItem</code></li> <li>Note that the behavior of this is kind of weird -- to remove the second element you would use <code>arrayName.splice(1, 1)</code><ul> <li>This is the call signature: <code>array.splice(startIndex, deleteCount)</code></li> </ul> </li> <li>Deleting/emptying full arrays can also be done by setting <code>arrayName.length = 0</code></li> </ul> </li> <li><code>arrayName.sort()</code> (sorts the array)</li> <li><code>arrayName.reverse()</code> (reverses the order of the array)</li> <li><code>arrayName.every(</code>[conditionExpressedAsCallback]<code>)</code> (returns true if all elements meet specified condition)<ul> <li>e.g. <code>numbersArray.every(number =&gt; number &gt;= 10)</code></li> </ul> </li> <li><code>arrayName.some(</code>[conditionExpressedAsCallback]<code>)</code> (returns true if any elements meet specified condition)<ul> <li>e.g. <code>numbersArray.some(number =&gt; number &gt; 10)</code>         * Math:</li> </ul> </li> <li><code>Math.random()</code> (generates a random number between 0 and 1)</li> <li><code>Math.floor()</code> (rounds down to the nearest integer)</li> <li><code>Math.ceil()</code> (rounds up to the nearest integer)</li> <li> <p><code>Math.round()</code> (rounds to the nearest integer)</p> <ul> <li>To round to a specific number of decimal places, multiply by 10 to the power of that number of decimal places, round, and then divide by 10 to the power of that number of decimal places (same as any language)<ul> <li> <p>E.g. to round to 2 decimal places:</p> <pre><code>let num = 2.12345;\nnum = Math.round(num * 100) / 100; \n// || `Math.round(num * 10**2) / 10**2` \n// || `Math.round(num * Math.pow(10, 2)) / Math.pow(10, 2)`\n// let desiredNumOfDecimalPlaces = 2; Math.round(num * 10**desiredNumOfDecimalPlaces) / 10**desiredNumOfDecimalPlaces;\nconsole.log(num); // 2.12\n</code></pre> </li> </ul> </li> </ul> </li> <li> <p><code>Math.abs()</code> (returns the absolute value)</p> </li> <li><code>Math.pow(base, exponent)</code> (returns <code>base</code> to the power of <code>exponent</code>)</li> <li><code>Math.sqrt()</code> (returns the square root)</li> <li><code>Math.max()</code> (returns the maximum value)</li> <li><code>Math.min()</code> (returns the minimum value)</li> <li><code>Math.floor(Math.random() * 10)</code>             * Dates:</li> <li><code>Date()</code> (returns the current date)</li> <li><code>Date.now()</code> (returns the number of milliseconds since January 1, 1970)<ul> <li>This is useful for timing things</li> </ul> </li> <li><code>Date.parse(\"June 1, 2021\")</code> (returns the number of milliseconds since January 1, 1970)</li> <li><code>Date.UTC(2021, 5, 1)</code> (returns the number of milliseconds since January 1, 1970 in UTC)</li> <li><code>Date.prototype.getFullYear()</code> (returns the year)</li> <li><code>Date.prototype.getMonth()</code> (returns the month)</li> <li><code>Date.prototype.getDate()</code> (returns the day of the month)</li> <li><code>Date.prototype.getDay()</code> (returns the day of the week)</li> <li><code>Date.prototype.getHours()</code> (returns the hour)</li> <li><code>Date.prototype.getMinutes()</code> (returns the minute)</li> <li><code>Date.prototype.getSeconds()</code> (returns the second)</li> <li><code>Date.prototype.getTime()</code> (returns the number of milliseconds since January 1, 1970)</li> <li><code>Date.prototype.getUTCFullYear()</code> (returns the year in UTC)</li> <li><code>Date.prototype.getUTCMonth()</code> (returns the month in UTC)</li> <li><code>Date.prototype.getUTCDate()</code> (returns the day of the month in UTC)</li> <li><code>Date.prototype.getUTCDay()</code> (returns the day of the week in UTC)</li> <li><code>Date.prototype.getUTCHours()</code> (returns the hour in UTC)</li> <li><code>Date.prototype.getUTCMinutes()</code> (returns the minute in UTC)</li> <li><code>Date.prototype.getUTCSeconds()</code> (returns the second in UTC)</li> <li><code>Date.prototype.getUTCMilliseconds()</code> (returns the millisecond in UTC)</li> <li><code>Date.prototype.getTimezoneOffset()</code> (returns the local time zone offset from UTC in minutes)</li> <li><code>Date.prototype.setFullYear()</code> (sets the year)<ul> <li>Setting dates is necessary when you want to change the date (e.g. when working )</li> <li>Similar functions exist for all of the above increments</li> </ul> </li> <li><code>Date.prototype.toDateString()</code> (converts to a string)</li> <li><code>Date.prototype.toISOString()</code> (converts to a string in ISO format)</li> <li><code>Date.prototype.toJSON()</code> (converts to a string in JSON format)</li> <li><code>Date.prototype.toLocaleDateString()</code> (converts to a string using the current locale)</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"webdev_snippets/#chaining-array-and-string-methods-to-generate-html-text","title":"Chaining Array and String methods to generate HTML text","text":"<p>Chaining <code>array.map()</code> + <code>.join()</code> can be useful for generating strings in a desired format (e.g. csv): </p> <pre><code>const users = [{\n    id: 1,\n    name: \"Sam Doe\"\n}, {\n    id: 2,\n    name: \"Alex Blue\"\n}];\n\nconst csv = users.map(user =&gt; user.name).join(\", \");\nconsole.log(csv); // \"Sam Doe, Alex Blue\"\n</code></pre> <p>This is frequently used in frameworks like React to generate HTML text: </p> <pre><code>const html = `&lt;ul&gt;\n    ${users.map(user =&gt; `&lt;li&gt;${user.name}&lt;/li&gt;`).join(\"\")}\n    &lt;/ul&gt;`;\nconsole.log(html); // &lt;ul&gt; &lt;li&gt;Sam Doe&lt;/li&gt;&lt;li&gt;Alex Blue&lt;/li&gt; &lt;/ul&gt;\n</code></pre> <p>Why is the <code>.join(\"\")</code> necessary? It's because the browser automatically calls <code>.toString()</code> on the array returned by <code>.map()</code> --&gt; <code>\"&lt;ul&gt; &lt;li&gt;Sam Doe&lt;/li&gt;,&lt;li&gt;Alex Blue&lt;/li&gt; &lt;/ul&gt;\"</code>, which you want to preempt using the <code>.join(\"\")</code>.  </p> <p>Another example of this important pattern: </p> <pre><code>const data = [[\"Carbs\", \"17g\"], [\"Protein\", \"19g\"], [\"Fat\", \"5g\"]];\nconst html = renderTableRows(data);\nconst renderTableRows = rows =&gt; `&lt;tr&gt; \n    ${rows.map(row =&gt; `&lt;td&gt;${row[0]}&lt;/td&gt;&lt;td&gt;${row[1]}&lt;/td&gt; &lt;/tr&gt;`).join(\"\")}\n    &lt;/tr&gt;`;\n</code></pre> <p>The broader structure is just a normal <code>.map(</code>arrowFuncDefinition<code>)</code> within a template string within an outer arrow func definition.  But.  Note the nesting of the backticks and implicit return with multi-line template string. The <code>arrayParam.map().join()</code> is inside a parent set of backticks. There are also nested <code>${}</code>s. So it's: </p> <pre><code>const htmlText = outerArrayParam =&gt; ${outerArrayParam.map(arrayElement =&gt; `&lt;div&gt;${arrayElement.toLowerCase()}&lt;/div&gt;`).join(\"\")};\n</code></pre> <p>Or: </p> <pre><code>const htmlText = outerArrayParam =&gt; `&lt;ul&gt;\n    ${outerArrayParam.map(arrayElement =&gt; `&lt;li&gt;${arrayElement.toLowerCase()}&lt;/li&gt;`).join(\"\")}\n    &lt;/ul&gt;`\n</code></pre> <p>One final example to nail in the pattern: </p> <pre><code>const countries = [\"Netherlands\", \"Japan\", \"Mongolia\"];\nconst html = getDropdown(countries);\nconst getDropdown = (countries) =&gt; `&lt;option value=\"\"&gt;Please select&lt;/option&gt;\n    ${countries.map(country =&gt; `&lt;option value=${country.toLowerCase()}&gt;${country}&lt;/option&gt;`).join(\"\")}`\n</code></pre>"},{"location":"webdev_snippets/#es6","title":"ES6","text":""},{"location":"webdev_snippets/#use-arrow-functions-to-write-concise-anonymous-functions","title":"Use Arrow Functions to Write Concise Anonymous Functions","text":""},{"location":"webdev_snippets/#from-functions-to-arrow-functions","title":"From functions to arrow functions","text":"<p>This function...</p> <pre><code>function sum(a, b) {\n    return a+b;\n}\n</code></pre> <p>...can be re-written as:</p> <pre><code>const sum = function(a, b) {\n    return a+b;\n}\n</code></pre> <p>An arrow function is just the second syntax but removes the <code>function</code> keyword and points the function signature at the definition with an <code>=&gt;</code> </p> <pre><code>const sum = (a, b) =&gt; {\n    return a+b;\n}\n</code></pre> <p>This does not have to be assigned to a <code>const</code> variable. The function definition alone looks like this: </p> <pre><code>(a,b) =&gt; {\n    return a+b;\n}\n</code></pre> <p>When an arrow function has one parameter without a default value, you are allowed to drop the parentheses around that parameter: </p> <pre><code>const sum = a =&gt; {\n    return a+1;\n}\n</code></pre> <p>In the above, the function definition is <code>a =&gt; { return a+1; }</code>. We will see that this gives rise to the \"implicit return\" syntax <code>a =&gt; a+1;</code>: </p> <pre><code>let numbers = [-4, 3, -2, 5];\nnumbers.filter(number =&gt; number &gt;= 0); // [3, 5]\n</code></pre>"},{"location":"webdev_snippets/#implicit-return","title":"Implicit Return","text":"<p>Implicit Return definition - When using arrow functions, the <code>return</code> keyword can be omitted IFF the function body is a single statement (i.e. a single line).  If you omit the <code>return</code> keyword, you must also omit the curly braces. </p> <ul> <li>Normal arrow function: </li> </ul> <pre><code>// this works -- there are curly braces and a `return` keyword\nconst sum = (a, b) =&gt; {\n    return a + b;\n}\n\nsum(1, 3); // 4\n</code></pre> <ul> <li> <p>Arrow function with implicit return: <pre><code>// arrow function with implicit return -- no `return` and no {}\nconst sum = (a, b) =&gt; a + b;\n\nsum(1, 3); // 4\n</code></pre></p> </li> <li> <p>Invalid arrow function with implicit return: </p> </li> </ul> <pre><code>// doesn't work if you include the curly braces but omit the `return` keyword\nconst sum = (a, b) =&gt; {\n    a + b;\n}\n\nsum(1, 3); // undefined\n</code></pre> <p>Some examples of single parameter w/ no default argument + arrow function + implicit return: </p> <pre><code>const square = n =&gt; n * n;\nconst isLegal = age =&gt; age &gt;= 18;\nconst isEven = n =&gt; n % 2 === 0;\n</code></pre> <p>KEY Callback functions can be expressed as: </p> <pre><code>n =&gt; n * n;\nage =&gt; age &gt;= 18;\nn =&gt; n % 2 === 0;\n</code></pre> <p>Or: </p> <pre><code>function(n) {\n    return n * n;\n}\n\nfunction(age) {\n    return age &gt;= 18;\n}\n\nfunction(n) {\n    return n % 2 === 0;\n}\n</code></pre> <p>Or: </p> <pre><code>const square = function(n) {\n    return n * n;\n}\n\nconst isLegal = function(age) {\n    return age &gt;= 18;\n}\n\nconst isEven = function(n) {\n    return n % 2 === 0;\n}\n</code></pre> <p>The key is that:  * if you exclude either the <code>function</code> keyword or the curly braces, you must exclude both.  * if you exclude both, you can exclude the <code>return</code> keyword and put everything on one line. </p>"},{"location":"webdev_snippets/#more-detail-on-arrow-functions","title":"More detail on arrow functions:","text":"<p>Recall - normal function definition in JavaScript: * Named function:     * Named functions can be called anywhere in the code     * E.g. <code>function myFunction() { ... }</code> or <code>function myFunction(param1, param2) { ... }</code> or: <pre><code>function myFunction() {\n    ...\n}\n</code></pre></p> <ul> <li>Anonymous function:  <ul> <li>Anonymous functions can only be called after they are defined</li> <li>NOTICE the syntax of <code>const myFunction = function() { ... };</code> or <code>const myFunction = () =&gt; { ... };</code><ul> <li>It is assigned to a variable name and the function name is omitted</li> </ul> </li> <li>E.g. <code>const myFunction = function() { ... };</code> or <code>const myFunction = function(param1, param2) { ... };</code> or: <pre><code>const myFunction = function() {\n    ...\n}\n</code></pre></li> <li><code>const myFunction = function() { ... };</code> (function expression) is similar to <code>const myFunction = () =&gt; { ... };</code> (arrow function) but not identical<ul> <li><code>this</code> Behavior: In a traditional function (the first example), 'this' refers to the context in which the function was called. In contrast, in an arrow function (the second example), 'this' is lexically bound; it uses 'this' from the surrounding code where the function is defined. This means that inside an arrow function, 'this' refers to the context in which the arrow function was created, not where it is called.</li> <li>'arguments ' Object: Traditional functions provide an 'arguments' object, which is an array-like object containing all the arguments passed to the function. Arrow functions do not have their own 'arguments' object.</li> <li>Constructor Use: Traditional functions can be used as constructors with the 'new' keyword. Arrow functions cannot be used as constructors and will throw an error if used with 'new'.</li> <li>Method Definitions: If you're defining a method in an object, traditional functions are often preferred due to their dynamic 'this'. Arrow functions can be problematic in object methods if you need 'this' to refer to the object.</li> </ul> </li> </ul> </li> </ul> <p>Named functions are hoisted but anonymous functions are not.</p> <p>Anonymous (specifically arrow) functions should be used when you want to:</p> <ul> <li>Pass a function as an argument to another function</li> <li>Write a concise function</li> <li>Preserve the value of <code>this</code> in the context of the function</li> <li>Write a method in an object</li> <li>Write a constructor function</li> </ul> <p>Named functions should be used when you want to:</p> <ul> <li>Call a function before it is defined</li> <li>Use recursion</li> <li>Use closures</li> <li>Use callbacks</li> </ul> <p>Arrow functions are a concise way to write anonymous functions. The syntax is similar to python's lambda functions. The syntax looks like assigning a function with no name <code>()</code> to a variable and pointing to the lambda function with an arrow <code>=&gt;</code>. Use brackets when the \"lambda function\" has multiple lines.  </p> <pre><code>const magic = () =&gt; new Date(); // or `const magic = () =&gt; { return new Date(); };`\n</code></pre> <ul> <li>This similar to...</li> </ul> <pre><code>function magic() function() {\n    return new Date(); // Date() is a built-in function that returns the current date\n    // `new` is a keyword that creates an instance of the Date object.\n    // `new` is necessary bc Date() is a constructor function\n    // A constructor function is a function that creates an object. They are used with the `new` keyword.\n};\n</code></pre> <ul> <li>...EXCEPT the latter syntax gets hoisted but the former syntax does not</li> <li>Hoisting is the process of moving function declarations to the top of the file</li> <li>This means that the function can be called before it is defined</li> <li> <p>This is not possible with arrow functions</p> </li> <li> <p>Arrow functions are anonymous functions</p> <ul> <li>An anonymous function is a function that doesn't have a name -- it is typically stored in a variable</li> <li>E.g. <code>const myFunc = function() { ... };</code> is a named function but <code>const myFunc = () =&gt; { ... };</code> is an anonymous function</li> <li>The difference is that named functions can be called anywhere in the code but anonymous functions can only be called after they are defined</li> </ul> </li> <li>They are useful when you want to pass a function as an argument to another function or when you want to write a concise function</li> <li>They are also useful when you want to preserve the value of <code>this</code> in the context of the function.<ul> <li>E.g. <code>const myFunc = () =&gt; { this.value = 1; };</code> will set the value of <code>this</code> to the global object (i.e. <code>window</code> in the browser)</li> </ul> </li> <li>The <code>const</code> keyword is used to declare arrow functions<ul> <li>The reason for this is that arrow functions are anonymous functions so they must be stored in a variable</li> </ul> </li> </ul>"},{"location":"webdev_snippets/#write-arrow-functions-with-parameters","title":"Write Arrow Functions with Parameters","text":"<pre><code>const myConcat = (arr1, arr2) =&gt; arr1.concat(arr2);\n\nconsole.log(myConcat([1, 2], [3, 4, 5])); // [ 1, 2, 3, 4, 5 ]\n</code></pre> <ul> <li> <p>This is similar to:</p> <pre><code>const myConcat = function(arr1, arr2) {\n    return arr1.concat(arr2);\n};\n</code></pre> </li> </ul>"},{"location":"webdev_snippets/#implicit-return_1","title":"Implicit Return","text":"<p>Notice in the above example that the <code>return</code> keyword is omitted. This is because arrow functions can be written with an implicit return when they are written on a single line.</p> <p>When an arrow function is written with its body in a single line without curly braces {}, the return is implicit. That means the result of the expression following the arrow =&gt; is automatically returned. So:</p> <pre><code>const myConcat = (arr1, arr2) =&gt; arr1.concat(arr2);\n</code></pre> <p>is equivalent to:</p> <pre><code>const myConcat = (arr1, arr2) =&gt; {\n    return arr1.concat(arr2);\n};\n</code></pre>"},{"location":"webdev_snippets/#set-default-parameters-for-your-functions","title":"Set Default Parameters for Your Functions","text":"<pre><code>const increment = (number, value = 1) =&gt; number + value;\n\nconsole.log(increment(5, 2)); // 7\nconsole.log(increment(5)); // 6\n</code></pre>"},{"location":"webdev_snippets/#compare-scopes-of-the-var-and-let-keywords","title":"Compare Scopes of the var and let Keywords","text":"<ul> <li><code>var</code> is function-scoped</li> <li><code>let</code> is block-scoped</li> <li>E.g. <code>if</code> statements, <code>for</code> loops, and <code>while</code> loops are blocks</li> <li>Blocks are generally defined by curly braces <code>{ }</code><ul> <li>E.g. <code>if (true) { let i = 1; }</code> is block-scoped but <code>if (true) let i = 1;</code> is not</li> </ul> </li> <li>Functions are block-scoped if they are defined using the <code>function</code> keyword but not if they are defined using arrow functions<ul> <li>E.g. <code>function myFunction() { let i = 1; }</code> is block-scoped but <code>const myFunction = () =&gt; { let i = 1; }</code> is not</li> </ul> </li> </ul> <pre><code>// let is block-scoped\nfunction checkScope() {\n\"use strict\";\nlet i = \"function scope\"; // if this was `var i = \"function scope\"` ...\nif (true) {\n    let i = \"block scope\"; // ...and this was `i = \"block scope\"` then the console.log at bottom would print \"block scope\"\n    console.log(\"Block scope i is: \", i); // as is, this prints \"block scope\"\n}\nconsole.log(\"Function scope i is: \", i); // as is, this prints \"function scope\" bc the `let` within the if is block-scoped\nreturn i;\n}\n\ncheckScope(); // logs \"block scope\" and \"function scope\"\n</code></pre>"},{"location":"webdev_snippets/#mutate-an-array-declared-with-const","title":"Mutate an Array Declared with const","text":"<ul> <li>strict mode can be enabled by adding <code>\"use strict\";</code> to the top of the file</li> <li>This can be used to prevent accidentally overwriting variables</li> </ul> <pre><code>const s = [5, 7, 2];\nfunction editInPlace() {\n\"use strict\"; // this line is necessary to enable strict mode\n// strict mode prevents you from accidentally overwriting variables\n// e.g. s = [2, 5, 7]; &lt;- this is invalid\n// in other words, strict mode prevents you from accidentally reassigning variables but it doesn't prevent you from mutating them\ns[0] = 2;\ns[1] = 5;\ns[2] = 7;\n}\neditInPlace(); // this works\nconsole.log(s); // [ 2, 5, 7 ]\n</code></pre>"},{"location":"webdev_snippets/#prevent-object-mutation","title":"Prevent Object Mutation","text":"<pre><code>function freezeObj() {\n\"use strict\";\nconst MATH_CONSTANTS = {\n    PI: 3.14,\n};\nObject.freeze(MATH_CONSTANTS); // this line is necessary to prevent mutation\ntry {\n    MATH_CONSTANTS.PI = 99;\n} catch (ex) {\n    console.log(ex);\n}\nreturn MATH_CONSTANTS.PI;\n}\n\nconst PI = freezeObj();\nconsole.log(PI); // 3.14\n</code></pre> <ul> <li>The point of the above example is to show that <code>Object.freeze()</code> prevents mutation</li> <li>It also shows that <code>Object</code> is a built-in object in JavaScript that has a <code>freeze()</code> method</li> <li>Pass the object you want to freeze as an argument to <code>Object.freeze()</code></li> <li>Other similar methods are <code>Object.seal()</code> and <code>Object.preventExtensions()</code><ul> <li><code>Object.seal()</code> prevents adding and deleting properties but allows changing existing properties</li> <li><code>Object.preventExtensions()</code> prevents adding properties but allows changing and deleting existing properties</li> </ul> </li> </ul>"},{"location":"webdev_snippets/#use-the-rest-parameter-with-function-parameters","title":"Use the Rest Parameter with Function Parameters","text":"<pre><code>const sum = (...args) =&gt; {\n    return args.reduce((a, b) =&gt; a + b, 0);\n};\n\nconsole.log(sum(1, 2, 3)); // 6\n</code></pre> <ul> <li>The <code>...</code> is the rest operator<ul> <li>It allows you to pass an arbitrary number of arguments to a function<ul> <li>E.g. <code>myList = [1, 2, 3]; myOtherList = [4, 5, 6]; myList.push(...myOtherList);</code> is equivalent to <code>myList = [1, 2, 3]; myOtherList = [4, 5, 6]; myList.push(myOtherList[0], myOtherList[1], myOtherList[2]);</code></li> </ul> </li> <li>It is similar to the <code>*args</code> syntax in python<ul> <li>The equivalent of <code>**kwargs</code> in python is the spread operator (see below)</li> </ul> </li> </ul> </li> </ul>"},{"location":"webdev_snippets/#use-the-spread-operator-to-evaluate-arrays-in-place","title":"Use the Spread Operator to Evaluate Arrays In-Place","text":"<p>Expands an array in places where zero or more items are expected (e.g. multi-parameter function calls). This is necessary in cases where, e.g., a function is expecting multiple arguments but you want to pass it an array -- e.g. <code>Math.max(...myArray)</code> </p> <pre><code>function sum(x, y, z) {\n  return x + y + z;\n}\n\nconst numbers = [1, 2, 3];\nconsole.log(sum(...numbers));\n</code></pre> <p>In the following example, the spread operator is used to copy the contents of <code>arr1</code> into <code>arr2</code> in order to initialize <code>arr2</code> while avoiding mutating <code>arr1</code>. <code>arr2 = [...arr1]</code> is an example of an array literal.  </p> <pre><code>const arr1 = [\"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\"];\nlet arr2; // variable can be declared without being initialized\n// this is necessary when you want to pass the variable as an argument to a function that will initialize it but requires it to be passed as an argument\n\nfunction spreadArray(arr1, arr2) {\n    arr2 = [...arr1];\n    return arr2;\n}\n\nconsole.log(spreadArray(arr1, arr2)); // [ 'JAN', 'FEB', 'MAR', 'APR', 'MAY' ]\n</code></pre>"},{"location":"webdev_snippets/#rest-syntax-vs-spread-syntax","title":"Rest syntax vs. Spread syntax","text":"<ul> <li>Rest syntax looks exactly like spread syntax. But in a way, they are exact opposites.<ul> <li>Spread syntax $\\approx$ unpacking, while Rest syntax $\\approx$ packing.</li> </ul> </li> <li>Spread syntax \"expands\" an array into its elements, while rest syntax collects multiple elements and \"condenses\" them into a single element. </li> <li>Spread syntax UNPACKS array for function calls (where function is individual elements) while rest syntax PACKS individual parameters for function definitions (where function works with array of parameters as a whole)  <ul> <li>Think \"Whether invoking or defining, I always want to work with an array rather than its elements\"</li> <li>SPREAD (unpack): <code>myFunction(...myArray)</code></li> <li>REST (pack): <code>function myFunction(...args) {...}</code></li> </ul> </li> </ul> <pre><code>// Spread syntax in a function call\nfunction myFunction(x, y, z) { ... }\nmyFunction([1, 2, 3]); // unpacks iterableObj into its elements. myFunction expects multiple arguments.\n\n// Rest syntax in a function definition\nfunction myFunction(...args) { // packs all arguments into a single array called args. invocation of myFunction can pass any number of arguments.\n    console.log(args.length); // 3\n    console.log(args); // [ 1, 2, 3 ]\n}\nmyFunction(1, 2, 3);\n</code></pre> <pre><code>// Spread syntax in array literals\nconst origArr = [1, 2, 3];\nconst sameArr = [...origArr]; // unpacks iterableObj into its elements. sameArr is an array literal.\n\n// Rest syntax in array literals\nconst [a, b, ...iterableObj] = [1, 2, 3, 4, 5]; // packs all elements after the first two into iterableObj. iterableObj is an array literal.\nconsole.log(iterableObj); // [3, 4, 5]\n</code></pre>"},{"location":"webdev_snippets/#destructuring-assignment","title":"Destructuring Assignment","text":"<p>Destructuring is a way to extract values from objects and arrays. $\\text{Destructuring}{\\text{js}} \\approx \\text{Unpacking}{\\text{python}}$ </p> <ul> <li> <p>Destructuring from arrays relies on ordering of array elements to extract them into variables</p> <ul> <li>You can tell destructuring is being used when you see square brackets <code>[]</code> on the left side of the assignment operator <code>=</code></li> <li> <p>Example without destructuring:</p> <pre><code>const dimensions = [20, 5]\n\nconst width = dimensions[0];\nconst height = dimensions[1];\n</code></pre> </li> <li> <p>Main use cases with arrays:</p> <ul> <li> <p>Example with destructuring:</p> <pre><code>const dimensions = [20, 5]\nconst [width, height] = dimensions;\n</code></pre> </li> <li> <p>You can also skip elements:</p> <pre><code>const [a, , , b] = [1, 2, 3, 4, 5, 6];\nconsole.log(a, b); // 1 4\n</code></pre> </li> <li> <p>Concatenate/merge arrays using the spread operator:</p> <pre><code>const arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\n\nconst arr3 = [...arr1, ...arr2];\nconsole.log(arr3); // [ 1, 2, 3, 4, 5, 6 ]\n</code></pre> <pre><code>const items = [\"Tissues\", \"Oranges\"];\n\nconst otherItems = [...items, \"Tomatoes\"];\nconsole.log(otherItems); // [\"Tissues\", \"Oranges\", \"Tomatoes\"]\n</code></pre> </li> </ul> </li> <li> <p>Other use cases with arrays:</p> <ul> <li> <p>You can also use the rest operator:</p> <pre><code>const [a, b, ...arr] = [1, 2, 3, 4, 5, 7];\nconsole.log(a, b); // 1 2\nconsole.log(arr); // [ 3, 4, 5, 7 ]\n</code></pre> </li> <li> <p>You can also use destructuring to assign variables from nested arrays:</p> <pre><code>const [a, b, [c, d]] = [1, 2, [3, 4]];\nconsole.log(a, b, c, d); // 1 2 3 4\n</code></pre> </li> <li> <p>You can also use destructuring to swap variables:</p> <pre><code>let a = 8, b = 6;\nconsole.log(a); // 8\nconsole.log(b); // 6\n\n(() =&gt; [a, b] = [b, a])();\n\nconsole.log(a); // 6\nconsole.log(b); // 8\n</code></pre> </li> </ul> </li> </ul> </li> <li> <p>Destructuring from objects relies on properties (i.e. keys) to extract their values into variables</p> <ul> <li>You can tell destructuring is being used when you see curly braces <code>{}</code> on the left side of the assignment operator <code>=</code></li> <li>This is useful when you want to extract multiple values from an object...just name the properties you want to extract</li> <li>Example without destructuring:</li> </ul> <pre><code>const HIGH_TEMPERATURES = {\n    yesterday: 75,\n    today: 77,\n    tomorrow: 80,\n};\n\nconst today = HIGH_TEMPERATURES.today;\nconst tomorrow = HIGH_TEMPERATURES.tomorrow;\n</code></pre> <ul> <li> <p>Main use cases:</p> <ul> <li> <p>Example with destructuring:</p> <pre><code>const HIGH_TEMPERATURES = {\n    yesterday: 75,\n    today: 77,\n    tomorrow: 80,\n};\n\n// destructure into variables with the same names as the object properties\nconst { today, tomorrow } = HIGH_TEMPERATURES;\nconsole.log(tomorrow); // 80\n// OR - destructure into variables with different names than the object properties\nconst { today: highToday, tomorrow: highTomorrow } = HIGH_TEMPERATURES;\nconsole.log(highToday); // 77\n</code></pre> </li> </ul> </li> <li> <p>Other use cases:</p> <ul> <li> <p>You can also use the rest operator:</p> <pre><code>const HIGH_TEMPERATURES = {\n    yesterday: 75,\n    today: 77,\n    tomorrow: 80,\n};\n\nconst { yesterday, ...restOfHighTemperatures } = HIGH_TEMPERATURES;\nconsole.log(yesterday); // 75\nconsole.log(restOfHighTemperatures); // { today: 77, tomorrow: 80 }\n</code></pre> </li> <li> <p>You can also use destructuring to assign variables from nested objects:</p> <pre><code>const LOCAL_FORECAST = {\n    yesterday: { low: 61, high: 75 },\n    today: { low: 64, high: 77 },\n    tomorrow: { low: 68, high: 80 },\n};\n\nconst { today: { low: lowToday, high: highToday } } = LOCAL_FORECAST;\nconsole.log(lowToday); // 64\n</code></pre> </li> <li> <p>Common usage pattern 1 - using destructuring to assign variables from objects passed as function parameters:</p> <pre><code>const LOCAL_FORECAST = {\n    yesterday: { low: 61, high: 75 },\n    today: { low: 64, high: 77 },\n    tomorrow: { low: 68, high: 80 },\n};\n\nfunction forecast({ today }) {\n    return today;\n}\n\nconsole.log(forecast(LOCAL_FORECAST)); // { low: 64, high: 77 }\n</code></pre> </li> <li> <p>Common usage pattern 2 - using destructuring to assign variables from objects returned by functions:</p> <pre><code>const LOCAL_FORECAST = {\n    yesterday: { low: 61, high: 75 },\n    today: { low: 64, high: 77 },\n    tomorrow: { low: 68, high: 80 },\n};\n\nfunction getLocalForecast() {\n    return LOCAL_FORECAST;\n}\n\nconst { today: { low: lowToday, high: highToday } } = getLocalForecast();\nconsole.log(lowToday); // 64\n</code></pre> </li> <li> <p>Common usage pattern 3 - using destructuring to assign variables from objects returned by API calls:</p> <pre><code>// this is a fake API call\nconst getWeather = () =&gt; {\n    return new Promise((resolve, reject) =&gt; {\n        setTimeout(() =&gt; {\n            resolve({ // say this is the response from the API call\n                yesterday: { low: 61, high: 75 },\n                today: { low: 64, high: 77 },\n                tomorrow: { low: 68, high: 80 },\n            });\n        }, 2000);\n    });\n};\n\n// this is the function that calls the API\nconst getLocalForecast = async () =&gt; {\n    const weather = await getWeather();\n    return weather;\n};\n\n// this is the function that uses the API response\nconst printLocalForecast = async () =&gt; {\n    const { today: { low: lowToday, high: highToday } } = await getLocalForecast();\n    console.log(lowToday); // 64\n};\n</code></pre> </li> </ul> </li> </ul> </li> </ul>"},{"location":"webdev_snippets/#use-destructuring-assignment-to-assign-variables-from-objects","title":"Use Destructuring Assignment to Assign Variables from Objects","text":"<ul> <li>You can give different names to the variables you are assigning using <code>:</code></li> </ul> <pre><code>const HIGH_TEMPERATURES = {\nyesterday: 75,\ntoday: 77,\ntomorrow: 80,\n};\n\nconst { today: highToday, tomorrow: highTomorrow } = HIGH_TEMPERATURES;\n</code></pre>"},{"location":"webdev_snippets/#use-destructuring-assignment-to-pass-an-object-as-a-functions-parameters","title":"Use Destructuring Assignment to Pass an Object as a Function's Parameters","text":"<pre><code>const HIGH_TEMPERATURES = {\n    yesterday: 75,\n    today: 77,\n    tomorrow: 80,\n};\n\nconst { today, tomorrow } = HIGH_TEMPERATURES;\n\nfunction forecast({ today, tomorrow }) {\n    return `Today's high is ${today} and tomorrow's high is ${tomorrow}`; // this is a template literal (f-string)\n}\n\nconsole.log(forecast(HIGH_TEMPERATURES)); // Today's high is 77 and tomorrow's high is 80\n</code></pre>"},{"location":"webdev_snippets/#create-strings-using-template-literals","title":"Create Strings using Template Literals","text":"<p>Note the backticks</p> <pre><code>const person = {\n    name: \"Zodiac Hasbro\",\n    age: 56,\n};\n\nconst greeting = `Hello, my name is ${person.name}!\nI am ${person.age} years old.`;\n\nconsole.log(greeting); // Hello, my name is Zodiac Hasbro!\n// I am 56 years old.\n</code></pre>"},{"location":"webdev_snippets/#write-concise-object-literal-declarations-using-object-property-shorthand","title":"Write Concise Object Literal Declarations Using Object Property Shorthand","text":"<pre><code>const getMousePosition = (x, y) =&gt; ({\n    x: x,\n    y: y,\n});\n\nconsole.log(getMousePosition(1, 2)); // { x: 1, y: 2 }\n</code></pre> <ul> <li>There are a few useful points in the above example:<ul> <li>The <code>()</code> around the object are necessary to prevent the <code>{</code> and <code>}</code> from being interpreted as the start and end of the function body</li> <li>The anonymous function is being implicitly returned<ul> <li>This is because the function body is a single expression (i.e. the object)</li> <li>So basically the function is equivalent to <code>const getMousePosition = (x, y) =&gt; { return { x: x, y: y }; };</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"webdev_snippets/#write-concise-declarative-functions-with-es6","title":"Write Concise Declarative Functions with ES6","text":"<pre><code>const person = {\n    name: \"Taylor\",\n    sayHello() {\n        return `Hello! My name is ${this.name}.`;\n    },\n};\n\nconsole.log(person.sayHello()); // Hello! My name is Taylor.\n</code></pre> <ul> <li>This is a good example of the use of <code>this</code><ul> <li><code>this</code> refers to the object that the function is a property of</li> <li>In this case, <code>this</code> refers to the <code>person</code> object</li> <li>This is similar to python's <code>self</code> keyword</li> <li><code>this</code> is necessary when you want to access the object's properties from within the function<ul> <li>E.g. <code>const person = { name: \"Taylor\", sayHello() { return</code>Hello! My name is ${name}.<code>; }, };</code> will not work because <code>name</code> is not defined</li> <li>E.g. <code>const person = { name: \"Taylor\", sayHello() { return</code>Hello! My name is ${this.name}.<code>; }, };</code> will work because <code>this.name</code> refers to the <code>name</code> property of the <code>person</code> object</li> </ul> </li> <li>It also exemplifies the use case of anonymous functions<ul> <li>The function is being defined as a property of the object, so it is not necessary to formally define it</li> <li>This is similar to python's <code>lambda</code> keyword</li> </ul> </li> </ul> </li> </ul>"},{"location":"webdev_snippets/#use-class-syntax-to-define-a-constructor-function","title":"Use class Syntax to Define a Constructor Function","text":"<pre><code>class Vegetable {\n    constructor(name) {\n        this.name = name;\n    }\n}\n\nconst carrot = new Vegetable(\"carrot\");\nconsole.log(carrot.name); // Should display 'carrot'\n</code></pre>"},{"location":"webdev_snippets/#use-getters-and-setters-to-control-access-to-an-object","title":"Use getters and setters to Control Access to an Object","text":"<pre><code>class Thermostat {\n    constructor(fahrenheit) {\n        this.fahrenheit = fahrenheit;\n    }\n\n    get temperature() {\n        return (5 / 9) * (this.fahrenheit - 32);\n    }\n\n    set temperature(celsius) {\n        this.fahrenheit = (celsius * 9.0) / 5 + 32;\n    }\n}\n\nconst thermos = new Thermostat(76); // Setting in Fahrenheit scale\nlet temp = thermos.temperature; // 24.44 in Celsius\nthermos.temperature = 26;\ntemp = thermos.temperature; // 26 in Celsius\n</code></pre>"},{"location":"webdev_snippets/#create-a-module-script","title":"Create a Module Script","text":"<p>Module scripts are JavaScript files that can be imported and exported.</p> <pre><code>&lt;html&gt;\n    &lt;body&gt;\n        &lt;script type=\"module\" src=\"index.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>The code within index.js can be imported and exported using the <code>import</code> and <code>export</code> keywords:</p> <pre><code>// import { add } from \"./math_functions.js\"; // this is the syntax for importing a single function\nimport * as myMathModule from \"./math_functions.js\"; // this is the syntax for importing an entire module\n// import { add, subtract } from \"./math_functions.js\"; // this is the syntax for importing multiple functions\n\nconsole.log(myMathModule.add(1, 2)); // 3\nconsole.log(myMathModule.subtract(1, 2)); // -1\n</code></pre> <pre><code>// export const add = (x, y) =&gt; {\n//   return x + y;\n// };\n\n// export const subtract = (x, y) =&gt; {\n//   return x - y;\n// };\n\nexport const add = (x, y) =&gt; x + y; // this is the syntax for exporting a single function\nexport const subtract = (x, y) =&gt; x - y; // this is the syntax for exporting a single function\n</code></pre>"},{"location":"webdev_snippets/#use-export-to-share-a-code-block","title":"Use export to Share a Code Block","text":"<pre><code>const uppercaseString = (string) =&gt; {\n    return string.toUpperCase();\n};\n\nconst lowercaseString = (string) =&gt; {\n    return string.toLowerCase();\n};\n\nexport { uppercaseString, lowercaseString };\n</code></pre>"},{"location":"webdev_snippets/#the-dom","title":"The DOM","text":"The DOM <ul> <li>Theory of the DOM</li> <li>Tree Details</li> <li>Common Usage Patterns (JavaScript Interaction)</li> </ul> <p>The Document Object Model (DOM) is a programming interface for HTML documents. It represents the page so that programs can change the document structure, style, and content. The DOM represents the document as nodes and objects. That way, programming languages can connect to the page.</p>"},{"location":"webdev_snippets/#theory-of-the-dom","title":"Theory of the DOM","text":"<p>The DOM is a tree-like structure that represents the HTML document. It is used to connect web pages to scripts like JavaScript. The DOM is an object-oriented representation of the web page, which can be modified with a scripting language like JavaScript. In short, the DOM is the way JavaScript sees its containing HTML page and allows JavaScript to access the HTML elements and styles to manipulate them.</p>"},{"location":"webdev_snippets/#tree-details","title":"Tree Details","text":"<p>The DOM is a tree of nodes. HTML elements are nodes, and the document itself is a node. The document is the root node, and all other nodes are children of the document. Nodes can have siblings, children, and parents. \"Sibling nodes\" are nodes that share the same parent. </p>"},{"location":"webdev_snippets/#common-usage-patterns-javascript-interaction","title":"Common Usage Patterns (JavaScript Interaction)","text":"HTML Element JavaScript Property JavaScript Method JavaScript Event Example Usage <code>&lt;button&gt;</code> <code>.innerHTML</code> <code>.getElementById()</code> <code>.onclick</code> <code>document.getElementById('btn').onclick = function() {...}</code> <code>&lt;button&gt;</code> <code>.innerHTML</code> <code>.getElementsByClassName()</code> <code>.onclick</code> <code>document.getElementsByClassName('btn')[0].onclick = function() {...}</code> <code>&lt;button&gt;</code> <code>.innerHTML</code> <code>.getElementsByTagName()</code> <code>.onclick</code> <code>document.getElementsByTagName('button')[0].onclick = function() {...}</code> <code>&lt;button&gt;</code> <code>.innerHTML</code> <code>.querySelector()</code> <code>.onclick</code> <code>document.querySelector('#btn').onclick = function() {...}</code> <code>&lt;button&gt;</code> <code>.innerHTML</code> <code>.querySelectorAll()</code> <code>.onclick</code> <code>document.querySelectorAll('.btn')[0].onclick = function() {...}</code> <code>&lt;button&gt;</code> <code>.innerHTML</code> <code>.querySelectorAll()</code> <code>.onclick</code> <code>document.querySelectorAll('button')[0].onclick = function() {...}</code> <code>&lt;button&gt;</code> <code>.innerHTML</code> <code>.querySelector()</code> <code>.addEventListener()</code> <code>document.querySelector('#btn').addEventListener('click', function() {...})</code> <code>&lt;button&gt;</code> <code>.innerHTML</code> <code>.querySelectorAll()</code> <code>.addEventListener()</code> <code>document.querySelectorAll('.btn')[0].addEventListener('click', function() {...})</code> <code>&lt;button&gt;</code> <code>.innerHTML</code> <code>.querySelectorAll()</code> <code>.addEventListener()</code> <code>document.querySelectorAll('button')[0].addEventListener('click', function() {...})</code> <code>&lt;button&gt;</code> <code>.innerHTML</code> <code>.querySelector()</code> <code>.onmouseover</code> <code>document.querySelector('#btn').onmouseover = function() {...}</code> <code>&lt;button&gt;</code> <code>.innerHTML</code> <code>.querySelectorAll()</code> <code>.onmouseover</code> <code>document.querySelectorAll('.btn')[0].onmouseover = function() {...}</code> <code>&lt;button&gt;</code> <code>.innerHTML</code> <code>.querySelectorAll()</code> <code>.onmouseover</code> <code>document.querySelectorAll('button')[0].onmouseover = function() {...}</code> <code>&lt;button&gt;</code> <code>.innerHTML</code> <code>.querySelector()</code> <code>.onmouseout</code> <code>document.querySelector('#btn').onmouseout = function() {...}</code> <code>&lt;button&gt;</code> <code>.innerHTML</code> <code>.querySelectorAll()</code> <code>.onmouseout</code> <code>document.querySelectorAll('.btn')[0].onmouseout = function() {...}</code> <code>&lt;button&gt;</code> <code>.innerHTML</code> <code>.querySelectorAll()</code> <code>.onmouseout</code> <code>document.querySelectorAll('button')[0].onmouseout = function() {...}</code> <code>&lt;input&gt;</code> <code>.value</code> <code>.querySelector()</code> <code>.onchange</code> <code>document.querySelector('#input').onchange = function() {...}</code> <code>&lt;input&gt;</code> <code>.value</code> <code>.querySelectorAll()</code> <code>.onchange</code> <code>document.querySelectorAll('.input')[0].onchange = function() {...}</code> <code>&lt;input&gt;</code> <code>.value</code> <code>.querySelectorAll()</code> <code>.onchange</code> <code>document.querySelectorAll('input')[0].onchange = function() {...}</code> <code>&lt;input&gt;</code> <code>.value</code> <code>.querySelector()</code> <code>.onkeyup</code> <code>document.querySelector('#input').onkeyup = function() {...}</code> <code>&lt;input&gt;</code> <code>.value</code> <code>.querySelectorAll()</code> <code>.onkeyup</code> <code>document.querySelectorAll('.input')[0].onkeyup = function() {...}</code>"},{"location":"webdev_snippets/#the-dom-take-2","title":"The DOM (take 2)","text":""},{"location":"webdev_snippets/#dom-selection-i","title":"DOM Selection I","text":"<p>JavaScript makes your pages more dynamic as HTML elements can now react to a user's click, a certain condition &amp; more. The DOM (Document Object Model) is a JavaScript object &amp; API (a set of functions) that represents the HTML of your page. It lets you interact from JavaScript with the elements on your page. You can read and change text, add and delete items, and a lot more. </p>"},{"location":"webdev_snippets/#documentqueryselectorcss-selector","title":"<code>document.querySelector(\"&lt;CSS selector&gt;\")</code>","text":"<p>Selecting elements from your HTML (one element at a time for now): </p> <p>You can access the DOM in JavaScript with the <code>document</code> variable:</p> <p></p> <p>You can select a single item from the page using the <code>document.querySelector</code> method:</p> <pre><code>document.querySelector(\"your-CSS-selector-here\");\n</code></pre> <p>The <code>querySelector</code> (note the capital <code>S</code> character) method expects a CSS selector. That's the same as the selectors you'd write in your CSS file.</p> <p>If there are multiple items that satisfy the CSS selector that you specified, only the first one is returned. Later on, we'll see how you can select more than 1 item at a time.</p> <p>Let's take a look at some of the most common selectors:</p> <ul> <li> <p>By HTML tag (<code>(\"&lt;tag&gt;\")</code>)</p> <pre><code>&lt;h1&gt;Big heading&lt;/h1&gt;\n&lt;script&gt;\n    const title = document.querySelector(\"h1\");\n&lt;/script&gt;\n</code></pre> <p>Other tags include <code>p</code>, <code>div</code>, <code>span</code>, <code>ul</code>, <code>li</code>, <code>a</code>, <code>img</code>, <code>button</code>, etc.</p> </li> <li> <p>By class (dot: <code>(\".&lt;class&gt;\")</code>)</p> <pre><code>&lt;div class=\"item\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    // \"dot\" (.) for class\n    const item = document.querySelector(\".item\");\n&lt;/script&gt;\n</code></pre> </li> <li> <p>By ID (hashtag: <code>(\"#&lt;id&gt;\")</code>)</p> <pre><code>&lt;div id=\"navbar\"&gt;&lt;/div&gt;\n&lt;script&gt;\n    // \"hash\" (#) for ID\n    const navbar = document.querySelector(\"#navbar\");\n&lt;/script&gt;\n</code></pre> <p><code>document.querySelector(\"#navbar\")</code> is equivalent to <code>document.getElementById(\"navbar\")</code>. * <code>document.querySelect(\"#&lt;id&gt;\")</code> is preferred * Never use <code>getElementsByTagName</code> or <code>getElementsByClassName</code>. </p> </li> <li> <p>By Descendant (space: <code>(\"&lt;parent&gt; &lt;child&gt;\")</code>)</p> <pre><code>&lt;div id=\"banner\"&gt;\n    &lt;div class=\"item\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;script&gt;\n    // \"space character\" ( ) for descendant\n    const item = document.querySelector(\"#banner .item\");\n&lt;/script&gt;\n</code></pre> <p>IMPT: A descendent is an element that is inside the body of its parent element. Not to be confused with an attribute (which is a property of an element -- there is only one element to select). So use a space to move \"into\" a node in the DOM tree. Use a dot to move \"across\" a node in the DOM tree to specify with more granularity.</p> <p>Assuming the following HTML:</p> <pre><code>&lt;a href=\"/contact-us\" class=\"menu-link\"&gt;Contact us&lt;/a&gt;\n&lt;script&gt;\n    const incorrect = document.querySelector(\"a .menu-link\")\n    const correct = document.querySelector(\"a.menu-link\")\n&lt;/script&gt;\n</code></pre> <p>The first selector will not work because <code>a .menu-link</code> means that there is an <code>a</code> element and then inside of it you should find an element with <code>class=\"menu-link\"</code>. This is incorrect.</p> <p>This is because the <code>a</code> and the element that has the <code>class=\"menu-link\"</code> are the same element. In that case, the correct selector is <code>a.menu-link</code> (without spaces between them).</p> <p>You can read it as: select the item that is of type <code>a</code> and has the class <code>menu-link</code>.</p> <p>Similarly, you can select an item that has several classes, for example, <code>.menu-link.active</code> will select the item that has both classes <code>menu-link</code> and <code>active</code>.</p> </li> <li> <p>By Attribute (brackets: <code>(\"[&lt;attribute&gt;]\")</code>)</p> <pre><code>&lt;input type=\"text\" placeholder=\"Your name here\" disabled&gt;\n&lt;script&gt;\n    // find the element with the disabled attribute\n    document.querySelector(\"[disabled]\");\n&lt;/script&gt;\n</code></pre> </li> </ul> <p>Selectors game If you'd like to practice CSS selectors in a fun game, then check out flukeout.github.io.</p> <p><code>document.querySelector(\"&lt;CSS-selector&gt;\")</code> returns an object which is an instance of <code>HTMLElement</code>. <code>HTMLElement</code> is the parent class that every single HTML element in your page inherits from. This means that every element on your page is an instance of a single class which is <code>HTMLElement</code>.</p>"},{"location":"webdev_snippets/#elementtextcontent","title":"<code>Element.textContent</code>","text":"<p>The following sections will focus more generally on properties and methods you can call on the result of <code>document.querySelector(\"&lt;CSS-selector&gt;\")</code>. This section is focused specifically on the <code>textContent</code> property, which works on most elements (<code>HTMLElement</code> instances) that contain text inside of them. Some examples are <code>h1</code>, <code>p</code>, <code>div</code>, <code>span</code>, <code>a</code>, <code>button</code>, etc.</p> <pre><code>&lt;div&gt;Hello world&lt;/div&gt;\n&lt;script&gt;\n    const div = document.querySelector(\"div\");\n    console.log(div.textContent); // \"Hello world\"\n&lt;/script&gt;\n</code></pre> <p>Note that <code>document.querySelector(\"&lt;CSS-selector&gt;\")</code> returns an object which is an instance of <code>HTMLElement</code>. However if it cannot find any element that matches the CSS selector you specified, it will return <code>null</code> instead.</p> <pre><code>&lt;div&gt;Hello world&lt;/div&gt;\n&lt;script&gt;\n    const paragraph = document.querySelector(\"p\");\n    console.log(paragraph.textContent); // TypeError: Cannot read property 'textContent' of null\n&lt;/script&gt;\n</code></pre> <p>So you should always check that the element you're trying to access exists before trying to access its properties or methods.</p> <pre><code>&lt;div&gt;Hello world&lt;/div&gt;\n&lt;script&gt;\n    const paragraph = document.querySelector(\"p\");\n    // option 1\n    if (paragraph) {\n        console.log(paragraph.textContent); \n    }\n    // option 2\n    console.log(paragraph?.textContent);\n    // option 3 (with nullish coalescing operator)\n    console.log(paragraph?.textContent ?? \"default value\");\n&lt;/script&gt;\n</code></pre>"},{"location":"webdev_snippets/#dom-selection-ii","title":"DOM Selection II","text":"<p>Selecting multiple DOM elements NodeList  </p>"},{"location":"webdev_snippets/#documentqueryselectorallcss-selector","title":"<code>document.querySelectorAll(\"&lt;CSS-selector&gt;\")</code>","text":"<pre><code>&lt;p id=\"first\"&gt;First paragraph&lt;/p&gt;\n&lt;p id=\"second\"&gt;Second paragraph&lt;/p&gt;\n\n&lt;script&gt;\n    document.querySelectorAll(\"p\"); // NodeList(2) [p#first, p#second]\n&lt;/script&gt;\n</code></pre>"},{"location":"webdev_snippets/#nodelist","title":"NodeList","text":"<p>A <code>NodeList</code> is an array-like object that contains a collection of DOM elements (e.g. all the elements that match the CSS selector you specified).  * If no elements match the CSS selector you specified, it will return an empty <code>NodeList</code> (i.e. a <code>NodeList</code> with a length of 0).  * This is not an array... * ...but is an array-like object.      * has <code>.length</code> property      * can access its elements with square brackets     * can iterate over its elements using <code>.forEach()</code>     * BUT it does not have all the methods that an array has (like <code>map</code>, <code>filter</code>, <code>reduce</code>, etc.)</p> <pre><code>const paragraphs = document.querySelectorAll(\"p\");\n\nconsole.log(paragraphs.textContent); // undefined (bc the NodeList does not have a textContent property...only the individual elements do)\n\nparagraphs.forEach(paragraph =&gt; {\n    console.log(paragraph.textContent); // logs every paragraph's text\n});\n</code></pre>"},{"location":"webdev_snippets/#converting-nodelist-to-array","title":"Converting NodeList to Array","text":"<p>Recall the spread operator <code>...</code> and the pattern <code>[...iterableObj]</code> to unpack an iterable object to an array.</p> <pre><code>const links = [...document.querySelectorAll(\"a\")]; // Array\nconsole.log(links.filter(link =&gt; link.textContent.includes(\"Home\")));\n</code></pre> <p>This is useful, but generally it's simpler to just update the HTML to add a class to the elements you want to select. Then you can use <code>document.querySelectorAll(\".my-class\")</code> to select all the elements with that class.</p>"},{"location":"webdev_snippets/#jquery","title":"jQuery","text":""},{"location":"webdev_snippets/#raison-detre","title":"Raison Detre","text":"<p>jQuery is a JavaScript library designed to simplify HTML DOM tree traversal and manipulation, as well as event handling, CSS animation, and Ajax. It extends plain vanilla JavaScript by providing a simpler syntax for common tasks, such as selecting elements, manipulating the DOM, and handling events. jQuery syntax enables developers to write code that is shorter and simpler than plain vanilla JavaScript.</p>"},{"location":"webdev_snippets/#common-usage-patterns","title":"Common Usage Patterns","text":"Method Description Example Usage <code>$(selector)</code> Selects HTML elements <code>$('div')</code> selects all <code>&lt;div&gt;</code> elements <code>.html()</code> Gets or sets the HTML content of an element <code>$('#id').html()</code> gets, <code>$('#id').html('new html')</code> sets <code>.text()</code> Gets or sets the text content <code>$('.class').text()</code> gets, <code>$('.class').text('new text')</code> sets <code>.val()</code> Gets or sets the value of form fields <code>$('input').val()</code> gets, <code>$('input').val('new value')</code> sets <code>.addClass()</code> Adds one or more classes to the selected elements <code>$('div').addClass('new-class')</code> <code>.removeClass()</code> Removes one or more classes from the selected elements <code>$('div').removeClass('old-class')</code> <code>.css()</code> Gets or sets the style of an element <code>$('.item').css('color')</code> gets, <code>$('.item').css('color', 'blue')</code> sets <code>.show()</code> Displays the selected elements <code>$('div').show()</code> <code>.hide()</code> Hides the selected elements <code>$('div').hide()</code> <code>.toggle()</code> Toggles between hiding and showing the selected elements <code>$('div').toggle()</code> <code>.on()</code> Attaches an event handler function to the selected elements <code>$('#btn').on('click', function() {...})</code> <code>.click()</code> Adds a click event handler to the selected elements <code>$('button').click(function() {...})</code> <code>.ready()</code> Specifies a function to run when the DOM is fully loaded <code>$(document).ready(function() {...})</code> <code>.append()</code> Inserts specified content at the end of the selected elements <code>$('ul').append('&lt;li&gt;new item&lt;/li&gt;')</code> <code>.prepend()</code> Inserts specified content at the beginning of the selected elements <code>$('ul').prepend('&lt;li&gt;first item&lt;/li&gt;')</code> <code>.ajax()</code> Performs an asynchronous HTTP (Ajax) request <code>$.ajax({url: 'test.html', success: function(result) {...}})</code> <code>.fadeOut()</code> Fades out the selected elements <code>$('#div1').fadeOut()</code> <code>.fadeIn()</code> Fades in the selected elements <code>$('#div1').fadeIn()</code> <code>.slideUp()</code> Slides up the selected elements <code>$('.box').slideUp()</code> <code>.slideDown()</code> Slides down the selected elements <code>$('.box').slideDown()</code> <code>.animate()</code> Custom animation for the selected elements <code>$('div').animate({left: '250px'})</code>"},{"location":"webdev_snippets/#async-programming-in-javascript","title":"Async Programming in JavaScript","text":"Async in JavaScript <ul> <li>Theory of Async Programming</li> <li>Promises</li> <li>Understanding Promises</li> <li>Syntax and Usage</li> <li>Promise States</li> <li>Promise Methods</li> <li>Promise.all()</li> <li>Chaining Promises</li> <li>Async/Await</li> <li>Async Function</li> <li>Await Keyword</li> <li>Common Usage Patterns</li> <li>Callbacks</li> <li>Understanding Callbacks</li> <li>Syntax and Basic Usage</li> <li>Callback Hell and Its Avoidance</li> <li>Event Loop</li> <li>Understanding the Event Loop</li> <li>Event Loop Phases</li> <li>Event Loop Example</li> <li>Event Loop and Asynchronous Operations</li> </ul> <p>Async programming in JavaScript is essential for handling tasks like network requests or timers without blocking the main thread. It keeps the application responsive by dealing with operations that complete in the future.</p>"},{"location":"webdev_snippets/#theory-of-async-programming","title":"Theory of Async Programming","text":"<p>Async programming handles operations that will complete later, allowing the program to continue running without waiting. This is especially important for web development, involving network requests and file operations.</p>"},{"location":"webdev_snippets/#promises","title":"Promises","text":"<p>A Promise is an object representing the eventual completion or failure of an asynchronous operation. It is a placeholder into which the successful result value or reason for failure will materialize. It is declared like a variable using the <code>new</code> keyword, takes a (resolve, reject) tuple as an arg, and is invoked with the <code>then()</code> method. Promises immediately return a Promise object which tells JavaScript's main thread to offload the callback handling to the event loop and immediately move forward with program execution. Promises are what underlie async in JS. <code>async</code>/<code>await</code> are a wrapper on top of promises to write asynchronous code in a way that looks synchronous.  </p>"},{"location":"webdev_snippets/#understanding-promises","title":"Understanding Promises","text":"<p>A Promise is an object representing the completion or failure of an asynchronous operation.  A Promise can be in one of three states: pending, fulfilled, or rejected.      * Managing the pending state is how the Promise object enables asynchronous operations to be handled in a synchronous-like manner/syntax. A Promise is created using the <code>new</code> keyword and contains a callback function with two parameters: <code>resolve</code> and <code>reject</code>.      * The <code>resolve</code> and <code>reject</code> parameters are functions that are called to resolve or reject the Promise.         * They are generally called within an <code>if</code> statement that checks whether the asynchronous operation was successful or not.     * The Promise is resolved when the asynchronous operation is successful and rejected when it fails.  The Promise object has methods for handling resolved and rejected Promises:  * <code>.then()</code>: * <code>.catch()</code> * <code>.finally()</code>. </p> <p>Promises can be chained to handle sequential asynchronous operations (i.e. cases where one operation depends on the result of another operation). </p>"},{"location":"webdev_snippets/#syntax-and-usage","title":"Syntax and Usage","text":"<ul> <li>Syntax:</li> </ul> <pre><code>let myPromise = new Promise((resolve, reject) =&gt; {\n    // Asynchronous operation code\n    let condition = true;\n    if (condition) {\n        resolve('Promise is resolved successfully.');\n    } else {\n        reject('Promise is rejected.');\n    }\n});\n\nmyPromise.then(\n    (value) =&gt; { console.log(value); },\n    (error) =&gt; { console.log(error); }\n);\n</code></pre> <ul> <li>With callbacks<ul> <li>callbacks are functions whose logic depends on the result of a Promise</li> <li>A callback is passed as arg to SCARF, which declares a Promise var, pass it to the callback as arg, who invokes it</li> <li>callbacks receive a Promise object as arg and invoke/initiate it using Promise.then(...)  </li> <li>When the Promise is initiated (in the callback), JavaScript knows to immediately move forward with program execution (within the SCARF)  <ul> <li>SCARF(callback) --&gt; Promise --&gt; <ul> <li>callback(Promise) --&gt; Promise.then(...) --&gt; </li> </ul> </li> <li>SCARF // remaining lines</li> </ul> </li> <li>When using callbacks, that \"next line of program execution\" is the invocation of the callback handling specification for the returned Promise object.  <ul> <li>Because a Promise object is passed as</li> </ul> </li> </ul> </li> </ul> <pre><code>// Slow  (SCARF)\nfunction fetchData(callback) {\n    let data = fetch('https://api.example.com/data'); // fetch immediately returns a Promise object...\n    callback(data); // ...which is immediately passed to the callback...\n}\n\n// Callback function that parses and prints response\nfunction handleData(data) {\n    data.then(response =&gt; response.json()) //... which immediately invokes it...\n         .then(json =&gt; console.log(json))\n         .catch(error =&gt; console.error('Error:', error));\n}\n\nfetchData(handleData);\n</code></pre>"},{"location":"webdev_snippets/#promise-states","title":"Promise States","text":"<p>A Promise can be in one of three states:</p> <ul> <li>Pending: Initial state, neither fulfilled nor rejected.</li> <li>Fulfilled: Operation completed successfully.</li> <li>Rejected: Operation failed.</li> </ul>"},{"location":"webdev_snippets/#promise-methods","title":"Promise Methods","text":"<ul> <li>.then(): Handles fulfilled and rejected Promises.<ul> <li>This is similar to a try/catch block in synchronous JavaScript.</li> <li>It is used to handle the result of a resolved Promise.</li> <li>It takes two callback functions as arguments: one for the resolved Promise and one for the rejected Promise.</li> </ul> </li> <li>.catch(): Handles rejected Promises.<ul> <li>This is similar to a catch block in synchronous JavaScript.</li> <li>It is used to handle the reason for a rejected Promise.</li> <li>It takes one callback function as an argument: the callback function for the rejected Promise.</li> </ul> </li> <li>.finally(): Handles all Promises.<ul> <li>This is similar to a finally block in synchronous JavaScript.</li> <li>It is used to execute code after a Promise is settled (i.e. resolved or rejected).</li> <li>It takes one callback function as an argument: the callback function for the settled Promise.</li> </ul> </li> </ul> <p>In comparison to synchronous JavaScript, Promise methods are similar to try/catch/finally blocks. These are equivalent in python. Async python looks like this:</p> <pre><code>import asyncio\n\nasync def main():\n        print('Hello')\n        await asyncio.sleep(1)\n        print('World')\n\nasyncio.run(main())\n</code></pre> <p>Here's a more complex example:</p> <pre><code>```python\nimport asyncio\n\nasync def say_after(delay, what):\n        await asyncio.sleep(delay)\n        print(what)\n\nasync def main():\n        print(f\"started at {time.strftime('%X')}\")\n\n        await say_after(1, 'hello')\n        await say_after(2, 'world')\n\n        print(f\"finished at {time.strftime('%X')}\")\n\nasyncio.run(main()) # this is the equivalent of `await main()`\n```\n</code></pre> <p>Example of .then():</p> <pre><code>myPromise.then(\n    (value) =&gt; { console.log(value); },\n    (error) =&gt; { console.log(error); }\n);\n</code></pre> <p>In the above, <code>value</code> is the result of the resolved Promise. It is the value passed to the <code>resolve()</code> function. <code>error</code> is the reason for the rejection. It is the value passed to the <code>reject()</code> function.</p> <p>Example of .catch():</p> <pre><code>myPromise.catch((error) =&gt; {\n    console.log(error);\n});\n</code></pre> <p>In the above, <code>error</code> is the reason for the rejection. It is the value passed to the <code>reject()</code> function. Common reasons for rejection are network errors, server errors, or user input errors. Common errors are <code>TypeError</code>, <code>ReferenceError</code>, and <code>SyntaxError</code>. These are all built-in JavaScript errors.</p> <p>Example of .finally():</p> <pre><code>myPromise.finally(() =&gt; {\n    console.log('Promise is settled.');\n});\n</code></pre> <p>In the above, the callback function is executed when the Promise is settled, regardless of whether it is resolved or rejected.</p>"},{"location":"webdev_snippets/#promiseall","title":"Promise.all()","text":"<p>Promise.all() takes an array of Promises and returns a single Promise that resolves when all of the Promises in the array resolve.</p> <pre><code>Promise.all([promise1, promise2])\n    .then((values) =&gt; {\n        // Handle resolved promises\n    })\n    .catch((error) =&gt; {\n        // Handle error\n    });\n</code></pre>"},{"location":"webdev_snippets/#chaining-promises","title":"Chaining Promises","text":"<p>Promises can be chained to handle sequential asynchronous operations.</p> <p><pre><code>myPromise\n    .then((firstResult) =&gt; {\n        console.log(firstResult);\n        return 'Fetching more data';\n    })\n    .then((secondResult) =&gt; {\n        console.log(secondResult);\n        // More operations\n    })\n    .catch((error) =&gt; {\n        console.error(error);\n    });\n</code></pre> .catch() is used for error handling in promise chains.</p>"},{"location":"webdev_snippets/#callbacks-async","title":"Callbacks (async)","text":"<p>Callbacks are functions passed into other functions as arguments, which are then invoked inside the outer (argument-receiving) function to complete some kind of routine or action.</p> <p>Callbacks in JavaScript are functions that are passed as arguments to other functions. This is a very important feature of asynchronous programming, and it enables the function that receives the callback to (1) perform a slow task without blocking &amp; (2) execute the callback function upon completion of said task. The callback function's logic is dependent on the completion of the slow task.</p> <ul> <li>CAF - callback argument function<ul> <li>CAF's are dependent on the completion of SCARFs</li> </ul> </li> <li>SCARF - slow callback arg-receiver function<ul> <li>SCARFs (1) assign the result of a Promise-returning function to a variable then (2) pass that result (which is a Promise) to the callback function </li> <li>SCARFs do not block the event loop</li> <li>This means that SCARFs do not wait for the slow task to complete before moving on to the next line of code<ul> <li>JavaScript knows to initiate Promise then immediately continue evaluating the next line in the SCARF when it enc an invocation of a function that returns a Promise</li> </ul> </li> </ul> </li> <li>CAFs are passed to SCARFs as arguments (often using a stand-in argument name of \"callback\")</li> <li>SCARFs call CAFs at some appropriate time (e.g. after a network request has been completed)</li> <li>When called, CAFs are executed inside SCARFs<ul> <li>This is how CAFs are able to access variables defined in SCARFs (e.g. the result of a network request)</li> </ul> </li> </ul>"},{"location":"webdev_snippets/#understanding-callbacks","title":"Understanding Callbacks","text":"<p>A callback function (CAF) is a function that is passed to another function (SCARF) with the expectation that the other function (SCARF) will call it (CAF) at some appropriate time. Callbacks (CAFs) are a way to ensure certain code doesn\u2019t execute until other code has already finished execution.</p>"},{"location":"webdev_snippets/#syntax-and-basic-usage","title":"Syntax and Basic Usage","text":"<pre><code>// Callback func\nfunction handleData(data) {\n    data.then(response =&gt; response.json())\n         .then(json =&gt; console.log(json))\n         .catch(error =&gt; console.error('Error:', error));\n}\n\nfunction fetchData(callback) {\n    let data = fetch('https://api.example.com/data'); // KEY: THIS RETURNS A PROMISE\n    callback(data); // Passing the fetch PROMISE OBJECT to the callback -- this line is called immediately without waiting for fetch to complete\n}\n\nfetchData(handleData);\n</code></pre> <p>In this example, fetchData performs a network request and uses a callback to return the data or an error.</p>"},{"location":"webdev_snippets/#callback-hell-and-its-avoidance","title":"Callback Hell and Its Avoidance","text":"<p>One of the drawbacks of callbacks is \"callback hell\" or \"pyramid of doom,\" which refers to heavily nested callbacks leading to complex and unreadable code.</p> <p>To avoid callback hell:</p> <ul> <li>Use named functions instead of anonymous functions.</li> <li>Modularize code by breaking it into smaller, reusable functions.</li> <li>Consider using Promises or async/await where appropriate.</li> </ul> <p>Understanding callbacks is crucial in JavaScript as they are foundational to asynchronous programming. While Promises and async/await are often preferred for handling asynchronous operations, callbacks are still widely used, especially in legacy codebases and in certain libraries and APIs.</p>"},{"location":"webdev_snippets/#asyncawait","title":"Async/Await","text":"<p>This Promise-returning function... </p> <pre><code>function add2 (x,y){\n  return new Promise((resolve,reject)=&gt;{\n   resolve(x+y);\n  })\n}\n\nadd2(1,2).then((result) =&gt; {\n console.log(result)\n})\n</code></pre> <p>...can be re-written as:</p> <pre><code>async function add(x, y) {\n return x + y\n}\n\nadd(1,2).then((result) =&gt; {\n console.log(result)\n})\n</code></pre> <p>async and await make asynchronous code easier to write and read (makes it look like synchronous code) They are built on top of Promises and are syntactic sugar for Promises. async declares an asynchronous function, returning a Promise.  It is critical to remember that async functions always return a Promise. await is used in an async function to wait for a Promise.  It can only be used within an async function. * await can be used to wait for any Promise-based function. For example:  </p> <pre><code>async function fetchData() {\n    let response = await fetch('https://api.example.com/data');\n    let data = await response.json();\n    console.log(data);\n}\n</code></pre> <p>In the above, fetchData() is an async function that fetches data from an API. * await is used to wait for the fetch() Promise to resolve. (fetch() is a built-in JavaScript function for making network requests.) * await is also used to wait for the response.json() Promise to resolve. (response.json() is a built-in JavaScript function for parsing JSON data.) Here is the same example using .then():</p> <pre><code>async function fetchData() {\n    fetch('https://api.example.com/data')\n        .then((response) =&gt; response.json())\n        .then((data) =&gt; console.log(data))\n        .catch((error) =&gt; console.error(error));\n}\n\nfetchData();\n</code></pre> <p>Note that the return value of an async function is wrapped in a Promise. This means that async functions can be chained with .then().</p> <p>Here is the same example using the Promise constructor:</p> <pre><code>function fetchData() {\n    return new Promise((resolve, reject) =&gt; {\n        fetch('https://api.example.com/data')\n            .then((response) =&gt; response.json())\n            .then((data) =&gt; resolve(data))\n            .catch((error) =&gt; reject(error));\n    });\n}\n\nfetchData()\n    .then((data) =&gt; console.log(data))\n    .catch((error) =&gt; console.error(error));\n</code></pre> <p>While Promise is still used under the hood, async/await abstracts away the Promise constructor and .then() and .catch() methods as well as the need to explicitly return a Promise. Async/await also doesn't require the use of arrow functions or resolve() and reject() (although they can still be used).</p> <p>In short, using async/await is a more concise way of writing asynchronous code than using Promises. Promises require you to chain .then() and .catch() methods, which can be difficult to read and write. async/await allows you to write asynchronous code that looks like synchronous code.</p>"},{"location":"webdev_snippets/#async-function","title":"Async Function","text":"<p>async declares an asynchronous function, returning a Promise.</p> <pre><code>async function myAsyncFunction() {\n    // Asynchronous operation\n    return 'Success';\n}\n\nmyAsyncFunction()\n    .then((value) =&gt; console.log(value)) // `value` is the result of the resolved Promise\n    .catch((error) =&gt; console.log(error)); // `error` is the reason for the rejection\n</code></pre> <p>When myAsyncFunction() is invoked, it returns a Promise. The Promise is resolved with the value 'Success'. Note that the return value of an async function is wrapped in a Promise. This means that async functions can be chained with .then().</p>"},{"location":"webdev_snippets/#await-keyword","title":"Await Keyword","text":"<p>await is used in an async function to wait for a Promise.</p> <pre><code>async function fetchData() {\n    try {\n        let response = await fetch('https://api.example.com/data');\n        let data = await response.json();\n        console.log(data);\n    } catch (error) {\n        console.error('Error fetching data:', error);\n    }\n}\n</code></pre>"},{"location":"webdev_snippets/#common-usage-patterns_1","title":"Common Usage Patterns","text":"<p>1) Fetching Data from an API: Use async/await for server requests.</p> <pre><code>async function getUser(userId) {\n    let response = await fetch(`https://api.example.com/users/${userId}`);\n    let user = await response.json();\n    console.log(user);\n}\n</code></pre> <p>2) Parallel Promises: Use Promise.all() for multiple independent promises.</p> <pre><code>Promise.all([fetch(url1), fetch(url2)])\n    .then((responses) =&gt; {\n        // Handle responses\n    })\n    .catch((error) =&gt; {\n        // Handle error\n    });\n</code></pre> <p>3) Error Handling: Always handle errors in async operations.</p> <p>4) Sequential Operations: Chain promises or use multiple await statements for dependent operations.</p>"},{"location":"webdev_snippets/#event-loop","title":"Event Loop","text":"<p>The event loop is a single-threaded loop that monitors the call stack and the callback queue. When the call stack is empty, the event loop pushes the first callback from the queue to the call stack.</p>"},{"location":"webdev_snippets/#understanding-the-event-loop","title":"Understanding the Event Loop","text":"<p>The event loop is a single-threaded loop that monitors the call stack and the callback queue. When the call stack is empty, the event loop pushes the first callback from the queue to the call stack.</p>"},{"location":"webdev_snippets/#event-loop-phases","title":"Event Loop Phases","text":"<p>The event loop has six phases:</p> <ol> <li>Timers: Executes callbacks scheduled by setTimeout() and setInterval().</li> <li>Pending callbacks: Executes I/O callbacks deferred to the next loop iteration.</li> <li>Idle, prepare: Used internally by the Node.js runtime.</li> <li>Poll: Retrieves new I/O events; executes I/O related callbacks (almost all with the exception of close callbacks, the ones scheduled by timers, and setImmediate()); node will block here when appropriate.</li> <li>Check: setImmediate() callbacks are invoked here.</li> <li>Close callbacks: Some close callbacks, e.g. socket.on('close', ...), are invoked here.</li> </ol>"},{"location":"webdev_snippets/#event-loop-example","title":"Event Loop Example","text":"<pre><code>console.log('script start');\n\nsetTimeout(function() {\n    console.log('setTimeout');\n}, 0);\n\nPromise.resolve()\n    .then(function() {\n        console.log('promise1');\n    })\n    .then(function() {\n        console.log('promise2');\n    });\n\nconsole.log('script end');\n</code></pre> <p>The above code outputs:</p> <pre><code>script start\nscript end\npromise1\npromise2\nsetTimeout\n</code></pre>"},{"location":"webdev_snippets/#event-loop-and-asynchronous-operations","title":"Event Loop and Asynchronous Operations","text":"<p>The event loop is crucial to asynchronous programming in JavaScript. It allows the program to continue running without waiting for an operation to complete, which would block the main thread and make the application unresponsive.</p>"},{"location":"webdev_snippets/#table-of-common-built-in-network-request-functions","title":"Table of common built-in network request functions","text":"Function Description Example Usage <code>fetch()</code> Fetches a resource from the network <code>fetch('https://api.example.com/data')</code> <code>XMLHttpRequest()</code> Creates an XMLHttpRequest object <code>var xhttp = new XMLHttpRequest()</code> <code>onreadystatechange</code> Defines a function to be called when the readyState property changes <code>xhttp.onreadystatechange = function() {...}</code> <code>open()</code> Initializes a request <code>xhttp.open('GET', 'https://api.example.com/data', true)</code> <code>send()</code> Sends the request to the server <code>xhttp.send()</code> <code>readyState</code> Holds the status of the XMLHttpRequest <code>xhttp.readyState</code> <code>status</code> Returns the status-number of a request <code>xhttp.status</code> <code>responseText</code> Returns the response data as a string <code>xhttp.responseText</code> <code>responseXML</code> Returns the response data as XML data <code>xhttp.responseXML</code> <code>onload</code> Defines a function to be called when the request is completed <code>xhttp.onload = function() {...}</code> <code>onerror</code> Defines a function to be called when the request fails <code>xhttp.onerror = function() {...}</code> <code>onprogress</code> Defines a function to be called when the browser starts receiving the response from the server <code>xhttp.onprogress = function() {...}</code> <code>onabort</code> Defines a function to be called when the request is aborted <code>xhttp.onabort = function() {...}</code> <code>onloadstart</code> Defines a function to be called when the browser starts to load the response <code>xhttp.onloadstart = function() {...}</code> <code>onloadend</code> Defines a function to be called when the browser has finished loading the response <code>xhttp.onloadend = function() {...}</code> <code>onreadystatechange</code> Defines a function to be called each time the readyState property changes <code>xhttp.onreadystatechange = function() {...}</code> <code>setRequestHeader()</code> Adds a label/value pair to the header to be sent <code>xhttp.setRequestHeader('Content-type', 'application/x-www-form-urlencoded')</code> <code>getResponseHeader()</code> Returns specific header information from the server response <code>xhttp.getResponseHeader('Content-type')</code> <code>getAllResponseHeaders()</code> Returns all the header information from the server response <code>xhttp.getAllResponseHeaders()</code> <code>overrideMimeType()</code> Overrides the MIME type returned by the server <code>xhttp.overrideMimeType('text/xml')</code> <code>withCredentials</code> Specifies whether or not to include cookies in the request <code>xhttp.withCredentials = true</code> <code>abort()</code> Cancels the current request <code>xhttp.abort()</code> <code>prompt()</code> Displays a dialog box that prompts the visitor for input <code>prompt('Please enter your name')</code> <code>confirm()</code> Displays a dialog box with a specified message, along with an OK and a Cancel button <code>confirm('Are you sure?')</code> <code>alert()</code> Displays an alert box with a specified message and an OK button <code>alert('Hello World!')</code> <code>setTimeout()</code> Calls a function or evaluates an expression after a specified number of milliseconds <code>setTimeout(function() {...}, 3000)</code> <code>clearTimeout()</code> Cancels a setTimeout() method <code>clearTimeout(myVar)</code> <code>setInterval()</code> Calls a function or evaluates an expression at specified intervals (in milliseconds) <code>setInterval(function() {...}, 3000)</code> <code>clearInterval()</code> Cancels a setInterval() method <code>clearInterval(myVar)</code> <p>Note in the above that <code>alert()</code>, <code>confirm()</code>, and <code>prompt()</code> are not network request functions, but are included for completeness. They are synchronous functions that block the main thread and should be avoided in modern web development.</p>"},{"location":"webdev_snippets/#introduction-to-react-framework","title":"Introduction to React Framework","text":"React <ul> <li>Background and Theory</li> <li>Why React?</li> <li>Basic Concepts</li> <li>Common Usage</li> <li>Intermediate Concepts</li> <li>React Common Libraries</li> </ul> <p>React is a popular JavaScript library for building user interfaces, particularly for single-page applications. It allows developers to create large web applications that can change data, without reloading the page.</p>"},{"location":"webdev_snippets/#background-and-theory","title":"Background and Theory","text":"<p>React was developed by Facebook and is maintained by Facebook and a community of individual developers and companies. React allows developers to create large web applications that use data that can change over time, without the need to reload the page. Its key feature is the ability to build components, which are custom, reusable HTML elements, that can be nested, managed, and handled independently.</p>"},{"location":"webdev_snippets/#why-react","title":"Why React?","text":"<ul> <li>Component-Based Architecture: React's use of components allows for reusability, ease of testing, and separation of concerns.</li> <li>Declarative Nature: React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes.</li> <li>Learn Once, Write Anywhere: You can develop new features in React without rewriting existing code. React can also render on the server using Node and power mobile apps using React Native.</li> <li>Strong Community and Ecosystem: React has a vast ecosystem of libraries, tools, and extensions, and a strong community that contributes to its growth.</li> </ul>"},{"location":"webdev_snippets/#basic-concepts","title":"Basic Concepts","text":"<ol> <li> <p>JSX: JSX is a syntax extension to JavaScript used with React to describe what the UI should look like. JSX might remind you of a template language, but it comes with the full power of JavaScript.</p> <pre><code>const element = &lt;h1&gt;Hello, world!&lt;/h1&gt;;\n</code></pre> </li> <li> <p>Components: React apps are built using components. A component takes in parameters, called props, and returns a hierarchy of views to display via the render method.</p> <pre><code>class Welcome extends React.Component {\n    render() {\n        return &lt;h1&gt;Hello, {this.props.name}&lt;/h1&gt;;\n    }\n}\n</code></pre> </li> <li> <p>State and Lifecycle: Components can have state by setting <code>this.state</code> in their constructors. <code>this.setState</code> is used to update the state and re-render the component.</p> <pre><code>class Timer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { seconds: 0 };\n    }\n\n    tick() {\n        this.setState(state =&gt; ({\n            seconds: state.seconds + 1\n        }));\n    }\n\n    componentDidMount() {\n        this.interval = setInterval(() =&gt; this.tick(), 1000);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    render() {\n        return (\n            &lt;div&gt;\n                Seconds: {this.state.seconds}\n            &lt;/div&gt;\n        );\n    }\n}\n</code></pre> </li> <li> <p>Props: Props are read-only components. They are an effective way to pass existing data to a component, however, the component cannot change the props - they're read-only.</p> <pre><code>function Welcome(props) {\n    return &lt;h1&gt;Hello, {props.name}&lt;/h1&gt;;\n}\n</code></pre> </li> <li> <p>Event Handling: React elements handle events similarly to DOM elements, with some syntax differences.</p> <pre><code>&lt;button onClick={activateLasers}&gt;\n    Activate Lasers\n&lt;/button&gt;\n</code></pre> </li> </ol>"},{"location":"webdev_snippets/#common-usage","title":"Common Usage","text":"<p>React is commonly used for: - Single-Page Applications (SPA): React's powerful rendering capabilities and its efficient diff algorithms make it an ideal choice for SPAs. - Interactive User Interfaces: React's component structure allows for interactive and dynamic user interfaces with ease. - Complex Applications with Dynamic Data: The use of state and props in React makes it suitable for applications with complex and changing data.</p> <p>React's design and capabilities make it an excellent choice for developers looking to build dynamic, high-performance web applications. Its component-based architecture, combined with its declarative nature and strong community support, makes React a go-to library in modern web development.</p>"},{"location":"webdev_snippets/#intermediate-concepts","title":"Intermediate Concepts","text":"<ol> <li>Virtual DOM: React creates an in-memory data structure cache, computes the resulting differences, and then updates the browser's displayed DOM efficiently. This allows the programmer to write code as if the entire page is rendered on each change, while the React libraries only render subcomponents that actually change.</li> </ol> <p>Different from the actual DOM, the virtual DOM is an abstraction of the HTML DOM. It is lightweight and detached from the browser-specific implementation details. When the state of a React component changes, React updates the virtual DOM tree. Once the virtual DOM has been updated, React then compares the current version of the virtual DOM with the previous version of the virtual DOM. This process is called reconciliation. Once React knows which virtual DOM objects have changed, then React updates those objects, and only those objects, on the real DOM. This makes React fast. It is kind of like git diff, but for the DOM.</p> <p>React doesn't actually do this. It is done by a library called ReactDOM. ReactDOM is the glue between React and the DOM. ReactDOM is what allows React to work with the DOM. ReactDOM is what allows React to update the DOM.</p> <ol> <li> <p>React Hooks: Hooks are functions that let you \"hook into\" React state and lifecycle features from function components. Hooks don't work inside classes - they let you use React without classes.</p> <p><pre><code>import React, { useState } from 'react';\n\nfunction Example() {\n    // Declare a new state variable, which we'll call \"count\"\n    const [count, setCount] = useState(0);\n\n    return (\n        &lt;div&gt;\n            &lt;p&gt;You clicked {count} times&lt;/p&gt;\n            &lt;button onClick={() =&gt; setCount(count + 1)}&gt;\n                Click me\n            &lt;/button&gt;\n        &lt;/div&gt;\n    );\n}\n</code></pre> 2. React Router: React Router is a collection of navigational components that compose declaratively with your application. React Router is a third-party library that allows you to handle routing in a web app, using dynamic routing, nested routes, and more.</p> <pre><code>import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nfunction Index() {\n    return &lt;h2&gt;Home&lt;/h2&gt;;\n}\n\nfunction About() {\n    return &lt;h2&gt;About&lt;/h2&gt;;\n}\n\nfunction Users() {\n    return &lt;h2&gt;Users&lt;/h2&gt;;\n}\n\nfunction App() {\n    return (\n        &lt;Router&gt;\n            &lt;div&gt;\n                &lt;nav&gt;\n                    &lt;ul&gt;\n                        &lt;li&gt;\n                            &lt;Link to=\"/\"&gt;Home&lt;/Link&gt;\n                        &lt;/li&gt;\n                        &lt;li&gt;\n                            &lt;Link to=\"/about/\"&gt;About&lt;/Link&gt;\n                        &lt;/li&gt;\n                        &lt;li&gt;\n                            &lt;Link to=\"/users/\"&gt;Users&lt;/Link&gt;\n                        &lt;/li&gt;\n                    &lt;/ul&gt;\n                &lt;/nav&gt;\n\n                &lt;Route path=\"/\" exact component={Index} /&gt;\n                &lt;Route path=\"/about/\" component={About} /&gt;\n                &lt;Route path=\"/users/\" component={Users} /&gt;\n            &lt;/div&gt;\n        &lt;/Router&gt;\n    );\n}\n\nReactDOM.render(&lt;App /&gt;, document.getElementById(\"root\"));\n</code></pre> </li> <li> <p>React Context: Context provides a way to pass data through the component tree without having to pass props down manually at every level.</p> <pre><code>const ThemeContext = React.createContext('light');\n\nclass App extends React.Component {\n    render() {\n        // Use a Provider to pass the current theme to the tree below.\n        // Any component can read it, no matter how deep it is.\n        // In this example, we're passing \"dark\" as the current value.\n        return (\n            &lt;ThemeContext.Provider value=\"dark\"&gt;\n                &lt;Toolbar /&gt;\n            &lt;/ThemeContext.Provider&gt;\n        );\n    }\n}\n\n// A component in the middle doesn't have to\n// pass the theme down explicitly anymore.\nfunction Toolbar(props) {\n    return (\n        &lt;div&gt;\n            &lt;ThemedButton /&gt;\n        &lt;/div&gt;\n    );\n}\n\nfunction ThemedButton(props) {\n    // Use a Consumer to read the current theme context.\n    // React will find the closest theme Provider above and use its value.\n    // In this example, the current theme is \"dark\".\n    return (\n        &lt;ThemeContext.Consumer&gt;\n            {theme =&gt; &lt;Button {...props} theme={theme} /&gt;}\n        &lt;/ThemeContext.Consumer&gt;\n    );\n}\n</code></pre> </li> <li> <p>React Testing Library: React Testing Library is a set of helpers that let you test React components without relying on their implementation details.</p> <pre><code>import React from 'react'\nimport { render, fireEvent } from '@testing-library/react'\nimport '@testing-library/jest-dom/extend-expect'\n\nfunction Counter() {\n    const [count, setCount] = React.useState(0)\n\n    return (\n        &lt;div&gt;\n            &lt;button onClick={() =&gt; setCount(count + 1)}&gt;\n                Clicked {count} times\n            &lt;/button&gt;\n        &lt;/div&gt;\n    )\n}\n\ntest('increments counter', () =&gt; {\n    const { getByText } = render(&lt;Counter /&gt;)\n    const button = getByText(/clicked 0 times/i)\n    fireEvent.click(button)\n    expect(button).toHaveTextContent(/clicked 1 times/i)\n})\n</code></pre> </li> <li> <p>React Redux: Redux is a predictable state container for JavaScript apps. It helps you write applications that behave consistently, run in different environments (client, server, and native), and are easy to test.</p> <pre><code>import { createStore } from 'redux'\n\n/**\n * This is a reducer, a pure function with (state, action) =&gt; state signature.\n    * It describes how an action transforms the state into the next state.\n    *\n    * The shape of the state is up to you: it can be a primitive, an array, an object,\n    * or even an Immutable.js data structure. The only important part is that you should\n    * not mutate the state object, but return a new object if the state changes.\n    *\n    * In this example, we use a `switch` statement and strings, but you can use a helper that\n    * follows a different convention (such as function maps) if it makes sense for your\n    * project.\n    */\nfunction counter(state = 0, action) {\n    switch (action.type) {\n        case 'INCREMENT':\n            return state + 1\n        case 'DECREMENT':\n            return state - 1\n        default:\n            return state\n    }\n}\n\n// Create a Redux store holding the state of your app.\n// Its API is { subscribe, dispatch, getState }.\nlet store = createStore(counter)\n\n// You can subscribe to the updates manually, or use bindings to your view layer.\nstore.subscribe(() =&gt; console.log(store.getState()))\n\n// The only way to mutate the internal state is to dispatch an action.\n// The actions can be serialized, logged or stored and later replayed.\nstore.dispatch({ type: 'INCREMENT' })\n// 1\nstore.dispatch({ type: 'INCREMENT' })\n// 2\nstore.dispatch({ type: 'DECREMENT' })\n// 1\n</code></pre> </li> </ol> <p>Redux is useful for managing the state of an application. It is commonly used with React, but can be used with any other JavaScript framework or library.</p>"},{"location":"webdev_snippets/#react-common-libraries","title":"React Common Libraries","text":"<ol> <li>React Router: React Router is a collection of navigational components that compose declaratively with your application. React Router is a third-party library that allows you to handle routing in a web app, using dynamic routing, nested routes, and more.</li> <li>React Redux: Redux is a predictable state container for JavaScript apps. It helps you write applications that behave consistently, run in different environments (client, server, and native), and are easy to test.</li> <li>React Testing Library: React Testing Library is a set of helpers that let you test React components without relying on their implementation details.</li> <li>React Context: Context provides a way to pass data through the component tree without having to pass props down manually at every level.</li> <li>React Hooks: Hooks are functions that let you \"hook into\" React state and lifecycle features from function components. Hooks don't work inside classes - they let you use React without classes.</li> <li>React Bootstrap: React Bootstrap is a popular front-end framework, rebuilt for React.</li> <li>React Native: React Native is a framework for building native mobile apps using React. It allows you to create native apps for Android and iOS using React.</li> <li>React Material UI: React Material UI is a popular React UI framework that follows Google's Material Design guidelines.</li> <li>React Semantic UI: React Semantic UI is a popular React UI framework that follows the principles of Semantic UI.</li> <li>React Ant Design: React Ant Design is a popular React UI framework that follows the principles of Ant Design.</li> <li>React Foundation: React Foundation is a popular React UI framework that follows the principles of Foundation.</li> <li>React Bulma: React Bulma is a popular React UI framework that follows the principles of Bulma.</li> <li>React Tailwind: React Tailwind is a popular React UI framework that follows the principles of Tailwind CSS.</li> <li>React Admin: React Admin is a popular React UI framework for building admin applications.</li> <li>React D3: React D3 is a popular React UI framework for building data visualizations.</li> <li>React Chart.js: React Chart.js is a popular React UI framework for building charts and graphs.</li> <li>React Google Maps: React Google Maps is a popular React UI framework for building maps.</li> <li>React Leaflet: React Leaflet is a popular React UI framework for building maps.</li> <li>React Bootstrap Table: React Bootstrap Table is a popular React UI framework for building tables.</li> <li>React Table: React Table is a popular React UI framework for building tables.</li> <li>React Virtualized: React Virtualized is a popular React UI framework for building large lists and tables.</li> </ol>"},{"location":"webdev_snippets/#primer-on-typescript","title":"Primer on TypeScript","text":"TypeScript <ul> <li>Examples of TypeScript</li> <li>TypeScript vs JavaScript</li> <li>TypeScript with React</li> </ul> <p>TypeScript is a superset of JavaScript that adds static type definitions. TypeScript code is transformed into JavaScript code via the TypeScript compiler or Babel.</p>"},{"location":"webdev_snippets/#examples-of-typescript","title":"Examples of TypeScript","text":"<ul> <li>Function Example</li> </ul> TypeScript <pre><code>function greeter(person: string) {\n    return \"Hello, \" + person;\n}\n\nlet user = \"Jane User\";\n\ndocument.body.textContent = greeter(user); // Hello, Jane User\n</code></pre> JavaScript <pre><code>function greeter(person) {\n    return \"Hello, \" + person;\n}\n\nlet user = \"Jane User\";\n\ndocument.body.textContent = greeter(user); // Hello, Jane User\n</code></pre> <ul> <li>Interface Example<ul> <li>TypeScript interfaces are used to define the shape of an object.<ul> <li>Example: <code>interface Person { firstName: string; lastName: string; }</code></li> <li>The purpose of an interface is to enforce a contract between two objects.</li> </ul> </li> <li>JavaScript does not have interfaces.<ul> <li>In JavaScript, the equivalent is to use a plain object and define its properties in the invocation.</li> <li>Doing so does not enforce a contract between two objects.</li> </ul> </li> </ul> </li> </ul> TypeScript <pre><code>interface Person {\n    firstName: string;\n    lastName: string;\n}\n\nfunction greeter(person: Person) {\n    return \"Hello, \" + person.firstName + \" \" + person.lastName;\n}\n\nlet user = { firstName: \"Jane\", lastName: \"User\" };\n\ndocument.body.textContent = greeter(user); // Hello, Jane User\n</code></pre> JavaScript <pre><code>function greeter(person) {\n    return \"Hello, \" + person.firstName + \" \" + person.lastName;\n}\n\nlet user = { firstName: \"Jane\", lastName: \"User\" };\n\ndocument.body.textContent = greeter(user); // Hello, Jane User\n</code></pre> <p>The above differs from JavaScript in that it uses static type definitions. This allows for type checking at compile time, which can help prevent bugs and improve code quality.</p>"},{"location":"webdev_snippets/#typescript-vs-javascript","title":"TypeScript vs JavaScript","text":"<p>Syntax differences:</p> <ul> <li>TypeScript uses static typing, while JavaScript uses dynamic typing.<ul> <li>Example: <code>let foo: string = 'bar';</code></li> </ul> </li> <li>TypeScript uses type annotations, while JavaScript does not.<ul> <li>Example: <code>let foo: string = 'bar';</code></li> </ul> </li> <li>TypeScript uses interfaces, while JavaScript does not.<ul> <li>Example: <code>interface Person { firstName: string; lastName: string; }</code></li> </ul> </li> <li>TypeScript uses generics, while JavaScript does not.<ul> <li>Example: <code>function identity&lt;T&gt;(arg: T): T { return arg; }</code></li> <li>The above example uses a type variable <code>T</code> to capture the type the user provides (e.g. <code>number</code>), so that we can use that information later.</li> </ul> </li> <li>TypeScript uses namespaces, while JavaScript does not.<ul> <li>Example: <code>namespace Validation { export interface StringValidator { isAcceptable(s: string): boolean; } }</code></li> <li>Namespaces are simply named JavaScript objects in the global namespace.</li> </ul> </li> </ul>"},{"location":"webdev_snippets/#typescript-with-react","title":"TypeScript with React","text":"<p>React is a popular JavaScript library for building user interfaces, particularly for single-page applications. It allows developers to create large web applications that can change data, without reloading the page. TypeScript is a favorite among many developers for its static type checking and code refactoring features. It is commonly used with React, but can be used with any other JavaScript framework or library. In particular, TypeScript is useful when working with React because it allows for components to specify their own prop types and state types. This makes it easier to catch common bugs at compile time and provides better documentation for component APIs.</p>"},{"location":"webdev_snippets/#nodejs-and-npm","title":"Node.js and npm","text":"Node <ul> <li>Background and Theory of Node.js</li> <li>Why Use Node.js?</li> <li>npm: Node Package Manager</li> <li>Common npm Commands</li> <li>package.json File         - Example package.json</li> </ul> <p>Node.js is an open-source, cross-platform JavaScript runtime environment that executes JavaScript code outside of a browser. npm (Node Package Manager) is the default package manager for Node.js, providing access to a large ecosystem of libraries.</p>"},{"location":"webdev_snippets/#background-and-theory-of-nodejs","title":"Background and Theory of Node.js","text":"<ul> <li>Non-blocking I/O: Node.js is designed to optimize throughput and scalability in web applications and is a good solution for many common web-development problems.</li> <li>V8 Engine: Node.js uses the V8 JavaScript runtime engine developed by Google for Chrome. It compiles JavaScript directly into native machine code.</li> </ul>"},{"location":"webdev_snippets/#why-use-nodejs","title":"Why Use Node.js?","text":"<ul> <li>Fast Performance: Leveraging the V8 engine allows Node.js to provide high performance for certain types of applications, particularly I/O-bound ones.</li> <li>Single Language: JavaScript is used both on the client and server side. This can make development more efficient by reusing code and patterns.</li> <li>Rich Ecosystem: npm provides access to thousands of packages, which makes extending the functionality of your application relatively straightforward.</li> </ul>"},{"location":"webdev_snippets/#npm-node-package-manager","title":"npm: Node Package Manager","text":"<p>npm is the world's largest software registry, offering open source developers a community-driven, reusable codebase.</p>"},{"location":"webdev_snippets/#common-npm-commands","title":"Common npm Commands","text":"<ul> <li>Install a package: <code>npm install &lt;package_name&gt;</code></li> <li>Install a package globally: <code>npm install -g &lt;package_name&gt;</code></li> <li>Uninstall a package: <code>npm uninstall &lt;package_name&gt;</code></li> <li>Update a package: <code>npm update &lt;package_name&gt;</code></li> <li>Initialize a new project: <code>npm init</code></li> <li>Run a script defined in <code>package.json</code>: <code>npm run &lt;script_name&gt;</code></li> </ul>"},{"location":"webdev_snippets/#packagejson-file","title":"package.json File","text":"<p>This file holds metadata relevant to the project and is used to manage the project's dependencies, scripts, and version information.</p>"},{"location":"webdev_snippets/#example-packagejson","title":"Example package.json","text":"<pre><code>{\n    \"name\": \"my-project\",\n    \"version\": \"1.0.0\",\n    \"description\": \"A Node.js project\",\n    \"main\": \"index.js\",\n    \"scripts\": {\n        \"start\": \"node index.js\",\n        \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n    },\n    \"dependencies\": {\n        \"express\": \"^4.17.1\"\n    },\n    \"devDependencies\": {\n        \"nodemon\": \"^2.0.7\"\n    }\n}\n</code></pre> <p>Node.js and npm are powerful tools for modern web development. Node.js's non-blocking architecture makes it a preferred choice for applications that require real-time data processing. npm, with its vast repository, allows for easy expansion and management of application dependencies.</p>"},{"location":"webdev_snippets/#introduction-to-yarn","title":"Introduction to Yarn","text":"Yarn <ul> <li>Why Use Yarn?</li> <li>Common Yarn Commands</li> <li>yarn.lock File</li> <li>Example usage in a project</li> </ul> <p>Yarn is a fast, reliable, and secure dependency management tool created by Facebook, Google, Exponent, and Tilde. It's an alternative to npm (Node Package Manager) and offers several advantages in terms of performance and ease of use.</p>"},{"location":"webdev_snippets/#why-use-yarn","title":"Why Use Yarn?","text":"<ul> <li>Performance: Yarn caches every package it downloads, so it never needs to download the same package again. It also parallelizes operations to maximize resource utilization.</li> <li>Reliability: Yarn uses detailed but concise lock files to ensure that the same dependencies are installed in the same way across all environments.</li> <li>Security: Yarn includes built-in integrity checks to verify the integrity of installed packages.</li> </ul>"},{"location":"webdev_snippets/#common-yarn-commands","title":"Common Yarn Commands","text":"<p>Yarn integrates with the npm package registry, but it manages dependencies more quickly and reliably.</p> <ul> <li>Initialize a new project: <code>yarn init</code></li> <li>Add a dependency: <code>yarn add &lt;package_name&gt;</code></li> <li>Add a dev dependency: <code>yarn add &lt;package_name&gt; --dev</code></li> <li>Remove a dependency: <code>yarn remove &lt;package_name&gt;</code></li> <li>Install all dependencies: <code>yarn</code> or <code>yarn install</code></li> <li>Upgrade a package: <code>yarn upgrade &lt;package_name&gt;</code></li> <li>Run a script defined in <code>package.json</code>: <code>yarn run &lt;script_name&gt;</code></li> </ul>"},{"location":"webdev_snippets/#yarnlock-file","title":"yarn.lock File","text":"<p>Similar to npm's <code>package-lock.json</code>, Yarn uses a <code>yarn.lock</code> file to lock the versions of package dependencies. This file is auto-generated and should be committed to version control to ensure consistency across installations.</p>"},{"location":"webdev_snippets/#example-usage-in-a-project","title":"Example usage in a project","text":"<p>When you run <code>yarn add &lt;package_name&gt;</code>, Yarn will add the package to your <code>package.json</code> and <code>yarn.lock</code>, ensuring that other developers on your project have the exact same setup.</p> <p>Yarn provides an efficient and secure way to manage project dependencies. It ensures consistency across installations and offers superior performance compared to traditional npm, especially in larger projects.</p>"},{"location":"webdev_snippets/#redux","title":"Redux","text":"Redux <ul> <li>Key Concepts of Redux:</li> <li>Why Use Redux?</li> <li>Use Cases for Redux:</li> </ul> <p>Redux is a popular JavaScript library for managing and centralizing the state of web applications. It is commonly used with libraries such as React and Angular but can be used with any other JavaScript framework or library. Redux provides a consistent way to manage state across an entire application, which can be particularly helpful in large or complex applications with many moving parts.</p>"},{"location":"webdev_snippets/#key-concepts-of-redux","title":"Key Concepts of Redux:","text":"<ul> <li>Store: The store is a centralized place where your application's state lives. It is created using Redux's createStore method. The entire state of your application is stored in an object tree within a single store. This makes the state predictable and easier to manage.</li> <li>Actions: Actions are plain JavaScript objects that represent what has happened (i.e., user interactions, API calls returning, etc.) and are the only way to send data to the store. They typically have a type field that indicates the type of action being performed.</li> <li>Reducers: Reducers are pure functions that take the current state of the application and an action as arguments and return a new state. The reducer determines how the state changes in response to an action sent to the store.</li> <li>Dispatch: Dispatching is the process of sending actions to the store. Actions are dispatched to tell the store that something happened, and it's time to update the state.</li> </ul>"},{"location":"webdev_snippets/#why-use-redux","title":"Why Use Redux?","text":"<ul> <li>Predictability: Redux ensures that the state of your application is predictable and easier to debug. Every change to the state is done via a reducer function, so the state is always predictable.</li> <li>Maintainability: By centralizing the state, Redux makes the state management in your application more organized and manageable.</li> <li>Developer Tools: Redux has great developer tools, making it easy to track when, where, why, and how the application's state changed. Redux DevTools can be a powerful aid in understanding and debugging state changes.</li> <li>Community and Ecosystem: Redux has a large community and ecosystem, offering numerous extensions and add-ons, which makes it a versatile tool for building complex applications.</li> </ul>"},{"location":"webdev_snippets/#use-cases-for-redux","title":"Use Cases for Redux:","text":"<ul> <li>Large Applications: Redux is particularly useful in large-scale applications where state management can become complex.</li> <li>High Interaction Applications: Applications with complex state interactions, such as forms with lots of inputs, can benefit greatly from Redux.</li> <li>Shared State Across Components: When different parts of the application need to access and react to the same state, Redux provides a convenient solution.</li> </ul> <p>Redux is not always necessary for smaller or simpler applications, as it introduces a certain amount of overhead and complexity. In such cases, simpler state management solutions or even the built-in state management tools of frameworks like React might be sufficient.</p>"},{"location":"webdev_snippets/#development-workflow-for-react-using-vscode-and-npm","title":"Development Workflow for React Using VSCode and npm","text":"Development Workflow <ul> <li>Setting Up a New React Project</li> <li>Development Process</li> <li>Building and Deployment</li> <li>Best Practices</li> <li>Conclusion</li> </ul> <p>Creating a productive development workflow is crucial when working with React. This section covers setting up a React project, developing the application, and using VSCode and npm effectively.</p>"},{"location":"webdev_snippets/#setting-up-a-new-react-project","title":"Setting Up a New React Project","text":"<ol> <li>Creating a React App:      To create a new React project, use the Create React App command. In your terminal, run:      <pre><code>npx create-react-app my-app\ncd my-app\n</code></pre>      This sets up a new React project in the <code>my-app</code> directory, with all the necessary build configurations.</li> </ol>"},{"location":"webdev_snippets/#development-process","title":"Development Process","text":"<ol> <li> <p>Running the Development Server:      Inside the project directory, start the development server by running:</p> <pre><code>npm start\n</code></pre> <p>This command starts a development server and opens a new browser tab pointing to <code>localhost:3000</code>.</p> </li> <li> <p>Installing Dependencies:      Install any additional packages using npm. For example, to install Redux:      <pre><code>npm install redux react-redux\n</code></pre></p> </li> <li> <p>Writing Code:</p> <ul> <li>Utilize VSCode features like IntelliSense, snippets, and code navigation for efficient coding.</li> <li>Regularly commit changes to version control (e.g., Git).</li> </ul> </li> <li> <p>Linting and Formatting:</p> <ul> <li>Use ESLint for linting. You can install it as a VSCode extension.</li> <li>Prettier is great for automatic code formatting. It can also be installed as a VSCode extension.</li> <li>Configure ESLint and Prettier in VSCode to enforce code quality and consistency.</li> </ul> </li> <li> <p>Testing:</p> <ul> <li>Write unit tests for your components and logic.</li> <li>Use Jest, which comes pre-configured with Create React App.</li> <li>Run tests using npm test in the terminal.</li> </ul> </li> <li> <p>Debugging:</p> <ul> <li>Use the built-in debugger in VSCode.</li> <li>Configure the debugger for React to help trace and fix issues effectively.</li> </ul> </li> </ol>"},{"location":"webdev_snippets/#building-and-deployment","title":"Building and Deployment","text":"<ol> <li> <p>Building the Application:</p> <ul> <li>Create a production build of your application by running:      <code>npm run build</code>         - This command bundles the React application in production mode and optimizes the build for the best performance.</li> </ul> </li> <li> <p>Deployment:</p> <ul> <li>Deploy the build directory to a web server.</li> <li>Services like Netlify, Vercel, and GitHub Pages offer easy deployment solutions for React apps.</li> </ul> </li> </ol>"},{"location":"webdev_snippets/#best-practices","title":"Best Practices","text":"<ul> <li>Component Structure: Keep your components small and focused. Reuse components as much as possible.</li> <li>State Management: Use React's Context API or Redux for global state management.</li> <li>Folder Organization: Organize your project files in a logical way. Group by feature or route and keep related files close to each other.</li> <li>Continuous Learning: Stay updated with React's new features and best practices. Follow the official React blog and other community resources.</li> </ul>"},{"location":"webdev_snippets/#conclusion","title":"Conclusion","text":"<p>Developing React applications with VSCode and npm provides a powerful and efficient environment. Utilizing the right tools and best practices can greatly enhance the development experience and productivity.</p>"}]}